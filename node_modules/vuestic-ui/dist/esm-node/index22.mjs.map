{"version":3,"file":"index22.mjs","sources":["../../src/components/va-counter/VaCounter.vue","../../src/components/va-counter/VaCounter.vue?vue&type=template&id=09d88868&lang.js","../../src/components/va-counter/index.ts"],"sourcesContent":["<template>\n  <VaInputWrapper\n    class=\"va-counter\"\n    v-bind=\"{ ...fieldListeners, ...inputWrapperPropsComputed }\"\n    :class=\"classComputed\"\n    :style=\"styleComputed\"\n    :focused=\"isFocused\"\n    @keydown.up.prevent=\"increaseCount()\"\n    @keydown.down.prevent=\"decreaseCount()\"\n  >\n    <template v-if=\"$props.buttons\" #prepend=\"slotScope\">\n      <div class=\"va-counter__prepend-wrapper\"\n        :style=\"{ marginRight: marginComputed }\"\n        @mousedown.prevent=\"focus()\"\n      >\n        <slot name=\"decreaseAction\" v-bind=\"{ ...slotScope, decreaseCount }\">\n          <va-button\n            class=\"va-counter__button-decrease\"\n            aria-label=\"decrease counter\"\n            v-bind=\"decreaseButtonProps\"\n            @click=\"decreaseCount()\"\n          />\n        </slot>\n      </div>\n    </template>\n\n    <template v-else #prependInner=\"slotScope\">\n      <div @mousedown.prevent=\"focus()\">\n        <slot name=\"decreaseAction\" v-bind=\"{ ...slotScope, decreaseCount }\">\n          <va-icon\n            class=\"va-counter__icon-decrease\"\n            v-bind=\"decreaseIconProps\"\n          />\n        </slot>\n      </div>\n    </template>\n\n    <template v-if=\"$props.buttons\"  #append=\"slotScope\">\n      <div class=\"va-counter__append-wrapper\"\n        :style=\"{ marginLeft: marginComputed }\"\n        @mousedown.prevent=\"focus()\"\n      >\n        <slot name=\"increaseAction\" v-bind=\"{ ...slotScope, increaseCount }\">\n          <va-button\n            class=\"va-counter__button-increase\"\n            aria-label=\"increase counter\"\n            v-bind=\"increaseButtonProps\"\n            @click=\"increaseCount()\"\n          />\n        </slot>\n      </div>\n    </template>\n\n    <template v-else #appendInner=\"slotScope\">\n      <div @mousedown.prevent=\"focus()\">\n        <slot name=\"increaseAction\" v-bind=\"{ ...slotScope, increaseCount }\">\n          <va-icon\n            class=\"va-counter__icon-increase\"\n            v-bind=\"increaseIconProps\"\n          />\n        </slot>\n      </div>\n    </template>\n\n    <template v-if=\"$slots.content\" #content=\"slotScope\">\n      <div ref=\"input\" tabindex=\"0\">\n        <slot name=\"content\" v-bind=\"{ ...slotScope, value: Number(valueComputed) }\" />\n      </div>\n    </template>\n\n    <input\n      v-if=\"!$slots.content\"\n      ref=\"input\"\n      class=\"va-input__content__input\"\n      type=\"number\"\n      inputmode=\"decimal\"\n      v-bind=\"{ ...inputAttributesComputed, ...inputListeners }\"\n      :value=\"valueComputed\"\n      @input=\"setCountInput\"\n      @change=\"setCountChange\"\n    >\n  </VaInputWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, InputHTMLAttributes, PropType, ComputedRef, shallowRef } from 'vue'\nimport omit from 'lodash/omit'\nimport pick from 'lodash/pick'\n\nimport {\n  useFormProps,\n  useEmitProxy,\n  useFocus, useFocusEmits,\n  useStateful, useStatefulProps,\n  useColors,\n} from '../../composables'\nimport { safeCSSLength } from '../../utils/css-utils'\n\nimport VaInputWrapper from '../va-input/components/VaInputWrapper.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport VaButton from '../va-button/VaButton.vue'\n\nconst { createEmits: createInputEmits, createListeners: createInputListeners } = useEmitProxy(\n  ['change'],\n)\n\nconst { createEmits: createFieldEmits, createListeners: createFieldListeners } = useEmitProxy([\n  { listen: 'click-prepend', emit: 'click:decrease-button' },\n  { listen: 'click-append', emit: 'click:increase-button' },\n  { listen: 'click-prepend-inner', emit: 'click:decrease-icon' },\n  { listen: 'click-append-inner', emit: 'click:increase-icon' },\n])\n\nexport default defineComponent({\n  name: 'VaCounter',\n\n  components: { VaInputWrapper, VaIcon, VaButton },\n\n  props: {\n    ...useFormProps,\n    ...useStatefulProps,\n    // input\n    modelValue: { type: [String, Number], default: 0 },\n    manualInput: { type: Boolean, default: false },\n    stateful: { type: Boolean, default: false },\n    min: { type: Number, default: undefined },\n    max: { type: Number, default: undefined },\n    step: { type: Number, default: 1 },\n    label: { type: String, default: '' },\n    // hint\n    messages: { type: [Array, String] as PropType<string[] | string>, default: () => [] },\n    // style\n    width: { type: [String, Number], default: '160px' },\n    color: { type: String, default: 'primary' },\n    outline: { type: Boolean },\n    bordered: { type: Boolean },\n    // icons & buttons\n    increaseIcon: { type: String, default: 'add' },\n    decreaseIcon: { type: String, default: 'remove' },\n    buttons: { type: Boolean, default: false },\n    flat: { type: Boolean, default: true },\n    rounded: { type: Boolean, default: false },\n    margins: { type: [String, Number], default: '4px' },\n    textColor: { type: String, default: undefined },\n  },\n\n  emits: [\n    'update:modelValue',\n    ...createInputEmits(),\n    ...createFieldEmits(),\n    ...useFocusEmits,\n  ],\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs }) {\n    const input = shallowRef<HTMLInputElement | HTMLDivElement>()\n\n    const {\n      isFocused,\n      focus,\n      blur,\n    } = useFocus(input, emit)\n\n    const { valueComputed } = useStateful(props, emit)\n\n    const setCountInput = ({ target }: Event) => {\n      valueComputed.value = Number((target as HTMLInputElement | null)?.value)\n    }\n\n    const setCountChange = ({ target } : Event) => {\n      calculateCounterValue(Number((target as HTMLInputElement | null)?.value))\n    }\n\n    const getRoundDownWithStep = (value: number) => {\n      if (!props.min || !props.step) { return value }\n\n      // If the user enters a value manually, then we must round it to the nearest valid value,\n      // taking into account the initial value (`props.min`) and the step size (`props.step`)\n      return props.min + props.step * Math.floor((value - props.min) / props.step)\n    }\n\n    const calculateCounterValue = (counterValue: number) => {\n      if (props.min && counterValue < props.min) {\n        valueComputed.value = props.min\n        return\n      }\n\n      if (props.max && (counterValue > props.max)) {\n        // since the `props.step` may not be a multiple of `(props.max - props.min)`,\n        // we must round the result taking into account the allowable value\n        valueComputed.value = getRoundDownWithStep(props.max)\n        return\n      }\n\n      valueComputed.value = getRoundDownWithStep(counterValue)\n    }\n\n    const isMinReached = computed(() => {\n      if (!props.min) { return false }\n      return Number(valueComputed.value) <= props.min\n    })\n\n    const isMaxReached = computed(() => {\n      if (!props.max) { return false }\n\n      return props.step\n        ? Number(valueComputed.value) > (props.max - props.step)\n        : Number(valueComputed.value) >= props.max\n    })\n\n    const tabIndexComputed = computed(() => props.disabled ? -1 : 0)\n\n    const isDecreaseActionDisabled = computed(() => (\n      isMinReached.value || props.readonly || props.disabled\n    ))\n\n    const isIncreaseActionDisabled = computed(() => (\n      isMaxReached.value || props.readonly || props.disabled\n    ))\n\n    const decreaseCount = () => {\n      if (isDecreaseActionDisabled.value) { return }\n      calculateCounterValue(Number(valueComputed.value) - props.step)\n    }\n\n    const increaseCount = () => {\n      if (isIncreaseActionDisabled.value) { return }\n      calculateCounterValue(Number(valueComputed.value) + props.step)\n    }\n\n    const { getColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n\n    const decreaseIconProps = computed(() => ({\n      class: { 'va-counter__icon--inactive': isDecreaseActionDisabled.value },\n      color: colorComputed.value,\n      name: props.decreaseIcon,\n      ...(!isDecreaseActionDisabled.value && { onClick: decreaseCount }),\n    }))\n\n    const increaseIconProps = computed(() => ({\n      class: { 'va-counter__icon--inactive': isIncreaseActionDisabled.value },\n      color: colorComputed.value,\n      name: props.increaseIcon,\n      ...(!isIncreaseActionDisabled.value && { onClick: increaseCount }),\n    }))\n\n    const isSquareCorners = computed(() => (\n      (typeof props.margins === 'string' ? parseFloat(props.margins) : props.margins) === 0\n    ))\n\n    const buttonProps = computed(() => ({\n      ...pick(props, ['rounded', 'color', 'textColor']),\n      flat: props.flat && !props.outline,\n      outline: props.flat && props.outline,\n    }))\n\n    const decreaseButtonProps = computed(() => ({\n      ...buttonProps.value,\n      icon: props.decreaseIcon,\n      disabled: isDecreaseActionDisabled.value,\n    }))\n\n    const increaseButtonProps = computed(() => ({\n      ...buttonProps.value,\n      icon: props.increaseIcon,\n      disabled: isIncreaseActionDisabled.value,\n    }))\n\n    const inputAttributesComputed = computed(() => ({\n      tabindex: tabIndexComputed.value,\n      ariaLabel: props.label || 'counter value',\n      ariaValuemin: props.min,\n      ariaValuemax: props.max,\n      ...omit(attrs, ['class', 'style']),\n      ...pick(props, ['disabled', 'min', 'max', 'step']),\n      readonly: props.readonly || !props.manualInput,\n    }) as InputHTMLAttributes)\n\n    const inputWrapperPropsComputed = computed(() => ({\n      ...pick(props, ['color', 'readonly', 'disabled', 'messages', 'label', 'bordered', 'outline']),\n    }))\n\n    const classComputed = computed(() => ([\n      attrs.class,\n      { 'va-counter--input-square': isSquareCorners.value },\n    ]))\n\n    const styleComputed: ComputedRef<Partial<CSSStyleDeclaration>> = computed(() => ({\n      width: safeCSSLength(props.width),\n      ...((attrs.style as Partial<CSSStyleDeclaration>) || {}),\n    }))\n\n    const marginComputed = computed(() => safeCSSLength(props.margins))\n\n    return {\n      input,\n      valueComputed,\n      isFocused,\n\n      fieldListeners: createFieldListeners(emit),\n      inputListeners: createInputListeners(emit),\n      inputAttributesComputed,\n      inputWrapperPropsComputed,\n      setCountInput,\n      setCountChange,\n\n      decreaseCount,\n      increaseCount,\n\n      decreaseIconProps,\n      increaseIconProps,\n      decreaseButtonProps,\n      increaseButtonProps,\n\n      colorComputed,\n      classComputed,\n      styleComputed,\n      marginComputed,\n\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-counter {\n  &.va-counter--input-square {\n    .va-input__container {\n      border-radius: 0;\n      border-left: none;\n      border-right: none;\n    }\n\n    .va-counter__prepend-wrapper {\n      .va-counter__button-decrease {\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n      }\n\n      .va-counter__button-decrease:not(.va-button--square) {\n        width: unset;\n\n        .va-button__content {\n          padding-right: var(--va-counter-button-padding--inner);\n          padding-left: var(--va-counter-button-padding--outer);\n        }\n      }\n    }\n\n    .va-counter__append-wrapper {\n      .va-counter__button-increase {\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n      }\n\n      .va-counter__button-increase:not(.va-button--square) {\n        width: unset;\n\n        .va-button__content {\n          padding-left: var(--va-counter-button-padding--inner);\n          padding-right: var(--va-counter-button-padding--outer);\n        }\n      }\n    }\n  }\n\n  &:not(.va-counter--input-square) {\n    .va-counter__prepend-wrapper,\n    .va-counter__append-wrapper {\n      .va-counter__button-decrease,\n      .va-counter__button-increase {\n        .va-button__content {\n          padding: unset;\n        }\n      }\n    }\n  }\n\n  .va-input__content__input {\n    text-align: center;\n\n    // Chrome, Safari, Edge, Opera\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    // Firefox\n    &[type=number] {\n      -moz-appearance: textfield;\n    }\n  }\n\n  .va-counter__icon--inactive {\n    cursor: inherit;\n    user-select: none;\n    opacity: 0.4;\n  }\n}\n</style>\n","<template>\n  <VaInputWrapper\n    class=\"va-counter\"\n    v-bind=\"{ ...fieldListeners, ...inputWrapperPropsComputed }\"\n    :class=\"classComputed\"\n    :style=\"styleComputed\"\n    :focused=\"isFocused\"\n    @keydown.up.prevent=\"increaseCount()\"\n    @keydown.down.prevent=\"decreaseCount()\"\n  >\n    <template v-if=\"$props.buttons\" #prepend=\"slotScope\">\n      <div class=\"va-counter__prepend-wrapper\"\n        :style=\"{ marginRight: marginComputed }\"\n        @mousedown.prevent=\"focus()\"\n      >\n        <slot name=\"decreaseAction\" v-bind=\"{ ...slotScope, decreaseCount }\">\n          <va-button\n            class=\"va-counter__button-decrease\"\n            aria-label=\"decrease counter\"\n            v-bind=\"decreaseButtonProps\"\n            @click=\"decreaseCount()\"\n          />\n        </slot>\n      </div>\n    </template>\n\n    <template v-else #prependInner=\"slotScope\">\n      <div @mousedown.prevent=\"focus()\">\n        <slot name=\"decreaseAction\" v-bind=\"{ ...slotScope, decreaseCount }\">\n          <va-icon\n            class=\"va-counter__icon-decrease\"\n            v-bind=\"decreaseIconProps\"\n          />\n        </slot>\n      </div>\n    </template>\n\n    <template v-if=\"$props.buttons\"  #append=\"slotScope\">\n      <div class=\"va-counter__append-wrapper\"\n        :style=\"{ marginLeft: marginComputed }\"\n        @mousedown.prevent=\"focus()\"\n      >\n        <slot name=\"increaseAction\" v-bind=\"{ ...slotScope, increaseCount }\">\n          <va-button\n            class=\"va-counter__button-increase\"\n            aria-label=\"increase counter\"\n            v-bind=\"increaseButtonProps\"\n            @click=\"increaseCount()\"\n          />\n        </slot>\n      </div>\n    </template>\n\n    <template v-else #appendInner=\"slotScope\">\n      <div @mousedown.prevent=\"focus()\">\n        <slot name=\"increaseAction\" v-bind=\"{ ...slotScope, increaseCount }\">\n          <va-icon\n            class=\"va-counter__icon-increase\"\n            v-bind=\"increaseIconProps\"\n          />\n        </slot>\n      </div>\n    </template>\n\n    <template v-if=\"$slots.content\" #content=\"slotScope\">\n      <div ref=\"input\" tabindex=\"0\">\n        <slot name=\"content\" v-bind=\"{ ...slotScope, value: Number(valueComputed) }\" />\n      </div>\n    </template>\n\n    <input\n      v-if=\"!$slots.content\"\n      ref=\"input\"\n      class=\"va-input__content__input\"\n      type=\"number\"\n      inputmode=\"decimal\"\n      v-bind=\"{ ...inputAttributesComputed, ...inputListeners }\"\n      :value=\"valueComputed\"\n      @input=\"setCountInput\"\n      @change=\"setCountChange\"\n    >\n  </VaInputWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, InputHTMLAttributes, PropType, ComputedRef, shallowRef } from 'vue'\nimport omit from 'lodash/omit'\nimport pick from 'lodash/pick'\n\nimport {\n  useFormProps,\n  useEmitProxy,\n  useFocus, useFocusEmits,\n  useStateful, useStatefulProps,\n  useColors,\n} from '../../composables'\nimport { safeCSSLength } from '../../utils/css-utils'\n\nimport VaInputWrapper from '../va-input/components/VaInputWrapper.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport VaButton from '../va-button/VaButton.vue'\n\nconst { createEmits: createInputEmits, createListeners: createInputListeners } = useEmitProxy(\n  ['change'],\n)\n\nconst { createEmits: createFieldEmits, createListeners: createFieldListeners } = useEmitProxy([\n  { listen: 'click-prepend', emit: 'click:decrease-button' },\n  { listen: 'click-append', emit: 'click:increase-button' },\n  { listen: 'click-prepend-inner', emit: 'click:decrease-icon' },\n  { listen: 'click-append-inner', emit: 'click:increase-icon' },\n])\n\nexport default defineComponent({\n  name: 'VaCounter',\n\n  components: { VaInputWrapper, VaIcon, VaButton },\n\n  props: {\n    ...useFormProps,\n    ...useStatefulProps,\n    // input\n    modelValue: { type: [String, Number], default: 0 },\n    manualInput: { type: Boolean, default: false },\n    stateful: { type: Boolean, default: false },\n    min: { type: Number, default: undefined },\n    max: { type: Number, default: undefined },\n    step: { type: Number, default: 1 },\n    label: { type: String, default: '' },\n    // hint\n    messages: { type: [Array, String] as PropType<string[] | string>, default: () => [] },\n    // style\n    width: { type: [String, Number], default: '160px' },\n    color: { type: String, default: 'primary' },\n    outline: { type: Boolean },\n    bordered: { type: Boolean },\n    // icons & buttons\n    increaseIcon: { type: String, default: 'add' },\n    decreaseIcon: { type: String, default: 'remove' },\n    buttons: { type: Boolean, default: false },\n    flat: { type: Boolean, default: true },\n    rounded: { type: Boolean, default: false },\n    margins: { type: [String, Number], default: '4px' },\n    textColor: { type: String, default: undefined },\n  },\n\n  emits: [\n    'update:modelValue',\n    ...createInputEmits(),\n    ...createFieldEmits(),\n    ...useFocusEmits,\n  ],\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs }) {\n    const input = shallowRef<HTMLInputElement | HTMLDivElement>()\n\n    const {\n      isFocused,\n      focus,\n      blur,\n    } = useFocus(input, emit)\n\n    const { valueComputed } = useStateful(props, emit)\n\n    const setCountInput = ({ target }: Event) => {\n      valueComputed.value = Number((target as HTMLInputElement | null)?.value)\n    }\n\n    const setCountChange = ({ target } : Event) => {\n      calculateCounterValue(Number((target as HTMLInputElement | null)?.value))\n    }\n\n    const getRoundDownWithStep = (value: number) => {\n      if (!props.min || !props.step) { return value }\n\n      // If the user enters a value manually, then we must round it to the nearest valid value,\n      // taking into account the initial value (`props.min`) and the step size (`props.step`)\n      return props.min + props.step * Math.floor((value - props.min) / props.step)\n    }\n\n    const calculateCounterValue = (counterValue: number) => {\n      if (props.min && counterValue < props.min) {\n        valueComputed.value = props.min\n        return\n      }\n\n      if (props.max && (counterValue > props.max)) {\n        // since the `props.step` may not be a multiple of `(props.max - props.min)`,\n        // we must round the result taking into account the allowable value\n        valueComputed.value = getRoundDownWithStep(props.max)\n        return\n      }\n\n      valueComputed.value = getRoundDownWithStep(counterValue)\n    }\n\n    const isMinReached = computed(() => {\n      if (!props.min) { return false }\n      return Number(valueComputed.value) <= props.min\n    })\n\n    const isMaxReached = computed(() => {\n      if (!props.max) { return false }\n\n      return props.step\n        ? Number(valueComputed.value) > (props.max - props.step)\n        : Number(valueComputed.value) >= props.max\n    })\n\n    const tabIndexComputed = computed(() => props.disabled ? -1 : 0)\n\n    const isDecreaseActionDisabled = computed(() => (\n      isMinReached.value || props.readonly || props.disabled\n    ))\n\n    const isIncreaseActionDisabled = computed(() => (\n      isMaxReached.value || props.readonly || props.disabled\n    ))\n\n    const decreaseCount = () => {\n      if (isDecreaseActionDisabled.value) { return }\n      calculateCounterValue(Number(valueComputed.value) - props.step)\n    }\n\n    const increaseCount = () => {\n      if (isIncreaseActionDisabled.value) { return }\n      calculateCounterValue(Number(valueComputed.value) + props.step)\n    }\n\n    const { getColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n\n    const decreaseIconProps = computed(() => ({\n      class: { 'va-counter__icon--inactive': isDecreaseActionDisabled.value },\n      color: colorComputed.value,\n      name: props.decreaseIcon,\n      ...(!isDecreaseActionDisabled.value && { onClick: decreaseCount }),\n    }))\n\n    const increaseIconProps = computed(() => ({\n      class: { 'va-counter__icon--inactive': isIncreaseActionDisabled.value },\n      color: colorComputed.value,\n      name: props.increaseIcon,\n      ...(!isIncreaseActionDisabled.value && { onClick: increaseCount }),\n    }))\n\n    const isSquareCorners = computed(() => (\n      (typeof props.margins === 'string' ? parseFloat(props.margins) : props.margins) === 0\n    ))\n\n    const buttonProps = computed(() => ({\n      ...pick(props, ['rounded', 'color', 'textColor']),\n      flat: props.flat && !props.outline,\n      outline: props.flat && props.outline,\n    }))\n\n    const decreaseButtonProps = computed(() => ({\n      ...buttonProps.value,\n      icon: props.decreaseIcon,\n      disabled: isDecreaseActionDisabled.value,\n    }))\n\n    const increaseButtonProps = computed(() => ({\n      ...buttonProps.value,\n      icon: props.increaseIcon,\n      disabled: isIncreaseActionDisabled.value,\n    }))\n\n    const inputAttributesComputed = computed(() => ({\n      tabindex: tabIndexComputed.value,\n      ariaLabel: props.label || 'counter value',\n      ariaValuemin: props.min,\n      ariaValuemax: props.max,\n      ...omit(attrs, ['class', 'style']),\n      ...pick(props, ['disabled', 'min', 'max', 'step']),\n      readonly: props.readonly || !props.manualInput,\n    }) as InputHTMLAttributes)\n\n    const inputWrapperPropsComputed = computed(() => ({\n      ...pick(props, ['color', 'readonly', 'disabled', 'messages', 'label', 'bordered', 'outline']),\n    }))\n\n    const classComputed = computed(() => ([\n      attrs.class,\n      { 'va-counter--input-square': isSquareCorners.value },\n    ]))\n\n    const styleComputed: ComputedRef<Partial<CSSStyleDeclaration>> = computed(() => ({\n      width: safeCSSLength(props.width),\n      ...((attrs.style as Partial<CSSStyleDeclaration>) || {}),\n    }))\n\n    const marginComputed = computed(() => safeCSSLength(props.margins))\n\n    return {\n      input,\n      valueComputed,\n      isFocused,\n\n      fieldListeners: createFieldListeners(emit),\n      inputListeners: createInputListeners(emit),\n      inputAttributesComputed,\n      inputWrapperPropsComputed,\n      setCountInput,\n      setCountChange,\n\n      decreaseCount,\n      increaseCount,\n\n      decreaseIconProps,\n      increaseIconProps,\n      decreaseButtonProps,\n      increaseButtonProps,\n\n      colorComputed,\n      classComputed,\n      styleComputed,\n      marginComputed,\n\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-counter {\n  &.va-counter--input-square {\n    .va-input__container {\n      border-radius: 0;\n      border-left: none;\n      border-right: none;\n    }\n\n    .va-counter__prepend-wrapper {\n      .va-counter__button-decrease {\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n      }\n\n      .va-counter__button-decrease:not(.va-button--square) {\n        width: unset;\n\n        .va-button__content {\n          padding-right: var(--va-counter-button-padding--inner);\n          padding-left: var(--va-counter-button-padding--outer);\n        }\n      }\n    }\n\n    .va-counter__append-wrapper {\n      .va-counter__button-increase {\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n      }\n\n      .va-counter__button-increase:not(.va-button--square) {\n        width: unset;\n\n        .va-button__content {\n          padding-left: var(--va-counter-button-padding--inner);\n          padding-right: var(--va-counter-button-padding--outer);\n        }\n      }\n    }\n  }\n\n  &:not(.va-counter--input-square) {\n    .va-counter__prepend-wrapper,\n    .va-counter__append-wrapper {\n      .va-counter__button-decrease,\n      .va-counter__button-increase {\n        .va-button__content {\n          padding: unset;\n        }\n      }\n    }\n  }\n\n  .va-input__content__input {\n    text-align: center;\n\n    // Chrome, Safari, Edge, Opera\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    // Firefox\n    &[type=number] {\n      -moz-appearance: textfield;\n    }\n  }\n\n  .va-counter__icon--inactive {\n    cursor: inherit;\n    user-select: none;\n    opacity: 0.4;\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport _VaCounter from './VaCounter.vue'\n\nexport const VaCounter = withConfigTransport(_VaCounter)\n"],"names":["createEmits","createInputEmits","createListeners","createInputListeners","useEmitProxy","createFieldEmits","createFieldListeners","listen","emit","script","defineComponent","name","components","VaInputWrapper","VaIcon","VaButton","props","useFormProps","useStatefulProps","modelValue","type","String","Number","default","manualInput","Boolean","stateful","min","undefined","max","step","label","messages","Array","width","color","outline","bordered","increaseIcon","decreaseIcon","buttons","flat","rounded","margins","textColor","emits","useFocusEmits","inheritAttrs","setup","attrs","input","shallowRef","isFocused","focus","blur","useFocus","valueComputed","useStateful","getRoundDownWithStep","value","Math","floor","calculateCounterValue","counterValue","isMinReached","computed","isMaxReached","tabIndexComputed","disabled","isDecreaseActionDisabled","readonly","isIncreaseActionDisabled","decreaseCount","increaseCount","getColor","useColors","colorComputed","decreaseIconProps","class","onClick","increaseIconProps","isSquareCorners","parseFloat","buttonProps","pick","decreaseButtonProps","icon","increaseButtonProps","inputAttributesComputed","tabindex","ariaLabel","ariaValuemin","ariaValuemax","omit","inputWrapperPropsComputed","classComputed","styleComputed","safeCSSLength","style","marginComputed","fieldListeners","inputListeners","setCountInput","target","setCountChange","ref","_createBlock","_component_VaInputWrapper","_mergeProps","_ctx","focused","onKeydown","$slots","content","_openBlock","_createElementBlock","inputmode","onInput","args","onChange","$props","fn","_withCtx","slotScope","_createElementVNode","onMousedown","_renderSlot","_normalizeProps","_guardReactiveProps","_createVNode","_component_va_button","_component_va_icon","_hoisted_1","VaCounter","withConfigTransport","_VaCounter"],"mappings":"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"}
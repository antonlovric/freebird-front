{"version":3,"file":"VaInput.mjs","sources":["../../src/composables/useClearable.ts","../../src/composables/useFocusDeep.ts","../../src/composables/useCurrentElement.ts","../../src/components/va-input/hooks/useCleave.ts","../../src/components/va-input/components/VaTextarea/useTextareaRowHeight.ts","../../src/components/va-input/components/VaTextarea/VaTextarea.vue","../../src/components/va-input/components/VaTextarea/VaTextarea.vue?vue&type=template&id=150a9286&lang.js","../../src/components/va-input/VaInput.vue","../../src/components/va-input/VaInput.vue?vue&type=template&id=db73a230&lang.js"],"sourcesContent":["import { computed, Ref } from 'vue'\n\nimport { useFocus } from './useFocus'\n\ninterface ClearableProps {\n  clearable: boolean\n  clearableIcon: string\n  clearValue: any\n  disabled?: boolean\n  readonly?: boolean\n  success?: boolean\n  color?: string\n}\n\nexport const useClearableProps = {\n  clearable: { type: Boolean, default: false },\n  clearableIcon: { type: String, default: 'highlight_off' },\n  clearValue: { type: String, default: '' },\n}\n\nexport const useClearableEmits = ['clear']\n\nexport const useClearable = (\n  props: ClearableProps,\n  inputValue: Ref<any>,\n  el?: Ref<any>,\n  hasError?: Ref<boolean>,\n) => {\n  const { isFocused, onFocus, onBlur } = useFocus(el)\n\n  const clearedValues = [null, undefined, props.clearValue]\n\n  const canBeCleared = computed(() => (\n    props.clearable &&\n    !props.disabled &&\n    !props.readonly &&\n    !clearedValues.includes(inputValue.value)\n  ))\n\n  const clearIconColor = computed(() => {\n    if (isFocused?.value) { return props.color || 'primary' }\n    if (hasError?.value) { return 'danger' }\n    if (props.success) { return 'success' }\n\n    return 'secondary'\n  })\n\n  const clearIconProps = computed(() => ({\n    name: props.clearableIcon,\n    color: clearIconColor.value,\n    size: 'small',\n  }))\n\n  return {\n    canBeCleared,\n    clearIconColor,\n    clearIconProps,\n    onFocus,\n    onBlur,\n  }\n}\n","import { shallowRef, computed, Ref, onMounted } from 'vue'\nimport { useCaptureEvent } from './useCaptureEvent'\nimport { useCurrentElement } from './useCurrentElement'\n\nconst useActiveElement = () => {\n  const activeEl = shallowRef<HTMLElement>()\n\n  const updateActiveElement = () => {\n    activeEl.value = document.activeElement as HTMLElement\n  }\n\n  onMounted(updateActiveElement)\n\n  useCaptureEvent('focus', updateActiveElement)\n  useCaptureEvent('blur', updateActiveElement)\n\n  return activeEl\n}\n\nexport const useFocusDeep = (el?: Ref<HTMLElement | undefined>) => {\n  const focused = useActiveElement()\n  const current = useCurrentElement(el)\n  // Cache previouslyFocusedElement, so we can simply come back to it\n  let previouslyFocusedElement: HTMLElement | null = null\n\n  return computed<boolean | undefined>({\n    get () {\n      if (!focused.value) { return false }\n      if (focused.value === current.value) { return true }\n\n      const isFocused = current.value?.contains(focused.value)\n      if (isFocused) { previouslyFocusedElement = focused.value }\n      return isFocused\n    },\n    set (value) {\n      const target = previouslyFocusedElement ?? current.value\n      if (value) {\n        target?.focus()\n      } else {\n        target?.blur()\n      }\n    },\n  })\n}\n","import { onMounted, onBeforeUnmount, shallowRef, getCurrentInstance, onUpdated, Ref } from 'vue'\n\n/** Returns ref of current component instance element */\nexport const useCurrentElement = (el?: Ref<HTMLElement | undefined>) => {\n  if (el) { return el }\n  const vm = getCurrentInstance()!\n  const currentEl = shallowRef<HTMLElement>()\n  onMounted(() => { currentEl.value = vm.proxy!.$el ?? undefined })\n  onUpdated(() => { currentEl.value = vm.proxy!.$el ?? undefined })\n  onBeforeUnmount(() => { currentEl.value = vm.proxy!.$el ?? undefined })\n\n  return currentEl\n}\n","import { computed, onBeforeUnmount, onMounted, PropType, ref, Ref, watch } from 'vue'\nimport Cleave from 'cleave.js'\nimport { CleaveOptions } from 'cleave.js/options'\n\nconst DEFAULT_MASK_TOKENS: Record<string, Record<string, unknown>> = {\n  creditCard: {\n    creditCard: true,\n  },\n  date: {\n    date: true,\n    datePattern: ['d', 'm', 'Y'],\n  },\n  time: {\n    time: true,\n    timePattern: ['h', 'm'],\n    timeFormat: '24',\n  },\n  numeral: {\n    numeral: true,\n    numeralThousandsGroupStyle: 'thousand',\n  },\n}\n\nexport const useCleaveProps = {\n  mask: { type: [String, Object] as PropType<string | Record<string, number[]>>, default: '' },\n  returnRaw: { type: Boolean, default: true },\n  modelValue: { type: String },\n}\n\ntype Props = {\n  mask: string | Record<string, number[]>,\n  returnRaw: boolean,\n  modelValue: string | number,\n}\n\nexport const useCleave = (\n  element: Ref<HTMLInputElement | undefined>,\n  props: Props,\n  emit: (event: 'update:modelValue' | any, ...args: any[]) => any,\n) => {\n  const cleave = ref<Cleave>()\n\n  const getMask = (mask: CleaveOptions | string) => {\n    if (typeof mask === 'string') {\n      return DEFAULT_MASK_TOKENS[mask] ? { ...DEFAULT_MASK_TOKENS[mask] } : {}\n    }\n    return { ...mask }\n  }\n\n  const destroyCleave = () => {\n    if (cleave.value) { cleave.value.destroy() }\n  }\n\n  const initCleave = () => {\n    destroyCleave()\n\n    if (!element.value) { return }\n\n    cleave.value = new Cleave(element.value, getMask(props.mask))\n  }\n\n  onMounted(() => { initCleave() })\n  onBeforeUnmount(() => { destroyCleave() })\n\n  watch(() => [element.value, props.mask], () => { initCleave() })\n\n  const computedValue = computed<string | number>(() => {\n    if (cleave.value) {\n      if (props.returnRaw && props.modelValue === cleave.value.getRawValue()) {\n        return cleave.value.getFormattedValue()\n      }\n    }\n\n    return props.modelValue\n  })\n\n  const onInput = (event: Event) => {\n    const value = (event.target as HTMLInputElement).value\n\n    if (props.mask !== 'string' && !Object.keys(props.mask).length) {\n      emit('update:modelValue', value)\n      return\n    }\n\n    if (cleave.value) {\n      cleave.value.setRawValue(value)\n      if (props.returnRaw) {\n        emit('update:modelValue', cleave.value.getRawValue())\n        return\n      }\n    }\n\n    emit('update:modelValue', value)\n  }\n\n  return {\n    cleave,\n    computedValue,\n    onInput,\n  }\n}\n","import { Ref } from 'vue'\n\nconst HIDDEN_TEXTAREA_STYLE = `\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important';\n`\n\nconst SIZING_STYLE = [\n  'letter-spacing',\n  'line-height',\n  'padding-top',\n  'padding-bottom',\n  'font-family',\n  'font-weight',\n  'font-size',\n  'text-rendering',\n  'text-transform',\n  'width',\n  'text-indent',\n  'padding-left',\n  'padding-right',\n  'border-width',\n  'box-sizing',\n]\n\nconst getNodeHeightStyles = (node: HTMLElement) => {\n  const style = window.getComputedStyle(node)\n\n  return {\n    boxSizing:\n      style.getPropertyValue('box-sizing') ||\n      style.getPropertyValue('-moz-box-sizing') ||\n      style.getPropertyValue('-webkit-box-sizing'),\n    padding:\n      parseFloat(style.getPropertyValue('padding-bottom')) +\n      parseFloat(style.getPropertyValue('padding-top')),\n    border:\n      parseFloat(style.getPropertyValue('border-bottom-width')) +\n      parseFloat(style.getPropertyValue('border-top-width')),\n    styles:\n      SIZING_STYLE.map(name => `${name}:${style.getPropertyValue(name)}`).join(';') + ';',\n    lineHeight:\n      parseInt(style.getPropertyValue('line-height')),\n  }\n}\n\nlet textarea: null | HTMLTextAreaElement = null\n\nconst createHiddenTextarea = (original: HTMLTextAreaElement, styles: string) => {\n  if (!textarea) {\n    textarea = document.createElement('textarea')\n  }\n\n  textarea.setAttribute('style', styles + HIDDEN_TEXTAREA_STYLE)\n  textarea.value = original.value || original.placeholder || ''\n  const wrap = original.getAttribute('wrap')\n\n  if (wrap !== null) {\n    textarea.setAttribute('wrap', wrap)\n  } else {\n    textarea.removeAttribute('wrap')\n  }\n\n  return textarea\n}\n\nexport const useTextareaRowHeight = (textarea: Ref<HTMLTextAreaElement | undefined>) => {\n  const calculateRowHeight = () => {\n    if (!textarea.value) { return 0 }\n\n    return getNodeHeightStyles(textarea.value).lineHeight\n  }\n\n  const calculateHeight = () => {\n    if (!textarea.value) { return 0 }\n\n    const { boxSizing, padding, border, styles } = getNodeHeightStyles(textarea.value)\n    const hiddenTextarea = createHiddenTextarea(textarea.value, styles)\n    document.body.appendChild(hiddenTextarea)\n    let height = hiddenTextarea.scrollHeight\n\n    if (boxSizing === 'border-box') {\n      height += border\n    } else if (boxSizing === 'content-box') {\n      height -= padding\n    }\n\n    document.body.removeChild(hiddenTextarea)\n\n    return height\n  }\n\n  return {\n    calculateRowHeight,\n    calculateHeight,\n  }\n}\n","<template>\n  <textarea\n    ref=\"textarea\"\n    class=\"textarea\"\n    :style=\"computedStyle\"\n    v-bind=\"{ ...computedProps, ...listeners }\"\n    :value=\"modelValue\"\n  />\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, onMounted, ref, watch, nextTick, CSSProperties, shallowRef } from 'vue'\nimport pick from 'lodash/pick.js'\n\nimport { useFormProps, useEmitProxy } from '../../../../composables'\nimport { useTextareaRowHeight } from './useTextareaRowHeight'\n\nconst positiveNumberValidator = (val: number) => {\n  if (val > 0 && (val | 0) === val) {\n    return true\n  }\n  throw new Error(`\\`minRows|maxRows\\` must be a positive integer greater than 0, but ${val} is provided`)\n}\n\nconst { createEmits, createListeners } = useEmitProxy([\n  'input', 'change', 'click', 'update:modelValue',\n])\n\nexport default defineComponent({\n  name: 'VaTextarea',\n\n  props: {\n    ...useFormProps,\n    modelValue: { type: [String, Number], default: '' },\n    placeholder: { type: String },\n    autosize: { type: Boolean, default: false },\n    minRows: {\n      type: Number,\n      default: 1,\n      validator: positiveNumberValidator,\n    },\n    maxRows: {\n      type: Number,\n      validator: positiveNumberValidator,\n    },\n  },\n\n  emits: createEmits(),\n\n  setup (props, { emit }) {\n    const textarea = shallowRef<HTMLTextAreaElement>()\n\n    const rowHeight = ref(-1)\n    const height = ref(-1)\n    const { calculateRowHeight, calculateHeight } = useTextareaRowHeight(textarea)\n\n    const isResizable = computed(() => {\n      return Boolean((props.autosize || props.maxRows || props.minRows !== 1) && textarea.value)\n    })\n\n    const updateRowHeight = () => {\n      if (isResizable.value) {\n        rowHeight.value = calculateRowHeight()\n      }\n    }\n\n    const updateHeight = () => {\n      if (isResizable.value) {\n        height.value = calculateHeight()\n      }\n    }\n\n    onMounted(() => {\n      updateRowHeight()\n      updateHeight()\n    })\n\n    watch(() => props.modelValue, () => {\n      nextTick(updateHeight)\n    })\n\n    const computedStyle = computed(() => ({\n      minHeight: rowHeight.value * props.minRows + 'px',\n      maxHeight: props.maxRows ? (rowHeight.value * props.maxRows + 'px') : undefined,\n      height: height.value + 'px',\n      resize: isResizable.value ? undefined : 'none',\n    }) as CSSProperties)\n\n    const computedProps = computed(() => ({\n      ...pick(props, ['disabled', 'readonly', 'placeholder', 'ariaLabel']),\n    }))\n\n    const focus = () => {\n      textarea.value?.focus()\n    }\n\n    const blur = () => {\n      textarea.value?.blur()\n    }\n\n    return {\n      textarea,\n      computedStyle,\n      listeners: createListeners(emit),\n      computedProps,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.textarea {\n  padding: 0;\n  border: 0;\n  font-family: var(--va-font-family);\n}\n</style>\n","<template>\n  <textarea\n    ref=\"textarea\"\n    class=\"textarea\"\n    :style=\"computedStyle\"\n    v-bind=\"{ ...computedProps, ...listeners }\"\n    :value=\"modelValue\"\n  />\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, onMounted, ref, watch, nextTick, CSSProperties, shallowRef } from 'vue'\nimport pick from 'lodash/pick.js'\n\nimport { useFormProps, useEmitProxy } from '../../../../composables'\nimport { useTextareaRowHeight } from './useTextareaRowHeight'\n\nconst positiveNumberValidator = (val: number) => {\n  if (val > 0 && (val | 0) === val) {\n    return true\n  }\n  throw new Error(`\\`minRows|maxRows\\` must be a positive integer greater than 0, but ${val} is provided`)\n}\n\nconst { createEmits, createListeners } = useEmitProxy([\n  'input', 'change', 'click', 'update:modelValue',\n])\n\nexport default defineComponent({\n  name: 'VaTextarea',\n\n  props: {\n    ...useFormProps,\n    modelValue: { type: [String, Number], default: '' },\n    placeholder: { type: String },\n    autosize: { type: Boolean, default: false },\n    minRows: {\n      type: Number,\n      default: 1,\n      validator: positiveNumberValidator,\n    },\n    maxRows: {\n      type: Number,\n      validator: positiveNumberValidator,\n    },\n  },\n\n  emits: createEmits(),\n\n  setup (props, { emit }) {\n    const textarea = shallowRef<HTMLTextAreaElement>()\n\n    const rowHeight = ref(-1)\n    const height = ref(-1)\n    const { calculateRowHeight, calculateHeight } = useTextareaRowHeight(textarea)\n\n    const isResizable = computed(() => {\n      return Boolean((props.autosize || props.maxRows || props.minRows !== 1) && textarea.value)\n    })\n\n    const updateRowHeight = () => {\n      if (isResizable.value) {\n        rowHeight.value = calculateRowHeight()\n      }\n    }\n\n    const updateHeight = () => {\n      if (isResizable.value) {\n        height.value = calculateHeight()\n      }\n    }\n\n    onMounted(() => {\n      updateRowHeight()\n      updateHeight()\n    })\n\n    watch(() => props.modelValue, () => {\n      nextTick(updateHeight)\n    })\n\n    const computedStyle = computed(() => ({\n      minHeight: rowHeight.value * props.minRows + 'px',\n      maxHeight: props.maxRows ? (rowHeight.value * props.maxRows + 'px') : undefined,\n      height: height.value + 'px',\n      resize: isResizable.value ? undefined : 'none',\n    }) as CSSProperties)\n\n    const computedProps = computed(() => ({\n      ...pick(props, ['disabled', 'readonly', 'placeholder', 'ariaLabel']),\n    }))\n\n    const focus = () => {\n      textarea.value?.focus()\n    }\n\n    const blur = () => {\n      textarea.value?.blur()\n    }\n\n    return {\n      textarea,\n      computedStyle,\n      listeners: createListeners(emit),\n      computedProps,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.textarea {\n  padding: 0;\n  border: 0;\n  font-family: var(--va-font-family);\n}\n</style>\n","<template>\n  <VaInputWrapper\n    v-bind=\"fieldListeners\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    :color=\"$props.color\"\n    :readonly=\"$props.readonly\"\n    :disabled=\"$props.disabled\"\n    :success=\"$props.success\"\n    :messages=\"$props.messages\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"errorCount\"\n    :label=\"$props.label\"\n    :bordered=\"$props.bordered\"\n    :outline=\"$props.outline\"\n    :requiredMark=\"$props.requiredMark\"\n    :focused=\"isFocused\"\n    :counter-value=\"valueLengthComputed\"\n    :max-length=\"$props.maxLength\"\n    @click=\"focus\"\n  >\n    <!-- Simply proxy slots to VaInputWrapper -->\n    <template\n      v-for=\"name in filterSlots\"\n      :key=\"name\"\n      v-slot:[name]=\"slotScope\"\n    >\n      <slot :name=\"name\" v-bind=\"slotScope\" />\n    </template>\n\n    <template #icon=\"slotScope\">\n      <va-icon\n        v-if=\"canBeCleared\"\n        role=\"button\"\n        aria-hidden=\"false\"\n        aria-label=\"reset\"\n        class=\"va-input__icons__reset\"\n        :tabindex=\"tabIndexComputed\"\n        v-bind=\"clearIconProps\"\n        @click.stop=\"reset\"\n        @keydown.enter.stop=\"reset\"\n        @keydown.space.stop=\"reset\"\n      />\n      <va-icon\n        v-if=\"$props.loading\"\n        :color=\"$props.color\"\n        size=\"small\"\n        name=\"loop\"\n        spin=\"counter-clockwise\"\n      />\n      <slot name=\"icon\" v-bind=\"slotScope\" />\n    </template>\n\n    <VaTextarea\n      v-if=\"type === 'textarea' && !$slots.content\"\n      ref=\"input\"\n      v-bind=\"{ ...computedChildAttributes, ...textareaProps, ...inputEvents }\"\n      class=\"va-input__content__input\"\n    />\n\n    <input\n      v-else-if=\"!$slots.content\"\n      ref=\"input\"\n      class=\"va-input__content__input\"\n      v-bind=\"{ ...computedInputAttributes, ...inputEvents }\"\n      :value=\"computedValue\"\n    >\n  </VaInputWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, InputHTMLAttributes, shallowRef, toRefs } from 'vue'\nimport omit from 'lodash/omit.js'\nimport pick from 'lodash/pick.js'\n\nimport { extractComponentProps, filterComponentProps } from '../../utils/child-props'\n\nimport {\n  useFormProps,\n  useValidation, useValidationProps, useValidationEmits, ValidationProps,\n  useEmitProxy,\n  useClearable, useClearableProps, useClearableEmits,\n  useFocusDeep,\n} from '../../composables'\nimport { useCleave, useCleaveProps } from './hooks/useCleave'\n\nimport type { AnyStringPropType } from '../../types/prop-type'\n\nimport VaInputWrapper from './components/VaInputWrapper.vue'\nimport VaTextarea from './components/VaTextarea/VaTextarea.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\n\nconst VaTextareaProps = extractComponentProps(VaTextarea)\n\nconst { createEmits: createInputEmits, createListeners: createInputListeners } = useEmitProxy(\n  ['change', 'keyup', 'keypress', 'keydown', 'focus', 'blur'],\n)\n\nconst { createEmits: createFieldEmits, createListeners: createFieldListeners } = useEmitProxy([\n  'click',\n  'click-prepend',\n  'click-append',\n  'click-prepend-inner',\n  'click-append-inner',\n])\n\nexport default defineComponent({\n  name: 'VaInput',\n\n  components: { VaInputWrapper, VaTextarea, VaIcon },\n\n  props: {\n    ...useFormProps,\n    ...useValidationProps as ValidationProps<string>,\n    ...useClearableProps,\n    ...useCleaveProps,\n    ...VaTextareaProps,\n\n    // input\n    placeholder: { type: String, default: '' },\n    tabindex: { type: Number, default: 0 },\n    modelValue: { type: [String, Number], default: '' },\n    label: { type: String, default: '' },\n    type: { type: String as AnyStringPropType<'textarea' | 'text' | 'password'>, default: 'text' },\n    loading: { type: Boolean, default: false },\n    inputClass: { type: String, default: '' },\n    pattern: { type: String },\n    inputmode: { type: String, default: 'text' },\n    ariaLabel: { type: String, default: undefined },\n    counter: { type: Boolean, default: false },\n    maxLength: { type: Number, default: undefined },\n\n    // style\n    color: { type: String, default: 'primary' },\n    outline: { type: Boolean, default: false },\n    bordered: { type: Boolean, default: false },\n    requiredMark: { type: Boolean, default: false },\n  },\n\n  emits: [\n    'update:modelValue',\n    ...useValidationEmits,\n    ...useClearableEmits,\n    ...createInputEmits(),\n    ...createFieldEmits(),\n  ],\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs, slots }) {\n    const input = shallowRef<HTMLInputElement | typeof VaTextarea>()\n\n    const isFocused = useFocusDeep()\n\n    const reset = () => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n    }\n\n    const focus = () => {\n      input.value?.focus()\n    }\n\n    const blur = () => {\n      input.value?.blur()\n    }\n\n    const filterSlots = computed(() => {\n      const iconSlot = ['icon']\n      return Object.keys(slots).filter(slot => !iconSlot.includes(slot))\n    })\n\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners: validationListeners,\n    } = useValidation(props, emit, reset, focus)\n\n    const { modelValue } = toRefs(props)\n    const {\n      canBeCleared,\n      clearIconProps,\n    } = useClearable(props, modelValue, input, computedError)\n\n    /** Use cleave only if this component is input, because it will break. */\n    const computedCleaveTarget = computed(() => props.type === 'textarea'\n      ? undefined\n      : input.value as HTMLInputElement | undefined)\n\n    const { computedValue, onInput } = useCleave(computedCleaveTarget, props, emit)\n\n    const inputListeners = createInputListeners(emit)\n\n    /** Combine EmitProxy events with validation events to avoid events overriding */\n    const onFocus = (e: Event) => {\n      inputListeners.onFocus(e)\n      validationListeners.onFocus()\n    }\n\n    const onBlur = (e: Event) => {\n      inputListeners.onBlur(e)\n      validationListeners.onBlur()\n    }\n\n    const inputEvents = {\n      ...inputListeners,\n      onFocus,\n      onBlur,\n      onInput,\n    }\n\n    const tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex)\n\n    const computedChildAttributes = computed(() => ({\n      ariaLabel: props.ariaLabel || props.label,\n      ariaRequired: props.requiredMark,\n      ariaDisabled: props.disabled,\n      ariaReadOnly: props.readonly,\n      'aria-invalid': !!computedErrorMessages.value.length,\n      'aria-errormessage': typeof computedErrorMessages.value === 'string'\n        ? computedErrorMessages.value\n        : computedErrorMessages.value.join(', '),\n      tabindex: tabIndexComputed.value,\n      class: props.inputClass,\n      ...omit(attrs, ['class', 'style']),\n    }) as InputHTMLAttributes)\n\n    const computedInputAttributes = computed(() => ({\n      ...computedChildAttributes.value,\n      ...pick(props, ['type', 'disabled', 'readonly', 'placeholder', 'pattern', 'inputmode']),\n    }) as InputHTMLAttributes)\n\n    const valueLengthComputed = computed(() =>\n      props.counter && typeof computedValue.value === 'string' ? computedValue.value.length : undefined,\n    )\n\n    return {\n      input,\n      inputEvents,\n\n      valueLengthComputed,\n      computedChildAttributes,\n      computedInputAttributes,\n      textareaProps: filterComponentProps(props, VaTextareaProps),\n      computedValue,\n      tabIndexComputed,\n\n      // Validations\n      computedError,\n      computedErrorMessages,\n      isFocused,\n\n      // Icon\n      canBeCleared,\n      clearIconProps,\n\n      fieldListeners: createFieldListeners(emit),\n      filterSlots,\n      reset,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n","<template>\n  <VaInputWrapper\n    v-bind=\"fieldListeners\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    :color=\"$props.color\"\n    :readonly=\"$props.readonly\"\n    :disabled=\"$props.disabled\"\n    :success=\"$props.success\"\n    :messages=\"$props.messages\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"errorCount\"\n    :label=\"$props.label\"\n    :bordered=\"$props.bordered\"\n    :outline=\"$props.outline\"\n    :requiredMark=\"$props.requiredMark\"\n    :focused=\"isFocused\"\n    :counter-value=\"valueLengthComputed\"\n    :max-length=\"$props.maxLength\"\n    @click=\"focus\"\n  >\n    <!-- Simply proxy slots to VaInputWrapper -->\n    <template\n      v-for=\"name in filterSlots\"\n      :key=\"name\"\n      v-slot:[name]=\"slotScope\"\n    >\n      <slot :name=\"name\" v-bind=\"slotScope\" />\n    </template>\n\n    <template #icon=\"slotScope\">\n      <va-icon\n        v-if=\"canBeCleared\"\n        role=\"button\"\n        aria-hidden=\"false\"\n        aria-label=\"reset\"\n        class=\"va-input__icons__reset\"\n        :tabindex=\"tabIndexComputed\"\n        v-bind=\"clearIconProps\"\n        @click.stop=\"reset\"\n        @keydown.enter.stop=\"reset\"\n        @keydown.space.stop=\"reset\"\n      />\n      <va-icon\n        v-if=\"$props.loading\"\n        :color=\"$props.color\"\n        size=\"small\"\n        name=\"loop\"\n        spin=\"counter-clockwise\"\n      />\n      <slot name=\"icon\" v-bind=\"slotScope\" />\n    </template>\n\n    <VaTextarea\n      v-if=\"type === 'textarea' && !$slots.content\"\n      ref=\"input\"\n      v-bind=\"{ ...computedChildAttributes, ...textareaProps, ...inputEvents }\"\n      class=\"va-input__content__input\"\n    />\n\n    <input\n      v-else-if=\"!$slots.content\"\n      ref=\"input\"\n      class=\"va-input__content__input\"\n      v-bind=\"{ ...computedInputAttributes, ...inputEvents }\"\n      :value=\"computedValue\"\n    >\n  </VaInputWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, InputHTMLAttributes, shallowRef, toRefs } from 'vue'\nimport omit from 'lodash/omit.js'\nimport pick from 'lodash/pick.js'\n\nimport { extractComponentProps, filterComponentProps } from '../../utils/child-props'\n\nimport {\n  useFormProps,\n  useValidation, useValidationProps, useValidationEmits, ValidationProps,\n  useEmitProxy,\n  useClearable, useClearableProps, useClearableEmits,\n  useFocusDeep,\n} from '../../composables'\nimport { useCleave, useCleaveProps } from './hooks/useCleave'\n\nimport type { AnyStringPropType } from '../../types/prop-type'\n\nimport VaInputWrapper from './components/VaInputWrapper.vue'\nimport VaTextarea from './components/VaTextarea/VaTextarea.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\n\nconst VaTextareaProps = extractComponentProps(VaTextarea)\n\nconst { createEmits: createInputEmits, createListeners: createInputListeners } = useEmitProxy(\n  ['change', 'keyup', 'keypress', 'keydown', 'focus', 'blur'],\n)\n\nconst { createEmits: createFieldEmits, createListeners: createFieldListeners } = useEmitProxy([\n  'click',\n  'click-prepend',\n  'click-append',\n  'click-prepend-inner',\n  'click-append-inner',\n])\n\nexport default defineComponent({\n  name: 'VaInput',\n\n  components: { VaInputWrapper, VaTextarea, VaIcon },\n\n  props: {\n    ...useFormProps,\n    ...useValidationProps as ValidationProps<string>,\n    ...useClearableProps,\n    ...useCleaveProps,\n    ...VaTextareaProps,\n\n    // input\n    placeholder: { type: String, default: '' },\n    tabindex: { type: Number, default: 0 },\n    modelValue: { type: [String, Number], default: '' },\n    label: { type: String, default: '' },\n    type: { type: String as AnyStringPropType<'textarea' | 'text' | 'password'>, default: 'text' },\n    loading: { type: Boolean, default: false },\n    inputClass: { type: String, default: '' },\n    pattern: { type: String },\n    inputmode: { type: String, default: 'text' },\n    ariaLabel: { type: String, default: undefined },\n    counter: { type: Boolean, default: false },\n    maxLength: { type: Number, default: undefined },\n\n    // style\n    color: { type: String, default: 'primary' },\n    outline: { type: Boolean, default: false },\n    bordered: { type: Boolean, default: false },\n    requiredMark: { type: Boolean, default: false },\n  },\n\n  emits: [\n    'update:modelValue',\n    ...useValidationEmits,\n    ...useClearableEmits,\n    ...createInputEmits(),\n    ...createFieldEmits(),\n  ],\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs, slots }) {\n    const input = shallowRef<HTMLInputElement | typeof VaTextarea>()\n\n    const isFocused = useFocusDeep()\n\n    const reset = () => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n    }\n\n    const focus = () => {\n      input.value?.focus()\n    }\n\n    const blur = () => {\n      input.value?.blur()\n    }\n\n    const filterSlots = computed(() => {\n      const iconSlot = ['icon']\n      return Object.keys(slots).filter(slot => !iconSlot.includes(slot))\n    })\n\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners: validationListeners,\n    } = useValidation(props, emit, reset, focus)\n\n    const { modelValue } = toRefs(props)\n    const {\n      canBeCleared,\n      clearIconProps,\n    } = useClearable(props, modelValue, input, computedError)\n\n    /** Use cleave only if this component is input, because it will break. */\n    const computedCleaveTarget = computed(() => props.type === 'textarea'\n      ? undefined\n      : input.value as HTMLInputElement | undefined)\n\n    const { computedValue, onInput } = useCleave(computedCleaveTarget, props, emit)\n\n    const inputListeners = createInputListeners(emit)\n\n    /** Combine EmitProxy events with validation events to avoid events overriding */\n    const onFocus = (e: Event) => {\n      inputListeners.onFocus(e)\n      validationListeners.onFocus()\n    }\n\n    const onBlur = (e: Event) => {\n      inputListeners.onBlur(e)\n      validationListeners.onBlur()\n    }\n\n    const inputEvents = {\n      ...inputListeners,\n      onFocus,\n      onBlur,\n      onInput,\n    }\n\n    const tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex)\n\n    const computedChildAttributes = computed(() => ({\n      ariaLabel: props.ariaLabel || props.label,\n      ariaRequired: props.requiredMark,\n      ariaDisabled: props.disabled,\n      ariaReadOnly: props.readonly,\n      'aria-invalid': !!computedErrorMessages.value.length,\n      'aria-errormessage': typeof computedErrorMessages.value === 'string'\n        ? computedErrorMessages.value\n        : computedErrorMessages.value.join(', '),\n      tabindex: tabIndexComputed.value,\n      class: props.inputClass,\n      ...omit(attrs, ['class', 'style']),\n    }) as InputHTMLAttributes)\n\n    const computedInputAttributes = computed(() => ({\n      ...computedChildAttributes.value,\n      ...pick(props, ['type', 'disabled', 'readonly', 'placeholder', 'pattern', 'inputmode']),\n    }) as InputHTMLAttributes)\n\n    const valueLengthComputed = computed(() =>\n      props.counter && typeof computedValue.value === 'string' ? computedValue.value.length : undefined,\n    )\n\n    return {\n      input,\n      inputEvents,\n\n      valueLengthComputed,\n      computedChildAttributes,\n      computedInputAttributes,\n      textareaProps: filterComponentProps(props, VaTextareaProps),\n      computedValue,\n      tabIndexComputed,\n\n      // Validations\n      computedError,\n      computedErrorMessages,\n      isFocused,\n\n      // Icon\n      canBeCleared,\n      clearIconProps,\n\n      fieldListeners: createFieldListeners(emit),\n      filterSlots,\n      reset,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n"],"names":["useClearableProps","clearable","type","Boolean","default","clearableIcon","String","clearValue","useClearableEmits","useClearable","props","inputValue","el","hasError","isFocused","onFocus","onBlur","useFocus","clearedValues","undefined","canBeCleared","computed","disabled","readonly","includes","value","clearIconColor","color","success","clearIconProps","name","size","useFocusDeep","focused","activeEl","shallowRef","updateActiveElement","document","activeElement","onMounted","useCaptureEvent","useActiveElement","current","vm","getCurrentInstance","currentEl","_a","proxy","$el","onUpdated","onBeforeUnmount","useCurrentElement","previouslyFocusedElement","get","contains","set","target","focus","blur","DEFAULT_MASK_TOKENS","creditCard","date","datePattern","time","timePattern","timeFormat","numeral","numeralThousandsGroupStyle","useCleaveProps","mask","Object","returnRaw","modelValue","useCleave","element","emit","cleave","ref","destroyCleave","destroy","initCleave","Cleave","watch","computedValue","getRawValue","getFormattedValue","onInput","event","keys","length","setRawValue","SIZING_STYLE","getNodeHeightStyles","node","style","window","getComputedStyle","boxSizing","getPropertyValue","padding","parseFloat","border","styles","map","join","lineHeight","parseInt","textarea","createHiddenTextarea","original","createElement","setAttribute","placeholder","wrap","getAttribute","removeAttribute","positiveNumberValidator","val","Error","createEmits","createListeners","useEmitProxy","script$1","defineComponent","useFormProps","Number","autosize","minRows","validator","maxRows","emits","setup","rowHeight","height","calculateRowHeight","calculateHeight","hiddenTextarea","body","appendChild","scrollHeight","removeChild","useTextareaRowHeight","isResizable","updateHeight","nextTick","computedStyle","minHeight","maxHeight","resize","computedProps","pick","listeners","_openBlock","_createElementBlock","_mergeProps","class","_ctx","_hoisted_1","VaTextareaProps","extractComponentProps","VaTextarea","createInputEmits","createInputListeners","createFieldEmits","createFieldListeners","script","components","VaInputWrapper","VaIcon","useValidationProps","tabindex","label","loading","inputClass","pattern","inputmode","ariaLabel","counter","maxLength","outline","bordered","requiredMark","useValidationEmits","inheritAttrs","attrs","slots","input","reset","filterSlots","iconSlot","filter","slot","computedError","computedErrorMessages","validationListeners","useValidation","toRefs","computedCleaveTarget","inputListeners","inputEvents","e","tabIndexComputed","computedChildAttributes","ariaRequired","ariaDisabled","ariaReadOnly","omit","computedInputAttributes","valueLengthComputed","textareaProps","filterComponentProps","fieldListeners","_createBlock","_component_VaInputWrapper","$attrs","$props","messages","error","errorCount","onClick","icon","_withCtx","slotScope","_component_va_icon","role","onKeydown","spin","_renderSlot","$slots","content","_component_VaTextarea","_renderList","fn","_normalizeProps","_guardReactiveProps"],"mappings":"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"}
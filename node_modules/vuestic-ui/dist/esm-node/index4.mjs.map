{"version":3,"file":"index4.mjs","sources":["../../src/composables/useScroll.ts","../../src/components/va-app-bar/VaAppBar.vue","../../src/components/va-app-bar/VaAppBar.vue?vue&type=template&id=07072507&lang.js","../../src/components/va-app-bar/index.ts"],"sourcesContent":["import { onMounted, onBeforeUnmount, shallowRef } from 'vue'\n\n/** @deprecated */\nfunction getTargetElement (target: HTMLElement | string | undefined) {\n  if (!target) {\n    throw new Error('Cant find target')\n  }\n\n  return typeof target === 'string' ? document.querySelector(target) as HTMLElement : target\n}\n\nexport function setupScroll (target: HTMLElement | string, onScrollCallback: (e: Event) => void) {\n  const scrollRoot = shallowRef<HTMLElement>()\n  let targetElement: HTMLElement | null\n\n  onMounted(() => {\n    targetElement = getTargetElement(target || scrollRoot.value)\n    targetElement?.addEventListener('scroll', onScrollCallback)\n  })\n\n  onBeforeUnmount(() => {\n    targetElement?.removeEventListener('scroll', onScrollCallback)\n  })\n\n  return scrollRoot\n}\n","<template>\n  <header\n    ref=\"scrollRoot\"\n    role=\"toolbar\"\n    :class=\"computedClass\"\n    :style=\"computedStyle\"\n  >\n    <slot />\n  </header>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed, ref } from 'vue'\n\nimport { setupScroll, useColors } from '../../composables'\nimport { getGradientBackground, getBoxShadowColor } from '../../services/color-config/color-functions'\n\nexport default defineComponent({\n  name: 'VaAppBar',\n  props: {\n    gradient: { type: Boolean, default: false },\n    bottom: { type: Boolean, default: false },\n    target: { type: [Object, String] as PropType<string | HTMLElement>, default: '' },\n    hideOnScroll: { type: Boolean, default: false },\n    shadowOnScroll: { type: Boolean, default: false },\n    shadowColor: { type: String, default: '' },\n    color: { type: String, default: undefined },\n    absolute: { type: Boolean, default: false },\n  },\n  setup (props) {\n    const prevScrollPosition = ref(0)\n    const doShowShadow = ref(false)\n    const isHidden = ref(false)\n\n    const scrollRoot = setupScroll(props.target, (e) => {\n      const target = e.target as HTMLElement\n\n      if (prevScrollPosition.value < target.scrollTop) {\n        // Scroll down\n        isHidden.value = !!props.hideOnScroll\n        doShowShadow.value = !!props.shadowOnScroll\n      } else {\n        // Scroll up\n        isHidden.value = false\n        doShowShadow.value = false\n      }\n\n      prevScrollPosition.value = target.scrollTop\n    })\n\n    const { getColor } = useColors()\n\n    const colorComputed = computed(() => getColor(props.color, 'primary'))\n\n    const shadowColorComputed = computed(() => getColor(props.shadowColor, colorComputed.value))\n\n    const computedShadow = computed(() => {\n      const shadow = getBoxShadowColor(props.shadowColor ? shadowColorComputed.value : colorComputed.value)\n      return doShowShadow.value ? `var(--va-app-bar-shadow) ${shadow}` : ''\n    })\n\n    const transformComputed = computed(() => {\n      if (!isHidden.value) { return '' }\n      return props.bottom ? 'translateY(100%)' : 'translateY(-100%)'\n    })\n\n    const computedStyle = computed(() => ({\n      background: props.gradient ? getGradientBackground(colorComputed.value) : colorComputed.value,\n      'box-shadow': computedShadow.value,\n      transform: transformComputed.value,\n      position: props.absolute ? 'absolute' as const : undefined,\n    }))\n\n    const computedClass = computed(() => ({\n      'va-app-bar': true,\n      'va-app-bar--bottom': props.bottom,\n    }))\n\n    return {\n      scrollRoot,\n      computedStyle,\n      computedClass,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-app-bar {\n  display: flex;\n  align-items: center;\n  position: var(--va-app-bar-position);\n  transition: all 0.5s ease;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: var(--va-app-bar-height);\n  min-height: var(--va-app-bar-height);\n  min-width: 100%;\n  font-family: var(--va-font-family);\n  z-index: var(--va-app-bar-z-index);\n\n  &--bottom {\n    top: 100%;\n    transform: translateY(-100%);\n  }\n}\n</style>\n","<template>\n  <header\n    ref=\"scrollRoot\"\n    role=\"toolbar\"\n    :class=\"computedClass\"\n    :style=\"computedStyle\"\n  >\n    <slot />\n  </header>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed, ref } from 'vue'\n\nimport { setupScroll, useColors } from '../../composables'\nimport { getGradientBackground, getBoxShadowColor } from '../../services/color-config/color-functions'\n\nexport default defineComponent({\n  name: 'VaAppBar',\n  props: {\n    gradient: { type: Boolean, default: false },\n    bottom: { type: Boolean, default: false },\n    target: { type: [Object, String] as PropType<string | HTMLElement>, default: '' },\n    hideOnScroll: { type: Boolean, default: false },\n    shadowOnScroll: { type: Boolean, default: false },\n    shadowColor: { type: String, default: '' },\n    color: { type: String, default: undefined },\n    absolute: { type: Boolean, default: false },\n  },\n  setup (props) {\n    const prevScrollPosition = ref(0)\n    const doShowShadow = ref(false)\n    const isHidden = ref(false)\n\n    const scrollRoot = setupScroll(props.target, (e) => {\n      const target = e.target as HTMLElement\n\n      if (prevScrollPosition.value < target.scrollTop) {\n        // Scroll down\n        isHidden.value = !!props.hideOnScroll\n        doShowShadow.value = !!props.shadowOnScroll\n      } else {\n        // Scroll up\n        isHidden.value = false\n        doShowShadow.value = false\n      }\n\n      prevScrollPosition.value = target.scrollTop\n    })\n\n    const { getColor } = useColors()\n\n    const colorComputed = computed(() => getColor(props.color, 'primary'))\n\n    const shadowColorComputed = computed(() => getColor(props.shadowColor, colorComputed.value))\n\n    const computedShadow = computed(() => {\n      const shadow = getBoxShadowColor(props.shadowColor ? shadowColorComputed.value : colorComputed.value)\n      return doShowShadow.value ? `var(--va-app-bar-shadow) ${shadow}` : ''\n    })\n\n    const transformComputed = computed(() => {\n      if (!isHidden.value) { return '' }\n      return props.bottom ? 'translateY(100%)' : 'translateY(-100%)'\n    })\n\n    const computedStyle = computed(() => ({\n      background: props.gradient ? getGradientBackground(colorComputed.value) : colorComputed.value,\n      'box-shadow': computedShadow.value,\n      transform: transformComputed.value,\n      position: props.absolute ? 'absolute' as const : undefined,\n    }))\n\n    const computedClass = computed(() => ({\n      'va-app-bar': true,\n      'va-app-bar--bottom': props.bottom,\n    }))\n\n    return {\n      scrollRoot,\n      computedStyle,\n      computedClass,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-app-bar {\n  display: flex;\n  align-items: center;\n  position: var(--va-app-bar-position);\n  transition: all 0.5s ease;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: var(--va-app-bar-height);\n  min-height: var(--va-app-bar-height);\n  min-width: 100%;\n  font-family: var(--va-font-family);\n  z-index: var(--va-app-bar-z-index);\n\n  &--bottom {\n    top: 100%;\n    transform: translateY(-100%);\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport _VaAppBar from './VaAppBar.vue'\n\nexport const VaAppBar = withConfigTransport(_VaAppBar)\n"],"names":["setupScroll","target","onScrollCallback","scrollRoot","shallowRef","targetElement","onMounted","getTargetElement","Error","document","querySelector","value","addEventListener","onBeforeUnmount","removeEventListener","script","defineComponent","name","props","gradient","type","Boolean","default","bottom","Object","String","hideOnScroll","shadowOnScroll","shadowColor","color","undefined","absolute","setup","prevScrollPosition","ref","doShowShadow","isHidden","e","scrollTop","getColor","useColors","colorComputed","computed","shadowColorComputed","computedShadow","shadow","getBoxShadowColor","transformComputed","computedStyle","background","getGradientBackground","transform","position","computedClass","_createElementBlock","role","class","_ctx","style","_renderSlot","$slots","VaAppBar","withConfigTransport","_VaAppBar"],"mappings":"8fAWgB,SAAAA,YAAaC,EAA8BC,GACzD,MAAMC,EAAaC,IACnB,IAAIC,EAWJ,OATAC,GAAU,KACRD,EAbJ,SAASE,iBAAkBN,GACzB,IAAKA,EACH,MAAM,IAAIO,MAAM,oBAGlB,MAAyB,iBAAXP,EAAsBQ,SAASC,cAAcT,GAAyBA,EAQlEM,CAAiBN,GAAUE,EAAWQ,OACtDN,MAAAA,GAAAA,EAAeO,iBAAiB,SAAUV,MAG5CW,GAAgB,KACdR,MAAAA,GAAAA,EAAeS,oBAAoB,SAAUZ,MAGxCC,ECPT,IAAAY,EAAeC,EAAgB,CAC7BC,KAAM,WACNC,MAAO,CACLC,SAAU,CAAEC,KAAMC,QAASC,SAAS,GACpCC,OAAQ,CAAEH,KAAMC,QAASC,SAAS,GAClCrB,OAAQ,CAAEmB,KAAM,CAACI,OAAQC,QAA2CH,QAAS,IAC7EI,aAAc,CAAEN,KAAMC,QAASC,SAAS,GACxCK,eAAgB,CAAEP,KAAMC,QAASC,SAAS,GAC1CM,YAAa,CAAER,KAAMK,OAAQH,QAAS,IACtCO,MAAO,CAAET,KAAMK,OAAQH,aAASQ,GAChCC,SAAU,CAAEX,KAAMC,QAASC,SAAS,IAEtCU,MAAOd,GACL,MAAMe,EAAqBC,EAAI,GACzBC,EAAeD,GAAI,GACnBE,EAAWF,GAAI,GAEf/B,EAAaH,YAAYkB,EAAMjB,QAASoC,IAC5C,MAAMpC,EAASoC,EAAEpC,OAEbgC,EAAmBtB,MAAQV,EAAOqC,WAEpCF,EAASzB,QAAUO,EAAMQ,aACzBS,EAAaxB,QAAUO,EAAMS,iBAG7BS,EAASzB,OAAQ,EACjBwB,EAAaxB,OAAQ,GAGvBsB,EAAmBtB,MAAQV,EAAOqC,cAG9BC,SAAEA,GAAaC,IAEfC,EAAgBC,GAAS,IAAMH,EAASrB,EAAMW,MAAO,aAErDc,EAAsBD,GAAS,IAAMH,EAASrB,EAAMU,YAAaa,EAAc9B,SAE/EiC,EAAiBF,GAAS,KAC9B,MAAMG,EAASC,EAAkB5B,EAAMU,YAAce,EAAoBhC,MAAQ8B,EAAc9B,OAC/F,OAAOwB,EAAaxB,MAAQ,4BAA4BkC,IAAW,MAG/DE,EAAoBL,GAAS,IAC5BN,EAASzB,MACPO,EAAMK,OAAS,mBAAqB,oBADb,KAgBhC,MAAO,CACLpB,WAAAA,EACA6C,cAdoBN,GAAS,KAAO,CACpCO,WAAY/B,EAAMC,SAAW+B,EAAsBT,EAAc9B,OAAS8B,EAAc9B,MACxF,aAAciC,EAAejC,MAC7BwC,UAAWJ,EAAkBpC,MAC7ByC,SAAUlC,EAAMa,SAAW,gBAAsBD,MAWjDuB,cARoBX,GAAS,KAAO,CACpC,cAAc,EACd,qBAAsBxB,EAAMK,gEC1EhC+B,EAOQ,SAAA,CANNpB,IAAI,aACJqB,KAAK,UACJC,QAAOC,EAAaJ,eACpBK,QAAOD,EAAaT,iBAErBW,EAAOF,EAAAG,OAAA,wECJEC,EAAWC,EAAoBC"}
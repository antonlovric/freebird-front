{"version":3,"file":"index51.mjs","sources":["../../src/components/va-time-input/hooks/time-text-parser.ts","../../src/components/va-time-input/hooks/time-text-formatter.ts","../../src/components/va-time-input/VaTimeInput.vue","../../src/components/va-time-input/VaTimeInput.vue?vue&type=template&id=64bfaeaf&lang.js","../../src/components/va-time-input/index.ts"],"sourcesContent":["import { Ref, ref } from 'vue'\n\nconst parse = (text: string) => {\n  const m = text.match(/[0-9]{1,2}/g)\n\n  if (!m) { return [] }\n\n  return m.map((s) => Number(s))\n}\n\nconst parsePeriod = (text: string) => {\n  const m = text.match(/pm|am/i)\n\n  if (!m) { return null }\n\n  return Number(m[0].toLowerCase() === 'pm')\n}\n\nconst defaultParseDateFunction = (text: string) => {\n  const d = new Date()\n\n  const [h, m, s] = parse(text)\n  const period = parsePeriod(text)\n\n  if (!h) { return null }\n\n  const is12format = period !== null && h <= 12\n  const isPM = is12format && !!period\n  // Switch 12 to 0, because of 12h format\n  const fh = is12format ? (h === 12 ? 0 : h) : h\n\n  d.setHours(Math.min((fh || 0), is12format ? 12 : 24) + (isPM ? 12 : 0))\n  d.setMinutes(Math.min(m || 0, 60))\n  d.setSeconds(Math.min(s || 0, 60))\n\n  return d\n}\n\nexport const useTimeParser = (props: {\n  parse?: (input: string, isValidRef?: Ref<boolean>) => Date,\n}) => {\n  // const isTextIsMultipleDates = (text: string) => text.includes(props.delimiter)\n  // const isTextIsDateRange = (text: string) => text.includes(props.rangeDelimiter)\n\n  const getParseDateFn = () => props.parse || defaultParseDateFunction\n\n  const isValid = ref(true)\n\n  const parseDate = (text: string) => {\n    const parse = getParseDateFn()\n\n    const result = parse(text)\n\n    if (!result) { isValid.value = false }\n\n    return result\n  }\n\n  const parse = (text: string) => {\n    isValid.value = true\n\n    // if (props.parse) {\n    //   return props.parse(text, isValid)\n    // }\n\n    // if (isTextIsMultipleDates(text)) {\n    //   return text.split(props.delimiter).map((dateText) => parseDate(dateText))\n    // }\n\n    // if (isTextIsDateRange(text)) {\n    //   const [start, end] = text.split(props.rangeDelimiter).map((dateText) => parseDate(dateText))\n    //   return { start, end }\n    // }\n\n    return parseDate(text)\n  }\n\n  return {\n    parse,\n    isValid,\n  }\n}\n","export const useTimeFormatter = (props: {\n  ampm?: boolean,\n  view?: 'hours' | 'minutes' | 'seconds'\n  format?: (date?: Date) => string\n}) => {\n  const formatDate = (date?: Date) => {\n    if (!date) { return '' }\n\n    if (props.ampm) {\n      return date.toLocaleTimeString('en-US')\n    }\n\n    return date.toLocaleTimeString('en-GB')\n  }\n\n  const sliceTime = (time: string, start: number, end: number) => time.split(':').slice(start, end).join(':')\n\n  const formatWithView = (date?: Date) => {\n    if (props.view === 'seconds') {\n      return formatDate(date)\n    }\n\n    const [time, period] = formatDate(date).split(' ')\n\n    if (props.view === 'minutes') {\n      if (!period) { return sliceTime(time, 0, 2) }\n\n      return [sliceTime(time, 0, 2), period].join(' ')\n    }\n\n    if (props.view === 'hours') {\n      if (!period) { return sliceTime(time, 0, 1) }\n\n      return [sliceTime(time, 0, 1), period].join(' ')\n    }\n\n    return ''\n  }\n\n  return {\n    format: (date?: Date) => props.format ? props.format(date) : formatWithView(date),\n  }\n}\n","<template>\n  <va-dropdown\n    class=\"va-time-input\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    v-model=\"isOpenSync\"\n    placement=\"bottom-start\"\n    :offset=\"[2, 0]\"\n    :close-on-content-click=\"false\"\n    :disabled=\"$props.disabled\"\n    anchorSelector=\".va-input-wrapper__field\"\n    :stateful=\"false\"\n    trigger=\"none\"\n    @keydown.up.prevent=\"showDropdown\"\n    @keydown.down.prevent=\"showDropdown\"\n    @keydown.space=\"showDropdown($event, $props.manualInput, !$props.manualInput)\"\n    @keydown.enter=\"!$props.manualInput && showDropdown()\"\n    @keydown.esc.prevent=\"hideDropdown\"\n    @click=\"(!$props.manualInput || isOpenSync) && toggleDropdownWithoutFocus()\"\n  >\n    <template #anchor>\n      <va-input\n        ref=\"input\"\n        v-bind=\"{ ...computedInputProps, ...computedInputAttrs }\"\n        v-on=\"computedInputListeners\"\n        :modelValue=\"valueText\"\n        @change=\"onInputTextChanged($event.target.value)\"\n      >\n        <template\n          v-for=\"name in filteredSlots\"\n          :key=\"name\"\n          v-slot:[name]=\"slotScope\"\n        >\n          <slot\n            :name=\"name\"\n            v-bind=\"{ ...slotScope, toggleDropdown, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n        </template>\n\n        <template #prependInner=\"slotScope\">\n          <slot\n            name=\"prependInner\"\n            v-bind=\"{ ...slotScope, toggleDropdown, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n          <va-icon\n            v-if=\"$props.leftIcon\"\n            role=\"button\"\n            aria-label=\"toggle dropdown\"\n            aria-hidden=\"false\"\n            :tabindex=\"iconsTabIndexComputed\"\n            v-bind=\"iconProps\"\n            @click.stop=\"toggleDropdown\"\n            @keydown.enter.stop=\"toggleDropdown\"\n          />\n        </template>\n\n        <template #icon>\n          <va-icon\n            v-if=\"canBeClearedComputed\"\n            role=\"button\"\n            aria-label=\"reset\"\n            aria-hidden=\"false\"\n            :tabindex=\"iconsTabIndexComputed\"\n            v-bind=\"clearIconProps\"\n            @click.stop=\"reset\"\n            @keydown.enter.stop=\"reset\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n          />\n          <va-icon\n            v-else-if=\"!$props.leftIcon\"\n            role=\"button\"\n            aria-label=\"toggle dropdown\"\n            aria-hidden=\"false\"\n            class=\"va-dropdown__icons__reset\"\n            :tabindex=\"iconsTabIndexComputed\"\n            v-bind=\"iconProps\"\n            @click.stop=\"toggleDropdown\"\n            @keydown.enter.stop=\"toggleDropdown\"\n          />\n        </template>\n      </va-input>\n    </template>\n\n    <va-dropdown-content\n      no-padding\n      @keydown.esc.prevent=\"hideDropdown\"\n      @keypress.enter.prevent=\"hideDropdown\"\n    >\n      <va-time-picker\n        ref=\"timePicker\"\n        v-bind=\"timePickerProps\"\n        v-model=\"modelValueSync\"\n      />\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, shallowRef, nextTick } from 'vue'\nimport omit from 'lodash/omit.js'\n\nimport { extractComponentProps, filterComponentProps } from '../../utils/child-props'\nimport {\n  useSyncProp,\n  useValidation, useValidationEmits, useValidationProps, ValidationProps,\n  useClearable, useClearableEmits,\n} from '../../composables'\nimport { useTimeParser } from './hooks/time-text-parser'\nimport { useTimeFormatter } from './hooks/time-text-formatter'\n\nimport VaTimePicker from '../va-time-picker/VaTimePicker.vue'\nimport VaInput from '../va-input/VaInput.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport { VaDropdown, VaDropdownContent } from '../va-dropdown'\n\nconst VaInputProps = extractComponentProps(VaInput, [\n  'mask', 'returnRaw', 'autosize', 'minRows', 'maxRows', 'type', 'inputmode', 'counter', 'maxLength',\n])\n\nexport default defineComponent({\n  name: 'VaTimeInput',\n\n  components: { VaDropdown, VaDropdownContent, VaTimePicker, VaIcon, VaInput },\n\n  emits: [...useValidationEmits, ...useClearableEmits, 'update:modelValue', 'update:isOpen'],\n\n  props: {\n    ...VaInputProps,\n    ...extractComponentProps(VaTimePicker),\n    ...useValidationProps as ValidationProps<Date>,\n\n    isOpen: { type: Boolean, default: undefined },\n    modelValue: { type: Date, default: undefined },\n    clearValue: { type: Date, default: undefined },\n    format: { type: Function as PropType<(date?: Date) => string> },\n    parse: { type: Function as PropType<(input: string) => Date> },\n    manualInput: { type: Boolean, default: false },\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'schedule' },\n  },\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs, slots }) {\n    const input = shallowRef<typeof VaInput>()\n    const timePicker = shallowRef<typeof VaTimePicker>()\n\n    const [isOpenSync] = useSyncProp('isOpen', props, emit, false)\n    const [modelValueSync] = useSyncProp('modelValue', props, emit)\n\n    const { parse, isValid } = useTimeParser(props)\n    const { format } = useTimeFormatter(props)\n\n    const valueText = computed<string>(() => format(modelValueSync.value || props.clearValue))\n\n    const onInputTextChanged = (val: string) => {\n      if (!val) {\n        return reset()\n      }\n\n      const v = parse(val)\n\n      if (isValid.value && v) {\n        modelValueSync.value = v\n      } else {\n        modelValueSync.value = undefined\n        isValid.value = true\n      }\n    }\n\n    // --- not used yet ---\n    // const changePeriod = (isPM: boolean) => {\n    //   if (!modelValueSync.value) { return }\n\n    //   const halfDayPeriod = 12\n    //   const h = modelValueSync.value.getHours()\n\n    //   if (isPM && h <= halfDayPeriod) {\n    //     modelValueSync.value = new Date(modelValueSync.value.setHours(h + halfDayPeriod))\n    //   } else if (!isPM && h >= halfDayPeriod) {\n    //     modelValueSync.value = new Date(modelValueSync.value.setHours(h - halfDayPeriod))\n    //   }\n    // }\n\n    // const changePeriodToPm = () => changePeriod(true)\n    // const changePeriodToAm = () => changePeriod(false)\n\n    const reset = (): void => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n    }\n\n    const focus = (): void => {\n      input.value?.focus()\n    }\n\n    const blur = (): void => {\n      input.value?.blur()\n    }\n\n    const { computedError, computedErrorMessages, listeners } = useValidation(props, emit, reset, focus)\n\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueText)\n\n    const canBeClearedComputed = computed(() => (\n      canBeCleared.value && valueText.value !== format(props.clearValue)\n    ))\n\n    const iconProps = computed(() => ({\n      name: props.icon,\n      color: props.color,\n      size: 'small',\n    }))\n\n    const computedInputProps = computed(() => ({\n      ...filterComponentProps(props, VaInputProps).value,\n      clearable: false,\n      rules: [],\n      error: computedError.value,\n      errorMessages: computedErrorMessages.value,\n      readonly: props.readonly || !props.manualInput,\n    }))\n\n    const computedInputListeners = computed(() => ({\n      focus: () => {\n        onFocus()\n        listeners.onFocus()\n      },\n      blur: () => {\n        onBlur()\n        listeners.onBlur()\n      },\n    }))\n\n    const iconsTabIndexComputed = computed(() => props.disabled || props.readonly ? -1 : 0)\n    const computedInputAttrs = computed(() => ({\n      ariaLabel: props.label || 'selected time',\n      ariaDisabled: props.disabled,\n      ariaReadonly: props.readonly,\n      tabindex: props.disabled ? -1 : 0,\n      ...omit(attrs, ['class', 'style']),\n    }))\n\n    const filteredSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    const hideDropdown = () => {\n      isOpenSync.value = false\n      focus()\n    }\n\n    const showDropdownWithoutFocus = () => {\n      isOpenSync.value = true\n    }\n\n    const showDropdown = (event?: KeyboardEvent, cancel?: boolean, prevent?: boolean) => {\n      if (cancel) { return }\n      if (prevent) { event?.preventDefault() }\n\n      showDropdownWithoutFocus()\n      nextTick(() => timePicker.value?.focus())\n    }\n\n    const toggleDropdown = () => {\n      isOpenSync.value ? hideDropdown() : showDropdown()\n    }\n\n    const toggleDropdownWithoutFocus = () => {\n      isOpenSync.value ? hideDropdown() : showDropdownWithoutFocus()\n    }\n\n    return {\n      input,\n      timePicker,\n\n      timePickerProps: filterComponentProps(props, extractComponentProps(VaTimePicker)),\n      computedInputProps,\n      computedInputAttrs,\n      computedInputListeners,\n      iconsTabIndexComputed,\n      isOpenSync,\n      modelValueSync,\n      valueText,\n      onInputTextChanged,\n      canBeClearedComputed,\n      iconProps,\n      clearIconProps,\n      filteredSlots,\n\n      hideDropdown,\n      showDropdown,\n      toggleDropdown,\n      toggleDropdownWithoutFocus,\n\n      reset,\n      focus,\n      blur,\n\n      onFocus,\n      onBlur,\n    }\n  },\n})\n</script>\n","<template>\n  <va-dropdown\n    class=\"va-time-input\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    v-model=\"isOpenSync\"\n    placement=\"bottom-start\"\n    :offset=\"[2, 0]\"\n    :close-on-content-click=\"false\"\n    :disabled=\"$props.disabled\"\n    anchorSelector=\".va-input-wrapper__field\"\n    :stateful=\"false\"\n    trigger=\"none\"\n    @keydown.up.prevent=\"showDropdown\"\n    @keydown.down.prevent=\"showDropdown\"\n    @keydown.space=\"showDropdown($event, $props.manualInput, !$props.manualInput)\"\n    @keydown.enter=\"!$props.manualInput && showDropdown()\"\n    @keydown.esc.prevent=\"hideDropdown\"\n    @click=\"(!$props.manualInput || isOpenSync) && toggleDropdownWithoutFocus()\"\n  >\n    <template #anchor>\n      <va-input\n        ref=\"input\"\n        v-bind=\"{ ...computedInputProps, ...computedInputAttrs }\"\n        v-on=\"computedInputListeners\"\n        :modelValue=\"valueText\"\n        @change=\"onInputTextChanged($event.target.value)\"\n      >\n        <template\n          v-for=\"name in filteredSlots\"\n          :key=\"name\"\n          v-slot:[name]=\"slotScope\"\n        >\n          <slot\n            :name=\"name\"\n            v-bind=\"{ ...slotScope, toggleDropdown, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n        </template>\n\n        <template #prependInner=\"slotScope\">\n          <slot\n            name=\"prependInner\"\n            v-bind=\"{ ...slotScope, toggleDropdown, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n          <va-icon\n            v-if=\"$props.leftIcon\"\n            role=\"button\"\n            aria-label=\"toggle dropdown\"\n            aria-hidden=\"false\"\n            :tabindex=\"iconsTabIndexComputed\"\n            v-bind=\"iconProps\"\n            @click.stop=\"toggleDropdown\"\n            @keydown.enter.stop=\"toggleDropdown\"\n          />\n        </template>\n\n        <template #icon>\n          <va-icon\n            v-if=\"canBeClearedComputed\"\n            role=\"button\"\n            aria-label=\"reset\"\n            aria-hidden=\"false\"\n            :tabindex=\"iconsTabIndexComputed\"\n            v-bind=\"clearIconProps\"\n            @click.stop=\"reset\"\n            @keydown.enter.stop=\"reset\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n          />\n          <va-icon\n            v-else-if=\"!$props.leftIcon\"\n            role=\"button\"\n            aria-label=\"toggle dropdown\"\n            aria-hidden=\"false\"\n            class=\"va-dropdown__icons__reset\"\n            :tabindex=\"iconsTabIndexComputed\"\n            v-bind=\"iconProps\"\n            @click.stop=\"toggleDropdown\"\n            @keydown.enter.stop=\"toggleDropdown\"\n          />\n        </template>\n      </va-input>\n    </template>\n\n    <va-dropdown-content\n      no-padding\n      @keydown.esc.prevent=\"hideDropdown\"\n      @keypress.enter.prevent=\"hideDropdown\"\n    >\n      <va-time-picker\n        ref=\"timePicker\"\n        v-bind=\"timePickerProps\"\n        v-model=\"modelValueSync\"\n      />\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, shallowRef, nextTick } from 'vue'\nimport omit from 'lodash/omit.js'\n\nimport { extractComponentProps, filterComponentProps } from '../../utils/child-props'\nimport {\n  useSyncProp,\n  useValidation, useValidationEmits, useValidationProps, ValidationProps,\n  useClearable, useClearableEmits,\n} from '../../composables'\nimport { useTimeParser } from './hooks/time-text-parser'\nimport { useTimeFormatter } from './hooks/time-text-formatter'\n\nimport VaTimePicker from '../va-time-picker/VaTimePicker.vue'\nimport VaInput from '../va-input/VaInput.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport { VaDropdown, VaDropdownContent } from '../va-dropdown'\n\nconst VaInputProps = extractComponentProps(VaInput, [\n  'mask', 'returnRaw', 'autosize', 'minRows', 'maxRows', 'type', 'inputmode', 'counter', 'maxLength',\n])\n\nexport default defineComponent({\n  name: 'VaTimeInput',\n\n  components: { VaDropdown, VaDropdownContent, VaTimePicker, VaIcon, VaInput },\n\n  emits: [...useValidationEmits, ...useClearableEmits, 'update:modelValue', 'update:isOpen'],\n\n  props: {\n    ...VaInputProps,\n    ...extractComponentProps(VaTimePicker),\n    ...useValidationProps as ValidationProps<Date>,\n\n    isOpen: { type: Boolean, default: undefined },\n    modelValue: { type: Date, default: undefined },\n    clearValue: { type: Date, default: undefined },\n    format: { type: Function as PropType<(date?: Date) => string> },\n    parse: { type: Function as PropType<(input: string) => Date> },\n    manualInput: { type: Boolean, default: false },\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'schedule' },\n  },\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs, slots }) {\n    const input = shallowRef<typeof VaInput>()\n    const timePicker = shallowRef<typeof VaTimePicker>()\n\n    const [isOpenSync] = useSyncProp('isOpen', props, emit, false)\n    const [modelValueSync] = useSyncProp('modelValue', props, emit)\n\n    const { parse, isValid } = useTimeParser(props)\n    const { format } = useTimeFormatter(props)\n\n    const valueText = computed<string>(() => format(modelValueSync.value || props.clearValue))\n\n    const onInputTextChanged = (val: string) => {\n      if (!val) {\n        return reset()\n      }\n\n      const v = parse(val)\n\n      if (isValid.value && v) {\n        modelValueSync.value = v\n      } else {\n        modelValueSync.value = undefined\n        isValid.value = true\n      }\n    }\n\n    // --- not used yet ---\n    // const changePeriod = (isPM: boolean) => {\n    //   if (!modelValueSync.value) { return }\n\n    //   const halfDayPeriod = 12\n    //   const h = modelValueSync.value.getHours()\n\n    //   if (isPM && h <= halfDayPeriod) {\n    //     modelValueSync.value = new Date(modelValueSync.value.setHours(h + halfDayPeriod))\n    //   } else if (!isPM && h >= halfDayPeriod) {\n    //     modelValueSync.value = new Date(modelValueSync.value.setHours(h - halfDayPeriod))\n    //   }\n    // }\n\n    // const changePeriodToPm = () => changePeriod(true)\n    // const changePeriodToAm = () => changePeriod(false)\n\n    const reset = (): void => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n    }\n\n    const focus = (): void => {\n      input.value?.focus()\n    }\n\n    const blur = (): void => {\n      input.value?.blur()\n    }\n\n    const { computedError, computedErrorMessages, listeners } = useValidation(props, emit, reset, focus)\n\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueText)\n\n    const canBeClearedComputed = computed(() => (\n      canBeCleared.value && valueText.value !== format(props.clearValue)\n    ))\n\n    const iconProps = computed(() => ({\n      name: props.icon,\n      color: props.color,\n      size: 'small',\n    }))\n\n    const computedInputProps = computed(() => ({\n      ...filterComponentProps(props, VaInputProps).value,\n      clearable: false,\n      rules: [],\n      error: computedError.value,\n      errorMessages: computedErrorMessages.value,\n      readonly: props.readonly || !props.manualInput,\n    }))\n\n    const computedInputListeners = computed(() => ({\n      focus: () => {\n        onFocus()\n        listeners.onFocus()\n      },\n      blur: () => {\n        onBlur()\n        listeners.onBlur()\n      },\n    }))\n\n    const iconsTabIndexComputed = computed(() => props.disabled || props.readonly ? -1 : 0)\n    const computedInputAttrs = computed(() => ({\n      ariaLabel: props.label || 'selected time',\n      ariaDisabled: props.disabled,\n      ariaReadonly: props.readonly,\n      tabindex: props.disabled ? -1 : 0,\n      ...omit(attrs, ['class', 'style']),\n    }))\n\n    const filteredSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    const hideDropdown = () => {\n      isOpenSync.value = false\n      focus()\n    }\n\n    const showDropdownWithoutFocus = () => {\n      isOpenSync.value = true\n    }\n\n    const showDropdown = (event?: KeyboardEvent, cancel?: boolean, prevent?: boolean) => {\n      if (cancel) { return }\n      if (prevent) { event?.preventDefault() }\n\n      showDropdownWithoutFocus()\n      nextTick(() => timePicker.value?.focus())\n    }\n\n    const toggleDropdown = () => {\n      isOpenSync.value ? hideDropdown() : showDropdown()\n    }\n\n    const toggleDropdownWithoutFocus = () => {\n      isOpenSync.value ? hideDropdown() : showDropdownWithoutFocus()\n    }\n\n    return {\n      input,\n      timePicker,\n\n      timePickerProps: filterComponentProps(props, extractComponentProps(VaTimePicker)),\n      computedInputProps,\n      computedInputAttrs,\n      computedInputListeners,\n      iconsTabIndexComputed,\n      isOpenSync,\n      modelValueSync,\n      valueText,\n      onInputTextChanged,\n      canBeClearedComputed,\n      iconProps,\n      clearIconProps,\n      filteredSlots,\n\n      hideDropdown,\n      showDropdown,\n      toggleDropdown,\n      toggleDropdownWithoutFocus,\n\n      reset,\n      focus,\n      blur,\n\n      onFocus,\n      onBlur,\n    }\n  },\n})\n</script>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport _VaTimeInput from './VaTimeInput.vue'\n\nexport const VaTimeInput = withConfigTransport(_VaTimeInput)\n"],"names":["defaultParseDateFunction","text","d","Date","h","m","s","match","map","Number","parse","period","toLowerCase","parsePeriod","is12format","isPM","fh","setHours","Math","min","setMinutes","setSeconds","useTimeParser","props","isValid","ref","parseDate","result","value","useTimeFormatter","formatDate","date","ampm","toLocaleTimeString","sliceTime","time","start","end","split","slice","join","format","view","formatWithView","VaInputProps","extractComponentProps","VaInput","script","defineComponent","name","components","VaDropdown","VaDropdownContent","VaTimePicker","VaIcon","emits","useValidationEmits","useClearableEmits","useValidationProps","isOpen","type","Boolean","default","undefined","modelValue","clearValue","Function","manualInput","leftIcon","icon","String","inheritAttrs","setup","emit","attrs","slots","input","shallowRef","timePicker","isOpenSync","useSyncProp","modelValueSync","valueText","computed","reset","focus","_a","computedError","computedErrorMessages","listeners","useValidation","canBeCleared","clearIconProps","onFocus","onBlur","useClearable","canBeClearedComputed","iconProps","color","size","computedInputProps","filterComponentProps","clearable","rules","error","errorMessages","readonly","computedInputListeners","blur","iconsTabIndexComputed","disabled","computedInputAttrs","ariaLabel","label","ariaDisabled","ariaReadonly","tabindex","omit","filteredSlots","slotsWithIcons","Object","keys","filter","slot","includes","hideDropdown","showDropdownWithoutFocus","showDropdown","event","cancel","prevent","preventDefault","nextTick","timePickerProps","onInputTextChanged","val","v","toggleDropdown","toggleDropdownWithoutFocus","_createBlock","_component_va_dropdown","class","_normalizeClass","_ctx","$attrs","style","_normalizeStyle","$event","placement","offset","$props","anchorSelector","stateful","trigger","onKeydown","onClick","anchor","_createVNode","_component_va_input","_mergeProps","_toHandlers","onChange","target","prependInner","_withCtx","slotScope","_renderSlot","$slots","_normalizeProps","_guardReactiveProps","_openBlock","_component_va_icon","role","_renderList","fn","_component_va_dropdown_content","onKeypress","_component_va_time_picker","VaTimeInput","withConfigTransport","_VaTimeInput"],"mappings":"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"}
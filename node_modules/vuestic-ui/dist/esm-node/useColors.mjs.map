{"version":3,"file":"useColors.mjs","sources":["../../src/services/color-config/color-functions.ts","../../src/composables/useColors.ts"],"sourcesContent":["// import colortranslator, { ColorTranslator as CTClass } from 'colortranslator'\nimport { ColorTranslator } from 'colortranslator'\nimport { HSLObject, ColorInput } from 'colortranslator/dist/@types'\n\n/** This is a hack for cjs and esm build when we can transpile colortranslator */\n// const ColorTranslator = CTClass || colortranslator.ColorTranslator\n\nexport const colorToRgba = (color: ColorInput, opacity: number) => {\n  return new ColorTranslator(color).setA(opacity).RGBA\n}\n\nexport const getTextColor = (color: ColorInput, darkColor = 'dark', lightColor = 'white') => {\n  const { R, G, B } = new ColorTranslator(color)\n  const isLightBackground = Math.sqrt(R * R * 0.241 + G * G * 0.691 + B * B * 0.068) > 130\n  return isLightBackground ? darkColor : lightColor\n}\n\nexport const getBoxShadowColor = (color: ColorInput) => {\n  return new ColorTranslator(color).setA(0.4).RGBA\n}\n\nexport const getHoverColor = (color: ColorInput) => {\n  return new ColorTranslator(color).setA(0.2).RGBA\n}\n\nexport const getFocusColor = (color: ColorInput) => {\n  return new ColorTranslator(color).setA(0.3).RGBA\n}\n\nexport const shiftHSLAColor = (color: ColorInput, offset: { h?: number; s?: number; l?: number; a?: number }) => {\n  const result = new ColorTranslator(color)\n\n  if (offset.h) { result.setH(result.H + offset.h) }\n\n  if (offset.s) { result.setS(result.S + offset.s) }\n\n  if (offset.l) { result.setL(result.L + offset.l) }\n\n  if (offset.a) { result.setA(result.A + offset.a) }\n\n  return result.HSLA\n}\n\nexport const setHSLAColor = (color: ColorInput, newColor: { h?: number; s?: number; l?: number; a?: number }) => {\n  const result = new ColorTranslator(color)\n\n  if (newColor.h !== undefined) { result.setH(newColor.h) }\n\n  if (newColor.s !== undefined) { result.setS(newColor.s) }\n\n  if (newColor.l !== undefined) { result.setL(newColor.l) }\n\n  if (newColor.a !== undefined) { result.setA(newColor.a) }\n\n  return result.HSLA\n}\n\n/**\n * This method guesses second color for gradient based on first one.\n * Calculation method should differ for different colors, so we split color circle\n * in zones.\n *\n * @param color\n */\nexport const shiftGradientColor = (color: ColorInput): string => {\n  const newColor = ColorTranslator.toHSLA(color, false) as HSLObject\n\n  // Gray\n  if (newColor.s < 10) {\n    return shiftHSLAColor(newColor, { h: 2, s: 5, l: 10 })\n  }\n  // Unsaturated (too pale, gray-ish, monotone)\n  // For unsaturated color, hue change does nothing.\n  if (newColor.s < 30) {\n    return shiftHSLAColor(newColor, { s: -14, l: 11 })\n  }\n  // Red\n  if ((newColor.h >= 0 && newColor.h < 44) || (newColor.h >= 285)) {\n    return shiftHSLAColor(newColor, { h: 11, s: 27, l: 8 })\n  }\n  // Yellow\n  if (newColor.h >= 44 && newColor.h < 85) {\n    return shiftHSLAColor(newColor, { h: 3, l: 9 })\n  }\n  // Green\n  if (newColor.h >= 85 && newColor.h < 165) {\n    return shiftHSLAColor(newColor, { h: 16, l: 14 })\n  }\n  // Blue\n  if (newColor.h >= 165 && newColor.h < 285) {\n    return shiftHSLAColor(newColor, { h: -15, s: 3, l: 2 })\n  }\n\n  throw new Error('This method should handle all colors. But it didn\\'t for some reason.')\n}\n\nexport const getGradientBackground = (color: string) => {\n  const colorLeft = shiftGradientColor(color)\n  const colorRight = ColorTranslator.toHSLA(color)\n\n  return `linear-gradient(to right, ${colorLeft}, ${colorRight})`\n}\n\n/**\n * Check if color is valid hsl, hsla, rga, rgba or hex color\n * Taken from https://www.regextester.com/103656\n * Check options <or> isCSSVariable(prop) <or> CSS.supports('color', prop) deleted due to problems with SSR and opacity\n * Details are in the discussion: https://github.com/epicmaxco/vuestic-ui/pull/1589\n * @param strColor\n */\nexport const isColor = (strColor: string): boolean => {\n  // Need to use Regex instead of DOM methods because we support SSR\n  const cssColorRegex = /^#([\\da-f]{3}){1,2}$|^#([\\da-f]{4}){1,2}$|(rgb|hsl)a?\\((\\s*-?\\d+%?\\s*,){2}(\\s*-?\\d+%?\\s*,?\\s*\\)?)(,\\s*(0?\\.\\d+)?|1)?\\)/\n\n  return cssColorRegex.test(strColor.toLocaleLowerCase())\n}\n\nexport const isCSSVariable = (strColor: string): boolean => /var\\(--.+\\)/.test(strColor)\n","import { GlobalConfig, useGlobalConfigSafe } from '../services/global-config/global-config'\nimport {\n  getBoxShadowColor,\n  getHoverColor,\n  getFocusColor,\n  getGradientBackground,\n  isColor,\n  getTextColor,\n  shiftHSLAColor,\n  setHSLAColor,\n  isCSSVariable,\n} from '../services/color-config/color-functions'\n\nexport type CssColor = string\nexport type ColorConfig = { [colorName: string]: CssColor }\n\n/**\n * You can add these props to any component by destructuring them inside props option.\n * @example\n * props: { ...useColorProps, componentsOwnProp, etc. }\n * It's better to add props at the beginning to make sure that component own props will be used instead in case of collision.\n */\nexport const useColorProps = {\n  color: {\n    type: String,\n    default: '',\n  },\n}\n\nexport const useColors = () => {\n  const globalConfig = useGlobalConfigSafe()\n\n  if (!globalConfig) {\n    throw new Error('useColors must be used in setup function or Vuestic GlobalConfigPlugin is not registered!')\n  }\n\n  const { setGlobalConfig, getGlobalConfig } = globalConfig\n\n  const setColors = (colors: ColorConfig): void => {\n    setGlobalConfig((config: GlobalConfig) => ({\n      ...config,\n      colors: { ...config.colors, ...colors },\n    }))\n  }\n\n  const getColors = (): ColorConfig => {\n    return getGlobalConfig().colors || {}\n  }\n\n  /**\n   * Returns color from config by name or return prop if color is a valid hex, hsl, hsla, rgb or rgba color.\n   * @param prop - should be color name or color in hex, hsl, hsla, rgb or rgba format.\n   * @param preferVariables - function should return (if possible) CSS variable instead of hex (hex is needed to set opacity).\n   * @param defaultColor - this color will be used if prop is invalid.\n   */\n  const getColor = (prop?: string, defaultColor?: string, preferVariables?: boolean): CssColor => {\n    if (!defaultColor) {\n      /**\n       * Most default color - fallback when nothing else is found.\n       */\n      defaultColor = getColors().primary\n    }\n\n    const colors = getColors()\n\n    if (!prop) {\n      prop = defaultColor\n    }\n\n    if (colors[prop]) {\n      return preferVariables ? `var(--va-${prop})` : colors[prop]\n    }\n\n    if (isColor(prop)) {\n      return prop\n    }\n\n    if (preferVariables && isCSSVariable(prop)) {\n      return prop\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(`'${prop}' is not a proper color! Use HEX or default color themes\n      names (https://vuestic.dev/en/styles/colors#default-color-themes)`)\n    }\n\n    return defaultColor\n  }\n\n  const colorsToCSSVariable = (colors: { [colorName: string]: string | undefined }, prefix = 'va') => {\n    return Object\n      .keys(colors)\n      .filter((key) => colors[key] !== undefined)\n      .reduce((acc: Record<string, any>, colorName: string) => {\n        acc[`--${prefix}-${colorName}`] = getColor(colors[colorName], undefined, true)\n        return acc\n      }, {})\n  }\n\n  return {\n    setColors,\n    getColors,\n    getColor,\n    getBoxShadowColor,\n    getHoverColor,\n    getFocusColor,\n    getGradientBackground,\n    getTextColor,\n    shiftHSLAColor,\n    setHSLAColor,\n    colorsToCSSVariable,\n  }\n}\n"],"names":["colorToRgba","color","opacity","ColorTranslator","setA","RGBA","getTextColor","darkColor","lightColor","R","G","B","Math","sqrt","getBoxShadowColor","getHoverColor","getFocusColor","shiftHSLAColor","offset","result","h","setH","H","s","setS","S","l","setL","L","a","A","HSLA","setHSLAColor","newColor","undefined","getGradientBackground","colorLeft","toHSLA","Error","shiftGradientColor","useColorProps","type","String","default","useColors","globalConfig","useGlobalConfigSafe","setGlobalConfig","getGlobalConfig","getColors","colors","getColor","prop","defaultColor","preferVariables","primary","test","toLocaleLowerCase","strColor","isCSSVariable","process","env","NODE_ENV","console","warn","setColors","config","colorsToCSSVariable","prefix","Object","keys","filter","key","reduce","acc","colorName"],"mappings":"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"}
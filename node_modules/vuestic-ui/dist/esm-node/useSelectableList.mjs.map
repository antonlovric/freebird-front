{"version":3,"file":"useSelectableList.mjs","sources":["../../src/composables/useSelectableList.ts"],"sourcesContent":["import { PropType, ExtractPropTypes } from 'vue'\n\nimport { getValueByKey } from '../services/utils'\n\nexport type SelectableOption = string | number | Record<string, any>\n\ntype StringOrFunction = string | ((option: SelectableOption) => unknown)\n\nexport const useSelectableListProps = {\n  options: { type: Array as PropType<SelectableOption[]>, default: () => [] },\n  textBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'text' },\n  valueBy: { type: [String, Function] as PropType<StringOrFunction>, default: '' },\n  trackBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'value' },\n  disabledBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'disabled' },\n  groupBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'group' },\n}\n\nexport function useSelectableList (props: ExtractPropTypes<typeof useSelectableListProps>) {\n  const isStringOrNumber = (option: SelectableOption): option is (string | number) => {\n    const typeOfOption = typeof option\n    return typeOfOption === 'string' || typeOfOption === 'number'\n  }\n\n  const getOptionProperty = (option: SelectableOption, selector: StringOrFunction) => {\n    return !selector || isStringOrNumber(option)\n      ? option\n      : getValueByKey(option, selector)\n  }\n\n  const getValue = (option: SelectableOption) => getOptionProperty(option, props.valueBy)\n\n  const getOptionByValue = (value: SelectableOption) => {\n    if (!props.valueBy) { return value }\n    return props.options.find((option: SelectableOption) => value === getValue(option)) || value\n  }\n\n  const getText = (option: SelectableOption) => getOptionProperty(option, props.textBy)\n  const getDisabled = (option: SelectableOption) => getValueByKey(option, props.disabledBy)\n  const getTrackBy = (option: SelectableOption) => getOptionProperty(option, props.trackBy)\n  const getGroupBy = (option: SelectableOption) => getOptionProperty(option, props.groupBy)\n\n  return {\n    getValue,\n    getOptionByValue,\n    getText,\n    getDisabled,\n    getTrackBy,\n    getGroupBy,\n  }\n}\n"],"names":["useSelectableListProps","options","type","Array","default","textBy","String","Function","valueBy","trackBy","disabledBy","groupBy","useSelectableList","props","getOptionProperty","option","selector","typeOfOption","isStringOrNumber","getValueByKey","getValue","getOptionByValue","value","find","getText","getDisabled","getTrackBy","getGroupBy"],"mappings":"gCAQa,MAAAA,EAAyB,CACpCC,QAAS,CAAEC,KAAMC,MAAuCC,QAAS,IAAM,IACvEC,OAAQ,CAAEH,KAAM,CAACI,OAAQC,UAAyCH,QAAS,QAC3EI,QAAS,CAAEN,KAAM,CAACI,OAAQC,UAAyCH,QAAS,IAC5EK,QAAS,CAAEP,KAAM,CAACI,OAAQC,UAAyCH,QAAS,SAC5EM,WAAY,CAAER,KAAM,CAACI,OAAQC,UAAyCH,QAAS,YAC/EO,QAAS,CAAET,KAAM,CAACI,OAAQC,UAAyCH,QAAS,UAGxE,SAAUQ,kBAAmBC,GACjC,MAKMC,kBAAoB,CAACC,EAA0BC,KAC3CA,GANe,CAACD,IACxB,MAAME,SAAsBF,EAC5B,MAAwB,WAAjBE,GAA8C,WAAjBA,GAIhBC,CAAiBH,GACjCA,EACAI,EAAcJ,EAAQC,GAGtBI,SAAYL,GAA6BD,kBAAkBC,EAAQF,EAAML,SAY/E,MAAO,CACLY,SAAAA,SACAC,iBAZwBC,GACnBT,EAAML,SACJK,EAAMZ,QAAQsB,MAAMR,GAA6BO,IAAUF,SAASL,MAD9CO,EAY7BE,QAReT,GAA6BD,kBAAkBC,EAAQF,EAAMR,QAS5EoB,YARmBV,GAA6BI,EAAcJ,EAAQF,EAAMH,YAS5EgB,WARkBX,GAA6BD,kBAAkBC,EAAQF,EAAMJ,SAS/EkB,WARkBZ,GAA6BD,kBAAkBC,EAAQF,EAAMF"}
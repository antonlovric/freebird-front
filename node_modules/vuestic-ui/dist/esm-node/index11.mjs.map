{"version":3,"file":"index11.mjs","sources":["../../src/components/va-button-toggle/VaButtonToggle.vue","../../src/components/va-button-toggle/VaButtonToggle.vue?vue&type=template&id=39f0c05a&lang.js","../../src/components/va-button-toggle/index.ts"],"sourcesContent":["<template>\n  <div class=\"va-button-toggle\">\n    <va-button-group\n      :color=\"color\"\n      :textColor=\"textColor\"\n      :rounded=\"rounded\"\n      :outline=\"outline\"\n      :flat=\"flat\"\n      :gradient=\"gradient\"\n    >\n      <va-button\n        v-for=\"option in options\"\n        :key=\"option.value\"\n        :aria-pressed=\"isToggled(option.value)\"\n        :class=\"getButtonClass(option.value)\"\n        :disabled=\"disabled\"\n        :size=\"size\"\n        v-bind=\"getButtonProps(option)\"\n        @click=\"changeValue(option.value)\"\n      >\n        {{ option.label }}\n      </va-button>\n    </va-button-group>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\n\nimport { shiftHSLAColor } from '../../services/color-config/color-functions'\nimport { useColors, useTextColor } from '../../composables'\n\nimport { ButtonOption } from './types'\n\nimport { VaButton } from '../va-button'\nimport { VaButtonGroup } from '../va-button-group'\n\nexport default defineComponent({\n  name: 'VaButtonToggle',\n  components: {\n    VaButtonGroup,\n    VaButton,\n  },\n  emits: ['update:modelValue'],\n  props: {\n    options: {\n      type: Array as PropType<ButtonOption[]>,\n      required: true,\n    },\n    color: { type: String, default: 'primary' },\n    textColor: { type: String, default: undefined },\n    activeButtonTextColor: { type: String },\n    modelValue: { type: [String, Number], default: '' },\n    outline: { type: Boolean, default: false },\n    flat: { type: Boolean, default: false },\n    rounded: { type: Boolean, default: true },\n    disabled: { type: Boolean, default: false },\n    size: {\n      type: String as PropType<'medium' | 'small' | 'large'>,\n      default: 'medium',\n      validator: (value: string) => ['medium', 'small', 'large'].includes(value),\n    },\n    toggleColor: { type: String, default: '' },\n    gradient: { type: Boolean, default: false },\n  },\n  setup (props, { emit }) {\n    const { getColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n\n    const isFlatOrOutline = computed(() => props.outline || props.flat)\n    const activeButtonColor = computed(() => {\n      if (props.toggleColor) {\n        return getColor(props.toggleColor)\n      } else {\n        return isFlatOrOutline.value ? colorComputed.value : shiftHSLAColor(colorComputed.value, { l: -6 })\n      }\n    })\n\n    const { textColorComputed: activeButtonTextColor } = useTextColor(activeButtonColor)\n\n    const isToggled = (value: any) => value === props.modelValue\n\n    const getButtonProps = (option: ButtonOption = {} as ButtonOption) => {\n      const iconsProps = {\n        icon: option.icon,\n        iconRight: option.iconRight,\n      }\n\n      if (!isToggled(option.value)) { return iconsProps }\n\n      return {\n        color: activeButtonColor.value,\n        textColor: props.activeButtonTextColor ?? activeButtonTextColor.value,\n        ...iconsProps,\n        ...(isFlatOrOutline.value && { outline: false, flat: false }),\n      }\n    }\n\n    const getButtonClass = (buttonValue: any) => ({ 'va-button--active': isToggled(buttonValue) })\n\n    const changeValue = (value: any) => emit('update:modelValue', value)\n\n    return {\n      getButtonProps,\n      getButtonClass,\n      changeValue,\n      isToggled,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-button-toggle {\n  .va-button {\n    &:focus,\n    &:hover {\n      box-shadow: none !important;\n    }\n  }\n}\n</style>\n","<template>\n  <div class=\"va-button-toggle\">\n    <va-button-group\n      :color=\"color\"\n      :textColor=\"textColor\"\n      :rounded=\"rounded\"\n      :outline=\"outline\"\n      :flat=\"flat\"\n      :gradient=\"gradient\"\n    >\n      <va-button\n        v-for=\"option in options\"\n        :key=\"option.value\"\n        :aria-pressed=\"isToggled(option.value)\"\n        :class=\"getButtonClass(option.value)\"\n        :disabled=\"disabled\"\n        :size=\"size\"\n        v-bind=\"getButtonProps(option)\"\n        @click=\"changeValue(option.value)\"\n      >\n        {{ option.label }}\n      </va-button>\n    </va-button-group>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\n\nimport { shiftHSLAColor } from '../../services/color-config/color-functions'\nimport { useColors, useTextColor } from '../../composables'\n\nimport { ButtonOption } from './types'\n\nimport { VaButton } from '../va-button'\nimport { VaButtonGroup } from '../va-button-group'\n\nexport default defineComponent({\n  name: 'VaButtonToggle',\n  components: {\n    VaButtonGroup,\n    VaButton,\n  },\n  emits: ['update:modelValue'],\n  props: {\n    options: {\n      type: Array as PropType<ButtonOption[]>,\n      required: true,\n    },\n    color: { type: String, default: 'primary' },\n    textColor: { type: String, default: undefined },\n    activeButtonTextColor: { type: String },\n    modelValue: { type: [String, Number], default: '' },\n    outline: { type: Boolean, default: false },\n    flat: { type: Boolean, default: false },\n    rounded: { type: Boolean, default: true },\n    disabled: { type: Boolean, default: false },\n    size: {\n      type: String as PropType<'medium' | 'small' | 'large'>,\n      default: 'medium',\n      validator: (value: string) => ['medium', 'small', 'large'].includes(value),\n    },\n    toggleColor: { type: String, default: '' },\n    gradient: { type: Boolean, default: false },\n  },\n  setup (props, { emit }) {\n    const { getColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n\n    const isFlatOrOutline = computed(() => props.outline || props.flat)\n    const activeButtonColor = computed(() => {\n      if (props.toggleColor) {\n        return getColor(props.toggleColor)\n      } else {\n        return isFlatOrOutline.value ? colorComputed.value : shiftHSLAColor(colorComputed.value, { l: -6 })\n      }\n    })\n\n    const { textColorComputed: activeButtonTextColor } = useTextColor(activeButtonColor)\n\n    const isToggled = (value: any) => value === props.modelValue\n\n    const getButtonProps = (option: ButtonOption = {} as ButtonOption) => {\n      const iconsProps = {\n        icon: option.icon,\n        iconRight: option.iconRight,\n      }\n\n      if (!isToggled(option.value)) { return iconsProps }\n\n      return {\n        color: activeButtonColor.value,\n        textColor: props.activeButtonTextColor ?? activeButtonTextColor.value,\n        ...iconsProps,\n        ...(isFlatOrOutline.value && { outline: false, flat: false }),\n      }\n    }\n\n    const getButtonClass = (buttonValue: any) => ({ 'va-button--active': isToggled(buttonValue) })\n\n    const changeValue = (value: any) => emit('update:modelValue', value)\n\n    return {\n      getButtonProps,\n      getButtonClass,\n      changeValue,\n      isToggled,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-button-toggle {\n  .va-button {\n    &:focus,\n    &:hover {\n      box-shadow: none !important;\n    }\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport _VaButtonToggle from './VaButtonToggle.vue'\n\nexport const VaButtonToggle = withConfigTransport(_VaButtonToggle)\n\nexport * from './types'\n"],"names":["script","defineComponent","name","components","VaButtonGroup","VaButton","emits","props","options","type","Array","required","color","String","default","textColor","undefined","activeButtonTextColor","modelValue","Number","outline","Boolean","flat","rounded","disabled","size","validator","value","includes","toggleColor","gradient","setup","emit","getColor","useColors","colorComputed","computed","isFlatOrOutline","activeButtonColor","shiftHSLAColor","l","textColorComputed","useTextColor","isToggled","getButtonProps","option","iconsProps","icon","iconRight","_a","getButtonClass","buttonValue","changeValue","_hoisted_1","class","_openBlock","_createElementBlock","_createVNode","_component_va_button_group","_ctx","_Fragment","_renderList","_createBlock","_component_va_button","_mergeProps","key","onClick","$event","_createTextVNode","_toDisplayString","label","VaButtonToggle","withConfigTransport","_VaButtonToggle"],"mappings":"22BAqCA,IAAAA,EAAeC,EAAgB,CAC7BC,KAAM,iBACNC,WAAY,CACVC,cAAAA,EACAC,SAAAA,GAEFC,MAAO,CAAC,qBACRC,MAAO,CACLC,QAAS,CACPC,KAAMC,MACNC,UAAU,GAEZC,MAAO,CAAEH,KAAMI,OAAQC,QAAS,WAChCC,UAAW,CAAEN,KAAMI,OAAQC,aAASE,GACpCC,sBAAuB,CAAER,KAAMI,QAC/BK,WAAY,CAAET,KAAM,CAACI,OAAQM,QAASL,QAAS,IAC/CM,QAAS,CAAEX,KAAMY,QAASP,SAAS,GACnCQ,KAAM,CAAEb,KAAMY,QAASP,SAAS,GAChCS,QAAS,CAAEd,KAAMY,QAASP,SAAS,GACnCU,SAAU,CAAEf,KAAMY,QAASP,SAAS,GACpCW,KAAM,CACJhB,KAAMI,OACNC,QAAS,SACTY,UAAYC,GAAkB,CAAC,SAAU,QAAS,SAASC,SAASD,IAEtEE,YAAa,CAAEpB,KAAMI,OAAQC,QAAS,IACtCgB,SAAU,CAAErB,KAAMY,QAASP,SAAS,IAEtCiB,MAAOxB,GAAOyB,KAAEA,IACd,MAAMC,SAAEA,GAAaC,IACfC,EAAgBC,GAAS,IAAMH,EAAS1B,EAAMK,SAE9CyB,EAAkBD,GAAS,IAAM7B,EAAMa,SAAWb,EAAMe,OACxDgB,EAAoBF,GAAS,IAC7B7B,EAAMsB,YACDI,EAAS1B,EAAMsB,aAEfQ,EAAgBV,MAAQQ,EAAcR,MAAQY,EAAeJ,EAAcR,MAAO,CAAEa,GAAI,OAI3FC,kBAAmBxB,GAA0ByB,EAAaJ,GAE5DK,UAAahB,GAAeA,IAAUpB,EAAMW,WAsBlD,MAAO,CACL0B,eArBqB,CAACC,EAAuB,YAC7C,MAAMC,EAAa,CACjBC,KAAMF,EAAOE,KACbC,UAAWH,EAAOG,WAGpB,OAAKL,UAAUE,EAAOlB,OAEf,CACLf,MAAO0B,EAAkBX,MACzBZ,UAA0C,UAA/BR,EAAMU,6BAAyB,IAAAgC,EAAAA,EAAAhC,EAAsBU,SAC7DmB,KACCT,EAAgBV,OAAS,CAAEP,SAAS,EAAOE,MAAM,IANhBwB,GAgBvCI,eANsBC,IAAsB,CAAE,oBAAqBR,UAAUQ,KAO7EC,YALmBzB,GAAeK,EAAK,oBAAqBL,GAM5DgB,UAAAA,cCzGC,MAAAU,EAAA,CAAAC,MAAM,wGAAX,OAAAC,IAAAC,EAsBK,MAtBLH,EAsBK,CArBHI,EAoBiBC,EAAA,CAnBd9C,MAAO+C,EAAK/C,MACZG,UAAW4C,EAAS5C,UACpBQ,QAASoC,EAAOpC,QAChBH,QAASuC,EAAOvC,QAChBE,KAAMqC,EAAIrC,KACVQ,SAAU6B,EAAQ7B,sBAGjB,IAAwB,QAD1B0B,EAWWI,EAAA,KAAAC,EAVQF,EAAOnD,SAAjBqC,IADTU,IAAAO,EAWWC,EAXXC,EAWW,CATRC,IAAKpB,EAAOlB,MACZ,eAAcgC,EAAAhB,UAAUE,EAAOlB,OAC/B2B,MAAOK,EAAAT,eAAeL,EAAOlB,OAC7BH,SAAUmC,EAAQnC,SAClBC,KAAMkC,EAAIlC,MACHkC,EAAAf,eAAeC,GAAM,CAC5BqB,QAAOC,GAAAR,EAAAP,YAAYP,EAAOlB,qBAE3B,IAAiB,CAAdyC,EAAAC,EAAAxB,EAAOyB,oOCjBLC,EAAiBC,EAAoBC"}
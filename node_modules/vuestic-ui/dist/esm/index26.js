import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, renderSlot, createCommentVNode } from 'vue';
import './VaConfig.js';
import './global-config.js';
import './global-properties.js';

const prefixClass = 'va-divider';
var script = defineComponent({
    name: 'VaDivider',
    props: {
        vertical: { type: Boolean, default: false },
        dashed: { type: Boolean, default: false },
        inset: { type: Boolean, default: false },
        orientation: {
            type: String,
            default: 'center',
            validator: (value) => ['left', 'right', 'center'].includes(value),
        },
    },
    setup: (props, { slots }) => ({
        hasSlot: computed(() => !!slots.default),
        classComputed: computed(() => ({
            [`${prefixClass}--vertical`]: props.vertical,
            [`${prefixClass}--inset`]: props.inset,
            [`${prefixClass}--${props.orientation}`]: props.orientation && !props.vertical,
            [`${prefixClass}--dashed`]: props.dashed,
        })),
    }),
});

const _hoisted_1 = ["aria-orientation"];
const _hoisted_2 = {
  key: 0,
  class: "va-divider__text"
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("div", {
    role: "separator",
    class: normalizeClass(["va-divider", _ctx.classComputed]),
    "aria-orientation": _ctx.vertical ? 'vertical' : 'horizontal'
  }, [
    (_ctx.hasSlot && !_ctx.vertical)
      ? (openBlock(), createElementBlock("div", _hoisted_2, [
          renderSlot(_ctx.$slots, "default")
        ]))
      : createCommentVNode("v-if", true)
  ], 10 /* CLASS, PROPS */, _hoisted_1))
}

script.render = render;
script.__file = "src/components/va-divider/VaDivider.vue";

const VaDivider = withConfigTransport(script);

export { VaDivider };
//# sourceMappingURL=index26.js.map

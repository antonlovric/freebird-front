{"version":3,"file":"useTextColor.js","sources":["../../src/composables/useTextColor.ts"],"sourcesContent":["import { computed, getCurrentInstance, Ref, unref } from 'vue'\n\nimport { useColors } from './useColors'\n\ntype PropsType = {\n  textColor: string,\n  color?: string\n}\n\n/**\n * @param componentColor component color. By default `props.color`.\n * @param isTransparent if transparent will return component color as text color.\n * @returns Computed text color based on component's color if `props.textColor` if provided.\n */\nexport const useTextColor = (componentColor?: Ref<string> | undefined, isTransparent: boolean | Ref<boolean> = false) => {\n  const { props } = getCurrentInstance() as unknown as { props: PropsType }\n  const { getColor, getTextColor } = useColors()\n\n  const textColorComputed = computed(() => {\n    if (props.textColor) { return getColor(props.textColor) }\n\n    const componentColorHex = getColor(unref(componentColor) || props.color)\n    return unref(isTransparent) ? componentColorHex : getColor(getTextColor(componentColorHex))\n  })\n\n  return { textColorComputed }\n}\n"],"names":[],"mappings":";;;AASA;;;;AAIG;AACU,MAAA,YAAY,GAAG,CAAC,cAAwC,EAAE,aAAA,GAAwC,KAAK,KAAI;AACtH,IAAA,MAAM,EAAE,KAAK,EAAE,GAAG,kBAAkB,EAAqC,CAAA;IACzE,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,SAAS,EAAE,CAAA;AAE9C,IAAA,MAAM,iBAAiB,GAAG,QAAQ,CAAC,MAAK;QACtC,IAAI,KAAK,CAAC,SAAS,EAAE;AAAE,YAAA,OAAO,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAA;AAAE,SAAA;AAEzD,QAAA,MAAM,iBAAiB,GAAG,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,CAAA;AACxE,QAAA,OAAO,KAAK,CAAC,aAAa,CAAC,GAAG,iBAAiB,GAAG,QAAQ,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC,CAAA;AAC7F,KAAC,CAAC,CAAA;IAEF,OAAO,EAAE,iBAAiB,EAAE,CAAA;AAC9B;;;;"}
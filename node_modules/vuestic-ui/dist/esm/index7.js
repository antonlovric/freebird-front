import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, renderSlot, createTextVNode, toDisplayString } from 'vue';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import { u as useColors } from './useColors.js';
import { u as useTextColor } from './useTextColor.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';
import 'colortranslator';

var script = defineComponent({
    name: 'VaBadge',
    props: {
        color: { type: String, default: 'danger' },
        textColor: { type: String },
        text: { type: [String, Number], default: '' },
        overlap: { type: Boolean, default: false },
        multiLine: { type: Boolean, default: false },
        visibleEmpty: { type: Boolean, default: false },
        dot: { type: Boolean, default: false },
        transparent: { type: Boolean, default: false },
        left: { type: Boolean, default: false },
        bottom: { type: Boolean, default: false },
    },
    setup(props, { slots }) {
        const isEmpty = computed(() => !(props.text || props.visibleEmpty || props.dot || slots.text));
        const isFloating = computed(() => slots.default || props.dot);
        const badgeClass = computed(() => ({
            'va-badge--visible-empty': props.visibleEmpty,
            'va-badge--empty': isEmpty.value,
            'va-badge--dot': props.dot,
            'va-badge--multiLine': props.multiLine,
            'va-badge--floating': isFloating.value,
            'va-badge--left': props.left,
            'va-badge--bottom': props.bottom,
            'va-badge--overlap': props.overlap,
        }));
        const { getColor } = useColors();
        const { textColorComputed } = useTextColor();
        const colorComputed = computed(() => getColor(props.color));
        const badgeStyle = computed(() => ({
            color: textColorComputed.value,
            borderColor: colorComputed.value,
            backgroundColor: colorComputed.value,
            opacity: props.transparent ? 0.5 : 1,
        }));
        return { badgeClass, badgeStyle };
    },
});

const _hoisted_1 = { class: "va-badge__text" };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-badge", _ctx.badgeClass]),
    role: "alert"
  }, [
    createElementVNode("span", {
      class: "va-badge__text-wrapper",
      style: normalizeStyle(_ctx.badgeStyle)
    }, [
      createElementVNode("span", _hoisted_1, [
        renderSlot(_ctx.$slots, "text", {}, () => [
          createTextVNode(toDisplayString(_ctx.text), 1 /* TEXT */)
        ])
      ])
    ], 4 /* STYLE */),
    renderSlot(_ctx.$slots, "default")
  ], 2 /* CLASS */))
}

script.render = render;
script.__file = "src/components/va-badge/VaBadge.vue";

const VaBadge = withConfigTransport(script);

export { VaBadge };
//# sourceMappingURL=index7.js.map

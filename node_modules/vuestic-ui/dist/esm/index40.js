import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, shallowRef, ref, computed, onMounted, onBeforeUnmount, openBlock, createElementBlock, normalizeStyle, createElementVNode, renderSlot } from 'vue';
import { w as warn } from './utils.js';
import './VaConfig.js';
import './global-config.js';
import './global-properties.js';
import './global-utils.js';

var script = defineComponent({
    name: 'VaParallax',
    props: {
        target: { type: [Object, String] },
        src: { type: String, default: '', required: true },
        alt: { type: String, default: 'parallax' },
        height: { type: Number, default: 400 },
        reversed: { type: Boolean, default: false },
        speed: {
            type: Number,
            default: 0.5,
            validator: (value) => value >= 0 && value <= 1,
        },
    },
    setup(props) {
        const rootElement = shallowRef();
        const img = shallowRef();
        const elOffsetTop = ref(0);
        const parallax = ref(0);
        const parallaxDist = ref(0);
        const percentScrolled = ref(0);
        const scrollTop = ref(0);
        const windowHeight = ref(0);
        const windowBottom = ref(0);
        const isLoaded = ref(false);
        const computedWrapperStyles = computed(() => ({ height: props.height + 'px' }));
        const computedImgStyles = computed(() => ({
            display: 'block',
            transform: `translate(-50%, ${parallax.value}px)`,
            opacity: isLoaded.value ? 1 : 0,
            top: props.reversed ? 0 : 'auto',
        }));
        const targetElement = computed(() => {
            var _a;
            if (!props.target) {
                return getScrollableParent((_a = rootElement.value) === null || _a === void 0 ? void 0 : _a.parentElement);
            }
            if (props.target instanceof HTMLElement) { // there is a bug if to target passed ref
                return props.target;
            }
            const element = document.querySelector(props.target);
            if (element) {
                return element;
            }
            warn('VaParallax target prop got wrong selector. Target is null');
            return null;
        });
        const getScrollableParent = (element) => {
            if (!element) {
                return document.body;
            }
            if (element.scrollHeight > element.clientHeight) {
                return element;
            }
            return getScrollableParent(element.parentElement);
        };
        const imgHeight = computed(() => { var _a; return ((_a = img.value) === null || _a === void 0 ? void 0 : _a.naturalHeight) || 0; });
        const calcDimensions = () => {
            var _a, _b;
            const offset = ((_a = rootElement.value) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || { top: 0 };
            scrollTop.value = ((_b = targetElement.value) === null || _b === void 0 ? void 0 : _b.scrollTop) || 0;
            parallaxDist.value = imgHeight.value - props.height;
            elOffsetTop.value = offset.top + scrollTop.value;
            windowHeight.value = window.innerHeight;
            windowBottom.value = scrollTop.value + windowHeight.value;
        };
        const translate = () => {
            calcDimensions();
            percentScrolled.value = (windowBottom.value - elOffsetTop.value) / (props.height + windowHeight.value);
            parallax.value = Math.round(parallaxDist.value * percentScrolled.value) * props.speed;
            if (props.reversed) {
                parallax.value = -parallax.value;
            }
        };
        const addEventListeners = () => {
            var _a, _b;
            (_a = targetElement.value) === null || _a === void 0 ? void 0 : _a.addEventListener('scroll', translate);
            (_b = targetElement.value) === null || _b === void 0 ? void 0 : _b.addEventListener('resize', translate);
        };
        const removeEventListeners = () => {
            var _a, _b;
            (_a = targetElement.value) === null || _a === void 0 ? void 0 : _a.removeEventListener('scroll', translate);
            (_b = targetElement.value) === null || _b === void 0 ? void 0 : _b.removeEventListener('resize', translate);
        };
        const initImage = () => {
            var _a, _b;
            if ((_a = img.value) === null || _a === void 0 ? void 0 : _a.complete) {
                translate();
                addEventListeners();
            }
            else {
                (_b = img.value) === null || _b === void 0 ? void 0 : _b.addEventListener('load', () => {
                    translate();
                    addEventListeners();
                }, false);
            }
            isLoaded.value = true;
        };
        onMounted(initImage);
        onBeforeUnmount(removeEventListeners);
        return {
            img,
            rootElement,
            computedWrapperStyles,
            computedImgStyles,
        };
    },
});

const _hoisted_1 = { class: "va-parallax__image-container" };
const _hoisted_2 = ["src", "alt"];
const _hoisted_3 = { class: "va-parallax__item-container" };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("div", {
    ref: "rootElement",
    class: "va-parallax",
    style: normalizeStyle(_ctx.computedWrapperStyles)
  }, [
    createElementVNode("div", _hoisted_1, [
      createElementVNode("img", {
        ref: "img",
        class: "va-parallax__image",
        src: _ctx.$props.src,
        alt: _ctx.$props.alt,
        style: normalizeStyle(_ctx.computedImgStyles)
      }, null, 12 /* STYLE, PROPS */, _hoisted_2)
    ]),
    createElementVNode("div", _hoisted_3, [
      renderSlot(_ctx.$slots, "default")
    ])
  ], 4 /* STYLE */))
}

script.render = render;
script.__file = "src/components/va-parallax/VaParallax.vue";

const VaParallax = withConfigTransport(script);

export { VaParallax };
//# sourceMappingURL=index40.js.map

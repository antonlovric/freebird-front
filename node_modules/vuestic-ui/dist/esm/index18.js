import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, normalizeStyle, withKeys, createElementVNode } from 'vue';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import { u as useColors } from './useColors.js';
import { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from './useStateful.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';
import 'colortranslator';

var script = defineComponent({
    name: 'VaColorIndicator',
    emits: useStatefulEmits,
    props: {
        ...useStatefulProps,
        modelValue: { type: Boolean, default: null },
        color: { type: String, default: '' },
        square: { type: Boolean, default: false },
    },
    setup(props, { emit }) {
        const { valueComputed } = useStateful(props, emit);
        const { getColor } = useColors();
        const colorComputed = computed(() => getColor(props.color));
        const computedStyle = computed(() => ({
            borderRadius: props.square ? '0px' : '50%',
            backgroundColor: colorComputed.value,
        }));
        const computedClass = computed(() => ({
            'va-color-indicator--selected': valueComputed.value,
            'va-color-indicator--hoverable': valueComputed.value !== undefined,
        }));
        const toggleModelValue = () => { valueComputed.value = !valueComputed.value; };
        return {
            valueComputed,
            computedStyle,
            computedClass,
            toggleModelValue,
        };
    },
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-color-indicator", _ctx.computedClass]),
    style: normalizeStyle(_ctx.computedStyle),
    onClick: _cache[0] || (_cache[0] = (...args) => (_ctx.toggleModelValue && _ctx.toggleModelValue(...args))),
    onKeydown: [
      _cache[1] || (_cache[1] = withKeys((...args) => (_ctx.toggleModelValue && _ctx.toggleModelValue(...args)), ["enter"])),
      _cache[2] || (_cache[2] = withKeys((...args) => (_ctx.toggleModelValue && _ctx.toggleModelValue(...args)), ["space"]))
    ]
  }, [
    createElementVNode("div", {
      class: "va-color-indicator__core",
      style: normalizeStyle(_ctx.computedStyle)
    }, null, 4 /* STYLE */)
  ], 38 /* CLASS, STYLE, HYDRATE_EVENTS */))
}

script.render = render;
script.__file = "src/components/va-color-indicator/VaColorIndicator.vue";

const VaColorIndicator = withConfigTransport(script);

export { VaColorIndicator };
//# sourceMappingURL=index18.js.map

import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, ref, provide, nextTick, openBlock, createElementBlock, renderSlot, inject, computed, onMounted, onBeforeUnmount, resolveComponent, normalizeClass, createCommentVNode, createVNode, createElementVNode, normalizeStyle, watch, toDisplayString } from 'vue';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import { u as useColors } from './useColors.js';
import { VaIcon } from './index31.js';
import { s as script$4 } from './VaIcon.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';
import 'colortranslator';
import './useSize.js';

const TreeViewKey = Symbol('TreeView');
const TreeCategoryKey = Symbol('TreeCategory');
const TreeNodeKey = Symbol('TreeNode');

var script$3 = defineComponent({
    name: 'VaTreeView',
    props: {
        color: {
            type: String,
            default: '',
        },
    },
    setup: (props) => {
        const categories = ref([]);
        const collapse = () => {
            nextTick(() => {
                categories.value.forEach((child) => {
                    child.collapse();
                });
            });
        };
        const expand = () => {
            nextTick(() => {
                categories.value.forEach((child) => {
                    child.expand();
                });
            });
        };
        const onChildMounted = (category) => {
            categories.value.push(category);
        };
        const onChildUnmounted = (removableCategory) => {
            categories.value = categories.value.filter((category) => category !== removableCategory);
        };
        const treeView = {
            color: props.color,
            onChildMounted,
            onChildUnmounted,
        };
        provide(TreeViewKey, treeView);
        return {
            collapse,
            expand,
            ...useColors(),
        };
    },
});

const _hoisted_1$2 = { class: "va-tree-view" };

function render$3(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("div", _hoisted_1$2, [
    renderSlot(_ctx.$slots, "default")
  ]))
}

script$3.render = render$3;
script$3.__file = "src/components/va-tree-view/VaTreeView.vue";

var script$2 = defineComponent({
    name: 'VaTreeNode',
    components: { VaIcon },
    props: {
        highlighted: {
            type: Boolean,
            default: false,
        },
        icon: {
            type: String,
            default: '',
        },
        iconRight: {
            type: String,
            default: '',
        },
        color: {
            type: String,
            default: 'primary',
        },
    },
    setup(props) {
        const { getColor } = useColors();
        const treeCategory = inject(TreeCategoryKey, {
            onChildMounted: (value) => undefined,
            onChildUnmounted: (value) => undefined,
        });
        provide(TreeNodeKey, {
            props: computed(() => props),
        });
        onMounted(() => treeCategory && treeCategory.onChildMounted(TreeNodeKey));
        onBeforeUnmount(() => treeCategory && treeCategory.onChildUnmounted(TreeNodeKey));
        return {
            treeCategory,
            getColor,
        };
    },
});

const _hoisted_1$1 = {
  key: 0,
  class: "va-tree-node__checkbox"
};
const _hoisted_2$1 = {
  key: 1,
  class: "va-tree-node__icon"
};
const _hoisted_3$1 = { class: "va-tree-node__label" };
const _hoisted_4$1 = {
  key: 2,
  class: "va-tree-node__icon-right",
  size: 24
};

function render$2(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");

  return (openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-tree-node", { 'va-tree-node--highlighted': _ctx.$props.highlighted }])
  }, [
    (_ctx.$slots.checkbox)
      ? (openBlock(), createElementBlock("div", _hoisted_1$1, [
          renderSlot(_ctx.$slots, "checkbox")
        ]))
      : createCommentVNode("v-if", true),
    (_ctx.$props.icon)
      ? (openBlock(), createElementBlock("div", _hoisted_2$1, [
          createVNode(_component_va_icon, {
            name: _ctx.$props.icon,
            color: _ctx.getColor('info'),
            size: 24
          }, null, 8 /* PROPS */, ["name", "color"])
        ]))
      : createCommentVNode("v-if", true),
    createElementVNode("div", _hoisted_3$1, [
      renderSlot(_ctx.$slots, "default")
    ]),
    (_ctx.$props.iconRight)
      ? (openBlock(), createElementBlock("div", _hoisted_4$1, [
          createVNode(_component_va_icon, {
            name: _ctx.$props.iconRight,
            color: _ctx.getColor('info')
          }, null, 8 /* PROPS */, ["name", "color"])
        ]))
      : createCommentVNode("v-if", true)
  ], 2 /* CLASS */))
}

script$2.render = render$2;
script$2.__file = "src/components/va-tree-view/VaTreeNode/VaTreeNode.vue";

const VaTreeNode = withConfigTransport(script$2);

var script$1 = defineComponent({
    name: 'SquareWithIcon',
    components: { VaIcon },
    props: {
        icon: {
            type: String,
            default: '',
            required: true,
        },
        color: {
            type: String,
            default: 'primary',
        },
    },
    setup(props) {
        const { getColor } = useColors();
        const colorComputed = computed(() => getColor(props.color));
        return {
            colorComputed,
        };
    },
});

function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");

  return (openBlock(), createElementBlock("div", {
    class: "square-with-icon",
    style: normalizeStyle({ backgroundColor: _ctx.colorComputed })
  }, [
    createVNode(_component_va_icon, {
      name: _ctx.$props.icon
    }, null, 8 /* PROPS */, ["name"])
  ], 4 /* STYLE */))
}

script$1.render = render$1;
script$1.__file = "src/components/va-tree-view/SquareWithIcon/SquareWithIcon.vue";

var script = defineComponent({
    name: 'VaTreeCategory',
    components: {
        SquareWithIcon: script$1,
        VaIcon: script$4,
    },
    props: {
        label: {
            type: [String, Number],
            default: '',
        },
        isOpen: {
            type: Boolean,
            default: false,
        },
        icon: {
            type: String,
            default: '',
        },
        color: {
            type: String,
            default: 'primary',
        },
    },
    setup: (props) => {
        const { getColor } = useColors();
        const colorComputed = computed(() => getColor(props.color));
        const nodes = ref([]);
        const isOpenCached = ref(false);
        const onChildMounted = (node) => {
            nodes.value.push(node);
        };
        const onChildUnmounted = (removableNode) => {
            nodes.value = nodes.value.filter((node) => node !== removableNode);
        };
        const treeView = inject(TreeViewKey, {
            onChildMounted: (value) => undefined,
            onChildUnmounted: (value) => undefined,
        });
        const collapse = () => {
            isOpenCached.value = false;
            nextTick(() => {
                nodes.value.forEach((child) => {
                    if (child.$options.name === 'va-tree-category') {
                        child.collapse();
                    }
                });
            });
        };
        const expand = () => {
            isOpenCached.value = true;
            nextTick(() => {
                nodes.value.forEach((child) => {
                    var _a;
                    (_a = child.expand) === null || _a === void 0 ? void 0 : _a.call(child);
                });
            });
        };
        const toggle = (e) => {
            if (!e.target.classList.contains('va-checkbox__input')) {
                isOpenCached.value = !isOpenCached.value;
            }
        };
        watch(() => props.isOpen, (isOpen) => {
            isOpenCached.value = isOpen;
        }, { immediate: true });
        const treeCategory = {
            treeView,
            nodes: nodes.value,
            isOpenCached: isOpenCached.value,
            onChildMounted,
            onChildUnmounted,
            collapse,
            expand,
            toggle,
        };
        provide(TreeCategoryKey, treeCategory);
        onMounted(() => treeView === null || treeView === void 0 ? void 0 : treeView.onChildMounted(treeCategory));
        onBeforeUnmount(() => treeView === null || treeView === void 0 ? void 0 : treeView.onChildUnmounted(treeCategory));
        return {
            treeCategory,
            treeView,
            nodes,
            isOpenCached,
            collapse,
            expand,
            toggle,
            getColor,
            colorComputed,
        };
    },
});

const _hoisted_1 = { class: "va-tree-category" };
const _hoisted_2 = { class: "va-tree-category__header-switcher" };
const _hoisted_3 = {
  key: 0,
  class: "va-tree-category__header-checkbox"
};
const _hoisted_4 = {
  key: 1,
  class: "va-tree-category__header-icon"
};
const _hoisted_5 = { class: "va-tree-category__header-label" };
const _hoisted_6 = {
  key: 0,
  class: "va-tree-category__list-container"
};
const _hoisted_7 = { class: "va-tree-category__list-internal-container" };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_square_with_icon = resolveComponent("square-with-icon");
  const _component_va_icon = resolveComponent("va-icon");

  return (openBlock(), createElementBlock("div", _hoisted_1, [
    createElementVNode("div", {
      class: "va-tree-category__header",
      onClick: _cache[0] || (_cache[0] = (...args) => (_ctx.toggle && _ctx.toggle(...args)))
    }, [
      createElementVNode("div", _hoisted_2, [
        createVNode(_component_square_with_icon, {
          icon: _ctx.isOpenCached ? 'remove' : 'add',
          color: _ctx.colorComputed
        }, null, 8 /* PROPS */, ["icon", "color"])
      ]),
      (_ctx.$slots.checkbox)
        ? (openBlock(), createElementBlock("div", _hoisted_3, [
            renderSlot(_ctx.$slots, "checkbox")
          ]))
        : createCommentVNode("v-if", true),
      (_ctx.$props.icon)
        ? (openBlock(), createElementBlock("div", _hoisted_4, [
            createVNode(_component_va_icon, {
              name: _ctx.$props.icon,
              color: _ctx.getColor('info')
            }, null, 8 /* PROPS */, ["name", "color"])
          ]))
        : createCommentVNode("v-if", true),
      createElementVNode("div", _hoisted_5, toDisplayString(_ctx.$props.label), 1 /* TEXT */)
    ]),
    (_ctx.isOpenCached)
      ? (openBlock(), createElementBlock("div", _hoisted_6, [
          createElementVNode("div", _hoisted_7, [
            renderSlot(_ctx.$slots, "default")
          ])
        ]))
      : createCommentVNode("v-if", true)
  ]))
}

script.render = render;
script.__file = "src/components/va-tree-view/VaTreeCategory/VaTreeCategory.vue";

const VaTreeCategory = withConfigTransport(script);

const VaTreeView = withConfigTransport(script$3);

export { VaTreeCategory, VaTreeNode, VaTreeView };
//# sourceMappingURL=index54.js.map

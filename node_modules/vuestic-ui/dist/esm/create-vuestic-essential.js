import { defineVuesticPlugin } from './index55.js';
import { G as GlobalConfigPlugin, C as ColorConfigPlugin } from './index65.js';
import { usePlugin } from './use-plugin.js';
import './global-config.js';
import 'vue';
import './global-properties.js';
import './ssr-utils.js';

const ESSENTIAL_PLUGIN_NAMES = ['GlobalConfigPlugin', 'ColorConfigPlugin'];
/**
 * Register only essential Vuestic Plugins.
 *
 * This plugin will register globally only provided component and plugins in options.
 * @notice this plugin will not bundle all vuestic conponents and plugins
 *
 * @example
 * ```ts
 * createVuesticEssential({
 *   plugins: [VaToastPlugin],  // or [VaToastPlugin({ makeLifeEasier: true })],
 *   components: { VaButton, VaInput },
 *   config: { VaButton: { color: '#f0f' } }
 * })
 * ```
 */
const createVuesticEssential = defineVuesticPlugin((options = {}) => ({
    install(app) {
        const { config, components, plugins } = options;
        /** Register essential plugins before any other */
        usePlugin(app, (plugins === null || plugins === void 0 ? void 0 : plugins.GlobalConfigPlugin) || GlobalConfigPlugin, config);
        usePlugin(app, (plugins === null || plugins === void 0 ? void 0 : plugins.ColorConfigPlugin) || ColorConfigPlugin);
        if (plugins) {
            Object.entries(plugins).forEach(([name, plugin]) => {
                if (ESSENTIAL_PLUGIN_NAMES.includes(name)) {
                    return;
                }
                usePlugin(app, plugin);
            });
        }
        if (components) {
            Object.entries(components).forEach(([name, component]) => {
                app.component(name, component);
            });
        }
    },
}));

export { createVuesticEssential };
//# sourceMappingURL=create-vuestic-essential.js.map

{"version":3,"file":"child-props.js","sources":["../../src/utils/resolve-component-props.ts","../../src/utils/child-props.ts"],"sourcesContent":["import { ComponentOptions, DefineComponent } from 'vue'\n\nfunction normalizeProps (props: any) {\n  switch (true) {\n    case Array.isArray(props):\n      return props.reduce((acc: Record<string, unknown>, prop: string) => ({ ...acc, [prop]: null }), {})\n    case typeof props === 'object' && props !== null:\n      return props\n    default:\n      return {}\n  }\n}\n\nfunction mergeProps (to: Record<string, any>, from: Record<string, any>, optionsType = 'props') {\n  const { mixins, extends: extendsOptions } = from\n\n  extendsOptions && mergeProps(to, extendsOptions, optionsType)\n  mixins && mixins.forEach((m: any) => mergeProps(to, m, optionsType))\n\n  const props = normalizeProps(from[optionsType])\n\n  for (const key in props) {\n    to[key] = props[key]\n  }\n}\n\nfunction getComponentOptions (component: DefineComponent): ComponentOptions {\n  if (component.options) {\n    return component.options\n  }\n\n  if (component.__vccOpts || component.__b) {\n    return { ...component.__vccOpts, ...component.__b }\n  }\n\n  return component\n}\n\nfunction resolveProps (options: any, optionsType = 'props') {\n  const mixins = options.mixins ?? []\n  const extendsOptions = options.extends ?? []\n  const result: Record<string, any> = {}\n\n  mergeProps(result, extendsOptions, optionsType)\n\n  for (let i = 0; i < mixins.length; i++) {\n    mergeProps(result, mixins[i], optionsType)\n  }\n\n  Object.assign(result, normalizeProps(options[optionsType]))\n\n  return result\n}\n\nexport const getComponentProps = (component: DefineComponent) => {\n  return resolveProps(getComponentOptions(component))\n}\n","import { ComponentOptionsBase, PropType, computed, ExtractPropTypes } from 'vue'\nimport { getComponentProps } from './resolve-component-props'\n\n/**\n * Accepts parent component props and return value only for child component props.\n *\n * Used to proxy child component props from parent.\n */\nexport const filterComponentProps = <\n  ChildProps extends Record<string, unknown>,\n  Props extends Record<string, unknown>,\n  Result extends ExtractPropTypes<ChildProps>\n>(propsValues: Props, childProps: ChildProps) => {\n  return computed(() => {\n    return Object\n      .keys(childProps)\n      .reduce((acc, propName: string) => {\n        (acc as any)[propName] = propsValues[propName]\n        return acc\n      }, {} as Result)\n  })\n}\n\n// Define component\ndeclare type DefineComponentOptions = ComponentOptionsBase<any, any, any, any, any, any, any, any>\n\n// ExtractOptionProp taken from Vue3 source code\ndeclare type ExtractDefineComponentOptionProp<T> = T extends ComponentOptionsBase<infer P, any, any, any, any, any, any, any> ? unknown extends P ? {} : P : {};\n// Remove useless readonly and nullable key here:\n// -readonly removes readonly\n// -? removes undefined from key, so we can be sure that prop exists and should have type.\ndeclare type ExtractDefineComponentPropsType<T> = {\n  -readonly [K in keyof ExtractDefineComponentOptionProp<T>]-?: {\n    type: PropType<ExtractDefineComponentOptionProp<T>[K]>,\n    required: undefined extends ExtractDefineComponentOptionProp<T>[K] ? false : true,\n    default: undefined extends ExtractDefineComponentOptionProp<T>[K] ? undefined : ExtractDefineComponentOptionProp<T>[K],\n  }\n}\n\n// Class component\ndeclare type ClassComponent = { prototype: { $props: unknown }}\n\ndeclare type ExtractClassComponentOptionProp<T extends ClassComponent> = T['prototype']['$props']\n\ndeclare type ExtractClassComponentPropsType<T extends ClassComponent> = {\n  -readonly [K in keyof ExtractClassComponentOptionProp<T>]-?: {\n    type: PropType<ExtractClassComponentOptionProp<T>[K]>,\n    required: undefined extends ExtractClassComponentOptionProp<T>[K] ? false: true,\n  }\n}\n\ndeclare type ExtractComponentProps<T extends ClassComponent | DefineComponentOptions> = T extends DefineComponentOptions ? ExtractDefineComponentPropsType<T> :\n  T extends ClassComponent ? ExtractClassComponentPropsType<T> : never\n\n/**\n * Works only with defineComponent function.\n * @notion Be aware that `withConfigTransport` you will lose prop types\n */\nexport function extractComponentProps<T> (component: T, ignoreProps?: string[]): ExtractComponentProps<T> {\n  const props: any = getComponentProps(component as any)\n\n  if (ignoreProps) {\n    return Object\n      .keys(props)\n      .reduce<Record<string, unknown>>((acc, propName) => {\n        if (ignoreProps.includes(propName)) { return acc }\n\n        if (props[propName] === undefined) { return acc }\n\n        acc[propName] = typeof props[propName] === 'string' ? {} : props[propName]\n\n        return acc\n      }, {}) as ExtractComponentProps<T>\n  }\n\n  return props\n}\n\ndeclare type ExtractEmitsType<T> = T extends ComponentOptionsBase<any, any, any, any, any, any, any, infer E> ? E: []\n\nexport function extractComponentEmits<T> (component: T): ExtractEmitsType<T> {\n  return [...new Set((component as any).emits)] as any\n}\n"],"names":[],"mappings":"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"}
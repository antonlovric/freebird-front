import { provide, computed, onMounted, watch, inject, ref, onBeforeUnmount } from 'vue';

const AccordionServiceKey = Symbol('AccordionService');
/**
 * @param props
 * @param state array of states of all accordion items */
const useAccordion = (props, state) => {
    /** @notice items are reactive because they have reactive `state` inside */
    let items = [];
    const onItemMounted = (item) => { items.push(item); };
    const onItemUnmounted = (item) => { items = items.filter((i) => i !== item); };
    const onItemChanged = (changedItem) => {
        state.value = items
            .map((item) => {
            if (item === changedItem) {
                return item.state.value;
            }
            if (!props.multiply) {
                item.state.value = false;
            }
            return item.state.value;
        });
    };
    provide(AccordionServiceKey, {
        isInsideAccordion: true,
        onItemMounted,
        onItemUnmounted,
        onItemChanged,
        props: computed(() => props),
    });
    const updateItemStates = () => {
        items.forEach((item, index) => {
            item.state.value = state.value[index];
        });
    };
    onMounted(updateItemStates);
    watch(state, updateItemStates);
    return { items };
};
/**
 * Hook used in items that should react on VaAccordion changes
 * @param state shows if accordion item is open
 */
const useAccordionItem = (state) => {
    const accordion = inject(AccordionServiceKey, {
        props: ref({ inset: undefined, popout: undefined }),
        onItemChanged: () => undefined,
        onItemMounted: () => undefined,
        onItemUnmounted: () => undefined,
    });
    const item = { state };
    onMounted(() => accordion.onItemMounted(item));
    onBeforeUnmount(() => accordion.onItemUnmounted(item));
    return {
        accordionProps: accordion.props,
        toggle: () => {
            /** Toggle collapse value and notify accordion about it */
            state.value = !state.value;
            accordion.onItemChanged(item);
        },
    };
};

export { useAccordionItem as a, useAccordion as u };
//# sourceMappingURL=useAccordion.js.map

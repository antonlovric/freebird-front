import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, shallowRef, computed, resolveComponent, openBlock, createElementBlock, createVNode, withKeys, withDirectives, createElementVNode, vModelText } from 'vue';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import 'colortranslator';
import { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from './useStateful.js';
import { VaColorIndicator } from './index18.js';
import { VaInput } from './index35.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';
import './useColors.js';
import './VaInput.js';
import './VaIcon.js';
import './useSize.js';
import './child-props.js';
import './useFocus.js';
import './useEmitProxy.js';
import './useCaptureEvent.js';
import './useForm.js';
import './useBem.js';
import './_createCompounder.js';
import './index67.js';
import './useSyncProp.js';
import './consts.js';
import 'cleave.js';
import './VaInputWrapper.js';
import './useCSSVariables.js';
import './index31.js';
import './VaMessageListWrapper.js';

var script = defineComponent({
    name: 'VaColorInput',
    components: {
        VaInput,
        VaColorIndicator,
    },
    emits: useStatefulEmits,
    props: {
        ...useStatefulProps,
        modelValue: { type: String, default: null },
        disabled: { type: Boolean, default: false },
        indicator: {
            type: String,
            default: 'dot',
            validator: (value) => ['dot', 'square'].includes(value),
        },
    },
    setup: (props, { emit }) => {
        const colorPicker = shallowRef();
        const { valueComputed } = useStateful(props, emit);
        const callPickerDialog = () => { var _a; return !props.disabled && ((_a = colorPicker.value) === null || _a === void 0 ? void 0 : _a.click()); };
        const tabIndexComputed = computed(() => props.disabled ? -1 : 0);
        return {
            valueComputed,
            callPickerDialog,
            colorPicker,
            tabIndexComputed,
        };
    },
});

const _hoisted_1 = { class: "va-color-input" };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_color_indicator = resolveComponent("va-color-indicator");
  const _component_va_input = resolveComponent("va-input");

  return (openBlock(), createElementBlock("div", _hoisted_1, [
    createVNode(_component_va_color_indicator, {
      class: "va-color-input__dot",
      role: "button",
      "aria-label": "open color picker",
      "aria-disabled": _ctx.$props.disabled,
      tabindex: _ctx.tabIndexComputed,
      color: _ctx.valueComputed,
      indicator: _ctx.$props.indicator,
      onClick: _ctx.callPickerDialog,
      onKeydown: [
        withKeys(_ctx.callPickerDialog, ["space"]),
        withKeys(_ctx.callPickerDialog, ["enter"])
      ]
    }, null, 8 /* PROPS */, ["aria-disabled", "tabindex", "color", "indicator", "onClick", "onKeydown"]),
    createVNode(_component_va_input, {
      class: "va-color-input__input",
      placeholder: "input color",
      modelValue: _ctx.valueComputed,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => ((_ctx.valueComputed) = $event)),
      tabindex: _ctx.tabIndexComputed,
      disabled: _ctx.$props.disabled
    }, null, 8 /* PROPS */, ["modelValue", "tabindex", "disabled"]),
    withDirectives(createElementVNode("input", {
      ref: "colorPicker",
      type: "color",
      class: "visually-hidden",
      "aria-hidden": "true",
      tabindex: "-1",
      "onUpdate:modelValue": _cache[1] || (_cache[1] = $event => ((_ctx.valueComputed) = $event))
    }, null, 512 /* NEED_PATCH */), [
      [vModelText, _ctx.valueComputed]
    ])
  ]))
}

script.render = render;
script.__file = "src/components/va-color-input/VaColorInput.vue";

const VaColorInput = withConfigTransport(script);

export { VaColorInput };
//# sourceMappingURL=index19.js.map

import { b as getValueByKey } from './utils.js';

const useSelectableListProps = {
    options: { type: Array, default: () => [] },
    textBy: { type: [String, Function], default: 'text' },
    valueBy: { type: [String, Function], default: '' },
    trackBy: { type: [String, Function], default: 'value' },
    disabledBy: { type: [String, Function], default: 'disabled' },
    groupBy: { type: [String, Function], default: 'group' },
};
function useSelectableList(props) {
    const isStringOrNumber = (option) => {
        const typeOfOption = typeof option;
        return typeOfOption === 'string' || typeOfOption === 'number';
    };
    const getOptionProperty = (option, selector) => {
        return !selector || isStringOrNumber(option)
            ? option
            : getValueByKey(option, selector);
    };
    const getValue = (option) => getOptionProperty(option, props.valueBy);
    const getOptionByValue = (value) => {
        if (!props.valueBy) {
            return value;
        }
        return props.options.find((option) => value === getValue(option)) || value;
    };
    const getText = (option) => getOptionProperty(option, props.textBy);
    const getDisabled = (option) => getValueByKey(option, props.disabledBy);
    const getTrackBy = (option) => getOptionProperty(option, props.trackBy);
    const getGroupBy = (option) => getOptionProperty(option, props.groupBy);
    return {
        getValue,
        getOptionByValue,
        getText,
        getDisabled,
        getTrackBy,
        getGroupBy,
    };
}

export { useSelectableList as a, useSelectableListProps as u };
//# sourceMappingURL=useSelectableList.js.map

import { computed, defineComponent, toRefs, inject, provide } from 'vue';

/**
 * We need another key to provide injected value.
 */
const LocalConfigKey = Symbol('LocalConfigKey');
const CONFIGS_DEFAULT = computed(() => []);
function useLocalConfig() {
    return inject(LocalConfigKey, CONFIGS_DEFAULT);
}
var VaConfig = defineComponent({
    name: 'VaConfig',
    props: {
        components: { type: Object, default: () => ({}) },
    },
    setup(props) {
        const { components } = toRefs(props);
        const prevChain = useLocalConfig();
        // We want it to be an array and not a merged object for optimization purposes
        const nextChain = computed(() => [...prevChain.value, components.value]);
        provide(LocalConfigKey, nextChain);
        return {};
    },
    render() {
        return this.$slots.default ? this.$slots.default() : null;
    },
});

export { VaConfig as V, useLocalConfig as u };
//# sourceMappingURL=VaConfig.js.map

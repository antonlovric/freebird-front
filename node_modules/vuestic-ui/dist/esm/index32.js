import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, ref, computed, watch, openBlock, createElementBlock, renderSlot, createCommentVNode, createElementVNode, normalizeStyle, withDirectives, vShow } from 'vue';
import './VaConfig.js';
import './global-config.js';
import './global-properties.js';

var script = defineComponent({
    name: 'VaImage',
    emits: ['loaded', 'error'],
    props: {
        ratio: { type: Number, default: 1 },
        contain: { type: Boolean, default: false },
        src: { type: String, required: true },
        alt: { type: String, default: '' },
    },
    setup(props, { emit }) {
        const loading = ref(true);
        const loadingError = ref(false);
        const imageStyles = computed(() => ({
            objectFit: props.contain ? 'contain' : 'cover',
        }));
        const paddingStyles = computed(() => ({
            paddingBottom: `${1 / props.ratio * 100}%`,
        }));
        const handleLoad = () => {
            loading.value = false;
            emit('loaded', props.src);
        };
        const handleError = (err) => {
            loadingError.value = true;
            loading.value = false;
            emit('error', err);
        };
        watch(() => props.src, () => {
            loading.value = true;
            loadingError.value = false;
        });
        return {
            loading,
            loadingError,
            imageStyles,
            paddingStyles,
            handleLoad,
            handleError,
        };
    },
});

const _hoisted_1 = {
  class: "va-image",
  "aria-live": "polite"
};
const _hoisted_2 = {
  key: 0,
  class: "va-image__error"
};
const _hoisted_3 = { class: "va-image__img" };
const _hoisted_4 = ["src", "alt"];
const _hoisted_5 = { class: "va-image__overlay" };
const _hoisted_6 = {
  key: 1,
  class: "va-image__loader"
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("div", _hoisted_1, [
    (_ctx.loadingError)
      ? (openBlock(), createElementBlock("div", _hoisted_2, [
          renderSlot(_ctx.$slots, "error")
        ]))
      : createCommentVNode("v-if", true),
    createElementVNode("div", {
      style: normalizeStyle(_ctx.paddingStyles)
    }, null, 4 /* STYLE */),
    withDirectives(createElementVNode("div", _hoisted_3, [
      createElementVNode("img", {
        style: normalizeStyle(_ctx.imageStyles),
        src: _ctx.$props.src,
        alt: _ctx.$props.alt,
        onError: _cache[0] || (_cache[0] = (...args) => (_ctx.handleError && _ctx.handleError(...args))),
        onLoad: _cache[1] || (_cache[1] = (...args) => (_ctx.handleLoad && _ctx.handleLoad(...args)))
      }, null, 44 /* STYLE, PROPS, HYDRATE_EVENTS */, _hoisted_4)
    ], 512 /* NEED_PATCH */), [
      [vShow, !_ctx.loadingError && !_ctx.loading]
    ]),
    createElementVNode("div", _hoisted_5, [
      renderSlot(_ctx.$slots, "default")
    ]),
    (_ctx.loading)
      ? (openBlock(), createElementBlock("div", _hoisted_6, [
          renderSlot(_ctx.$slots, "loader")
        ]))
      : createCommentVNode("v-if", true)
  ]))
}

script.render = render;
script.__file = "src/components/va-image/VaImage.vue";

const VaImage = withConfigTransport(script);

export { VaImage };
//# sourceMappingURL=index32.js.map

import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createVNode, withCtx, renderSlot } from 'vue';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import { u as useColors } from './useColors.js';
import { u as useTextColor } from './useTextColor.js';
import { V as VaConfig } from './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';
import 'colortranslator';

var script = defineComponent({
    name: 'VaButtonGroup',
    components: { VaConfig },
    props: {
        color: { type: String, default: 'primary' },
        gradient: { type: Boolean, default: undefined },
        textColor: { type: String, default: undefined },
        rounded: { type: Boolean, default: true },
        outline: { type: Boolean, default: false },
        flat: { type: Boolean, default: false },
        size: {
            type: String,
            default: 'medium',
            validator: (value) => ['medium', 'small', 'large'].includes(value),
        },
    },
    setup(props) {
        const { getColor, getGradientBackground } = useColors();
        const colorComputed = computed(() => getColor(props.color));
        const isTransparentBackground = computed(() => Boolean(props.outline || props.flat));
        const { textColorComputed } = useTextColor(colorComputed, isTransparentBackground);
        const computedBackground = computed(() => {
            if (props.outline || props.flat) {
                return '';
            }
            return props.gradient ? getGradientBackground(colorComputed.value) : colorComputed.value;
        });
        const computedStyle = computed(() => {
            const backgroundProperty = props.gradient ? 'background-image' : 'background';
            return {
                [backgroundProperty]: computedBackground.value,
                color: textColorComputed.value,
            };
        });
        const buttonConfig = computed(() => ({
            VaButton: {
                ...props,
                color: props.gradient ? '#00000000' : props.color,
                textColor: textColorComputed.value,
            },
        }));
        const computedClass = computed(() => ({ 'va-button-group_square': !props.rounded }));
        return {
            buttonConfig,
            computedStyle,
            computedClass,
        };
    },
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_config = resolveComponent("va-config");

  return (openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-button-group", _ctx.computedClass]),
    style: normalizeStyle(_ctx.computedStyle)
  }, [
    createVNode(_component_va_config, { components: _ctx.buttonConfig }, {
      default: withCtx(() => [
        renderSlot(_ctx.$slots, "default")
      ]),
      _: 3 /* FORWARDED */
    }, 8 /* PROPS */, ["components"])
  ], 6 /* CLASS, STYLE */))
}

script.render = render;
script.__file = "src/components/va-button-group/VaButtonGroup.vue";

const VaButtonGroup = withConfigTransport(script);

export { VaButtonGroup };
//# sourceMappingURL=index10.js.map

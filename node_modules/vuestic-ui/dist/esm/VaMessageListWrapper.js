import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, renderSlot, createVNode } from 'vue';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import 'colortranslator';
import { V as VaMessageList, u as useValidationProps } from './index67.js';

var script = defineComponent({
    name: 'VaMessageListWrapper',
    components: { VaMessageList },
    props: {
        ...useValidationProps,
    },
    setup(props) {
        return {
            messagesColor: computed(() => {
                if (props.error) {
                    return 'danger';
                }
                if (props.success) {
                    return 'success';
                }
                return '';
            }),
            messagesComputed: computed(() => props.error ? props.errorMessages : props.messages),
            errorLimit: computed(() => props.error ? Number(props.errorCount) : 99),
        };
    },
});

const _hoisted_1 = { class: "va-message-list-wrapper" };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_message_list = resolveComponent("va-message-list");

  return (openBlock(), createElementBlock("div", _hoisted_1, [
    renderSlot(_ctx.$slots, "default"),
    createVNode(_component_va_message_list, {
      color: _ctx.messagesColor,
      limit: _ctx.errorLimit,
      "model-value": _ctx.messagesComputed
    }, null, 8 /* PROPS */, ["color", "limit", "model-value"])
  ]))
}

script.render = render;
script.__file = "src/components/va-input/components/VaMessageListWrapper.vue";

export { script as s };
//# sourceMappingURL=VaMessageListWrapper.js.map

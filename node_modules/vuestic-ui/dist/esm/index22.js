import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, shallowRef, computed, resolveComponent, openBlock, createBlock, mergeProps, withKeys, withModifiers, createSlots, withCtx, createElementBlock, createCommentVNode, createElementVNode, normalizeStyle, renderSlot, normalizeProps, guardReactiveProps, createVNode } from 'vue';
import { s as script$2, o as omit_1 } from './VaIcon.js';
import { e as pick_1 } from './usePopover.js';
import './global-config.js';
import './global-utils.js';
import { u as useFocusEmits, a as useFocus } from './useFocus.js';
import { u as useColors } from './useColors.js';
import { u as useEmitProxy } from './useEmitProxy.js';
import { u as useFormProps } from './useForm.js';
import { a as useStatefulProps, b as useStateful } from './useStateful.js';
import { s as safeCSSLength } from './css-utils.js';
import { s as script$1 } from './VaInputWrapper.js';
import { s as script$3 } from './VaButton.js';
import './VaConfig.js';
import './useSize.js';
import './isSymbol.js';
import './ssr-utils.js';
import './global-properties.js';
import 'colortranslator';
import './useBem.js';
import './_createCompounder.js';
import './useCSSVariables.js';
import './index67.js';
import './useSyncProp.js';
import './consts.js';
import './index31.js';
import './useLoading.js';
import './useRouterLink.js';
import './useTextColor.js';
import './index43.js';
import './clamp.js';
import './toNumber.js';

const { createEmits: createInputEmits, createListeners: createInputListeners } = useEmitProxy(['change']);
const { createEmits: createFieldEmits, createListeners: createFieldListeners } = useEmitProxy([
    { listen: 'click-prepend', emit: 'click:decrease-button' },
    { listen: 'click-append', emit: 'click:increase-button' },
    { listen: 'click-prepend-inner', emit: 'click:decrease-icon' },
    { listen: 'click-append-inner', emit: 'click:increase-icon' },
]);
var script = defineComponent({
    name: 'VaCounter',
    components: { VaInputWrapper: script$1, VaIcon: script$2, VaButton: script$3 },
    props: {
        ...useFormProps,
        ...useStatefulProps,
        // input
        modelValue: { type: [String, Number], default: 0 },
        manualInput: { type: Boolean, default: false },
        stateful: { type: Boolean, default: false },
        min: { type: Number, default: undefined },
        max: { type: Number, default: undefined },
        step: { type: Number, default: 1 },
        label: { type: String, default: '' },
        // hint
        messages: { type: [Array, String], default: () => [] },
        // style
        width: { type: [String, Number], default: '160px' },
        color: { type: String, default: 'primary' },
        outline: { type: Boolean },
        bordered: { type: Boolean },
        // icons & buttons
        increaseIcon: { type: String, default: 'add' },
        decreaseIcon: { type: String, default: 'remove' },
        buttons: { type: Boolean, default: false },
        flat: { type: Boolean, default: true },
        rounded: { type: Boolean, default: false },
        margins: { type: [String, Number], default: '4px' },
        textColor: { type: String, default: undefined },
    },
    emits: [
        'update:modelValue',
        ...createInputEmits(),
        ...createFieldEmits(),
        ...useFocusEmits,
    ],
    inheritAttrs: false,
    setup(props, { emit, attrs }) {
        const input = shallowRef();
        const { isFocused, focus, blur, } = useFocus(input, emit);
        const { valueComputed } = useStateful(props, emit);
        const setCountInput = ({ target }) => {
            valueComputed.value = Number(target === null || target === void 0 ? void 0 : target.value);
        };
        const setCountChange = ({ target }) => {
            calculateCounterValue(Number(target === null || target === void 0 ? void 0 : target.value));
        };
        const getRoundDownWithStep = (value) => {
            if (!props.min || !props.step) {
                return value;
            }
            // If the user enters a value manually, then we must round it to the nearest valid value,
            // taking into account the initial value (`props.min`) and the step size (`props.step`)
            return props.min + props.step * Math.floor((value - props.min) / props.step);
        };
        const calculateCounterValue = (counterValue) => {
            if (props.min && counterValue < props.min) {
                valueComputed.value = props.min;
                return;
            }
            if (props.max && (counterValue > props.max)) {
                // since the `props.step` may not be a multiple of `(props.max - props.min)`,
                // we must round the result taking into account the allowable value
                valueComputed.value = getRoundDownWithStep(props.max);
                return;
            }
            valueComputed.value = getRoundDownWithStep(counterValue);
        };
        const isMinReached = computed(() => {
            if (!props.min) {
                return false;
            }
            return Number(valueComputed.value) <= props.min;
        });
        const isMaxReached = computed(() => {
            if (!props.max) {
                return false;
            }
            return props.step
                ? Number(valueComputed.value) > (props.max - props.step)
                : Number(valueComputed.value) >= props.max;
        });
        const tabIndexComputed = computed(() => props.disabled ? -1 : 0);
        const isDecreaseActionDisabled = computed(() => (isMinReached.value || props.readonly || props.disabled));
        const isIncreaseActionDisabled = computed(() => (isMaxReached.value || props.readonly || props.disabled));
        const decreaseCount = () => {
            if (isDecreaseActionDisabled.value) {
                return;
            }
            calculateCounterValue(Number(valueComputed.value) - props.step);
        };
        const increaseCount = () => {
            if (isIncreaseActionDisabled.value) {
                return;
            }
            calculateCounterValue(Number(valueComputed.value) + props.step);
        };
        const { getColor } = useColors();
        const colorComputed = computed(() => getColor(props.color));
        const decreaseIconProps = computed(() => ({
            class: { 'va-counter__icon--inactive': isDecreaseActionDisabled.value },
            color: colorComputed.value,
            name: props.decreaseIcon,
            ...(!isDecreaseActionDisabled.value && { onClick: decreaseCount }),
        }));
        const increaseIconProps = computed(() => ({
            class: { 'va-counter__icon--inactive': isIncreaseActionDisabled.value },
            color: colorComputed.value,
            name: props.increaseIcon,
            ...(!isIncreaseActionDisabled.value && { onClick: increaseCount }),
        }));
        const isSquareCorners = computed(() => ((typeof props.margins === 'string' ? parseFloat(props.margins) : props.margins) === 0));
        const buttonProps = computed(() => ({
            ...pick_1(props, ['rounded', 'color', 'textColor']),
            flat: props.flat && !props.outline,
            outline: props.flat && props.outline,
        }));
        const decreaseButtonProps = computed(() => ({
            ...buttonProps.value,
            icon: props.decreaseIcon,
            disabled: isDecreaseActionDisabled.value,
        }));
        const increaseButtonProps = computed(() => ({
            ...buttonProps.value,
            icon: props.increaseIcon,
            disabled: isIncreaseActionDisabled.value,
        }));
        const inputAttributesComputed = computed(() => ({
            tabindex: tabIndexComputed.value,
            ariaLabel: props.label || 'counter value',
            ariaValuemin: props.min,
            ariaValuemax: props.max,
            ...omit_1(attrs, ['class', 'style']),
            ...pick_1(props, ['disabled', 'min', 'max', 'step']),
            readonly: props.readonly || !props.manualInput,
        }));
        const inputWrapperPropsComputed = computed(() => ({
            ...pick_1(props, ['color', 'readonly', 'disabled', 'messages', 'label', 'bordered', 'outline']),
        }));
        const classComputed = computed(() => ([
            attrs.class,
            { 'va-counter--input-square': isSquareCorners.value },
        ]));
        const styleComputed = computed(() => ({
            width: safeCSSLength(props.width),
            ...(attrs.style || {}),
        }));
        const marginComputed = computed(() => safeCSSLength(props.margins));
        return {
            input,
            valueComputed,
            isFocused,
            fieldListeners: createFieldListeners(emit),
            inputListeners: createInputListeners(emit),
            inputAttributesComputed,
            inputWrapperPropsComputed,
            setCountInput,
            setCountChange,
            decreaseCount,
            increaseCount,
            decreaseIconProps,
            increaseIconProps,
            decreaseButtonProps,
            increaseButtonProps,
            colorComputed,
            classComputed,
            styleComputed,
            marginComputed,
            focus,
            blur,
        };
    },
});

const _hoisted_1 = {
  ref: "input",
  tabindex: "0"
};
const _hoisted_2 = ["value"];

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  const _component_va_icon = resolveComponent("va-icon");
  const _component_VaInputWrapper = resolveComponent("VaInputWrapper");

  return (openBlock(), createBlock(_component_VaInputWrapper, mergeProps({ class: "va-counter" }, { ..._ctx.fieldListeners, ..._ctx.inputWrapperPropsComputed }, {
    class: _ctx.classComputed,
    style: _ctx.styleComputed,
    focused: _ctx.isFocused,
    onKeydown: [
      _cache[8] || (_cache[8] = withKeys(withModifiers($event => (_ctx.increaseCount()), ["prevent"]), ["up"])),
      _cache[9] || (_cache[9] = withKeys(withModifiers($event => (_ctx.decreaseCount()), ["prevent"]), ["down"]))
    ]
  }), createSlots({
    default: withCtx(() => [
      (!_ctx.$slots.content)
        ? (openBlock(), createElementBlock("input", mergeProps({
            key: 0,
            ref: "input",
            class: "va-input__content__input",
            type: "number",
            inputmode: "decimal"
          }, { ..._ctx.inputAttributesComputed, ..._ctx.inputListeners }, {
            value: _ctx.valueComputed,
            onInput: _cache[6] || (_cache[6] = (...args) => (_ctx.setCountInput && _ctx.setCountInput(...args))),
            onChange: _cache[7] || (_cache[7] = (...args) => (_ctx.setCountChange && _ctx.setCountChange(...args)))
          }), null, 16 /* FULL_PROPS */, _hoisted_2))
        : createCommentVNode("v-if", true)
    ]),
    _: 2 /* DYNAMIC */
  }, [
    (_ctx.$props.buttons)
      ? {
          name: "prepend",
          fn: withCtx((slotScope) => [
            createElementVNode("div", {
              class: "va-counter__prepend-wrapper",
              style: normalizeStyle({ marginRight: _ctx.marginComputed }),
              onMousedown: _cache[1] || (_cache[1] = withModifiers($event => (_ctx.focus()), ["prevent"]))
            }, [
              renderSlot(_ctx.$slots, "decreaseAction", normalizeProps(guardReactiveProps({ ...slotScope, decreaseCount: _ctx.decreaseCount })), () => [
                createVNode(_component_va_button, mergeProps({
                  class: "va-counter__button-decrease",
                  "aria-label": "decrease counter"
                }, _ctx.decreaseButtonProps, {
                  onClick: _cache[0] || (_cache[0] = $event => (_ctx.decreaseCount()))
                }), null, 16 /* FULL_PROPS */)
              ])
            ], 36 /* STYLE, HYDRATE_EVENTS */)
          ])
        }
      : {
          name: "prependInner",
          fn: withCtx((slotScope) => [
            createElementVNode("div", {
              onMousedown: _cache[2] || (_cache[2] = withModifiers($event => (_ctx.focus()), ["prevent"]))
            }, [
              renderSlot(_ctx.$slots, "decreaseAction", normalizeProps(guardReactiveProps({ ...slotScope, decreaseCount: _ctx.decreaseCount })), () => [
                createVNode(_component_va_icon, mergeProps({ class: "va-counter__icon-decrease" }, _ctx.decreaseIconProps), null, 16 /* FULL_PROPS */)
              ])
            ], 32 /* HYDRATE_EVENTS */)
          ])
        },
    (_ctx.$props.buttons)
      ? {
          name: "append",
          fn: withCtx((slotScope) => [
            createElementVNode("div", {
              class: "va-counter__append-wrapper",
              style: normalizeStyle({ marginLeft: _ctx.marginComputed }),
              onMousedown: _cache[4] || (_cache[4] = withModifiers($event => (_ctx.focus()), ["prevent"]))
            }, [
              renderSlot(_ctx.$slots, "increaseAction", normalizeProps(guardReactiveProps({ ...slotScope, increaseCount: _ctx.increaseCount })), () => [
                createVNode(_component_va_button, mergeProps({
                  class: "va-counter__button-increase",
                  "aria-label": "increase counter"
                }, _ctx.increaseButtonProps, {
                  onClick: _cache[3] || (_cache[3] = $event => (_ctx.increaseCount()))
                }), null, 16 /* FULL_PROPS */)
              ])
            ], 36 /* STYLE, HYDRATE_EVENTS */)
          ])
        }
      : {
          name: "appendInner",
          fn: withCtx((slotScope) => [
            createElementVNode("div", {
              onMousedown: _cache[5] || (_cache[5] = withModifiers($event => (_ctx.focus()), ["prevent"]))
            }, [
              renderSlot(_ctx.$slots, "increaseAction", normalizeProps(guardReactiveProps({ ...slotScope, increaseCount: _ctx.increaseCount })), () => [
                createVNode(_component_va_icon, mergeProps({ class: "va-counter__icon-increase" }, _ctx.increaseIconProps), null, 16 /* FULL_PROPS */)
              ])
            ], 32 /* HYDRATE_EVENTS */)
          ])
        },
    (_ctx.$slots.content)
      ? {
          name: "content",
          fn: withCtx((slotScope) => [
            createElementVNode("div", _hoisted_1, [
              renderSlot(_ctx.$slots, "content", normalizeProps(guardReactiveProps({ ...slotScope, value: Number(_ctx.valueComputed) })))
            ], 512 /* NEED_PATCH */)
          ])
        }
      : undefined
  ]), 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, ["class", "style", "focused"]))
}

script.render = render;
script.__file = "src/components/va-counter/VaCounter.vue";

const VaCounter = withConfigTransport(script);

export { VaCounter };
//# sourceMappingURL=index22.js.map

import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, h, Transition, shallowRef, toRef, computed, watch, resolveComponent, openBlock, createElementBlock, normalizeClass, renderSlot, normalizeProps, guardReactiveProps, createCommentVNode, createBlock, Teleport, createVNode, mergeProps, withCtx, normalizeStyle, createElementVNode, withKeys, Fragment, toDisplayString, createTextVNode } from 'vue';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import { u as useColors } from './useColors.js';
import { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from './useStateful.js';
import { u as useTextColor } from './useTextColor.js';
import { VaButton } from './index12.js';
import { VaIcon } from './index31.js';

const ModalElement = defineComponent({
    name: 'ModalElement',
    inheritAttrs: false,
    props: {
        isTransition: { type: Boolean, default: true },
    },
    setup: (props, { slots, attrs }) => () => {
        var _a;
        return props.isTransition
            ? h(Transition, { ...attrs }, slots)
            : (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots, attrs);
    },
});
var script = defineComponent({
    name: 'VaModal',
    inheritAttrs: false,
    components: { VaButton, VaIcon, ModalElement },
    emits: [
        ...useStatefulEmits,
        'cancel', 'ok', 'before-open', 'open', 'before-close', 'close', 'click-outside',
    ],
    props: {
        ...useStatefulProps,
        modelValue: { type: Boolean, default: false },
        attachElement: { type: String, default: 'body' },
        disableAttachment: { type: Boolean, default: false },
        title: { type: String, default: '' },
        message: { type: String, default: '' },
        okText: { type: String, default: 'OK' },
        cancelText: { type: String, default: 'Cancel' },
        hideDefaultActions: { type: Boolean, default: false },
        fullscreen: { type: Boolean, default: false },
        mobileFullscreen: { type: Boolean, default: true },
        noDismiss: { type: Boolean, default: false },
        noOutsideDismiss: { type: Boolean, default: false },
        noEscDismiss: { type: Boolean, default: false },
        maxWidth: { type: String, default: '' },
        maxHeight: { type: String, default: '' },
        anchorClass: { type: String },
        size: {
            type: String,
            default: 'medium',
            validator: (value) => ['medium', 'small', 'large'].includes(value),
        },
        fixedLayout: { type: Boolean, default: false },
        withoutTransitions: { type: Boolean, default: false },
        overlay: { type: Boolean, default: true },
        overlayOpacity: { type: [Number, String], default: 0.6 },
        blur: { type: Boolean, default: false },
        zIndex: { type: [Number, String] },
        backgroundColor: { type: String, default: 'white' },
        noPadding: { type: Boolean, default: false },
    },
    setup(props, { emit }) {
        const rootElement = shallowRef();
        const { getColor } = useColors();
        const { textColorComputed } = useTextColor(toRef(props, 'backgroundColor'));
        const { valueComputed } = useStateful(props, emit);
        const computedClass = computed(() => ({
            'va-modal--fullscreen': props.fullscreen,
            'va-modal--mobile-fullscreen': props.mobileFullscreen,
            'va-modal--fixed-layout': props.fixedLayout,
            'va-modal--no-padding': props.noPadding,
            [`va-modal--size-${props.size}`]: props.size !== 'medium',
        }));
        const computedModalContainerStyle = computed(() => ({ 'z-index': props.zIndex }));
        const computedDialogStyle = computed(() => ({
            maxWidth: props.maxWidth,
            maxHeight: props.maxHeight,
            color: textColorComputed.value,
            background: getColor(props.backgroundColor),
        }));
        const computedOverlayStyles = computed(() => {
            // NOTE Not sure exactly what that does.
            // Supposedly solves some case when background wasn't shown.
            // As a side effect removes background from nested modals.
            const moreThanOneModalIsOpen = !!document.querySelectorAll('.va-modal__overlay').length;
            if (!props.overlay || moreThanOneModalIsOpen) {
                return;
            }
            return {
                'background-color': `rgba(0, 0, 0, ${props.overlayOpacity})`,
                'z-index': props.zIndex && Number(props.zIndex) - 1,
            };
        });
        const show = () => { valueComputed.value = true; };
        const hide = () => { valueComputed.value = false; };
        const toggle = () => { valueComputed.value = !valueComputed.value; };
        const cancel = () => { hide(); emit('cancel'); };
        const ok = () => { hide(); emit('ok'); };
        const onOutsideClick = () => {
            if (props.noOutsideDismiss || props.noDismiss) {
                return;
            }
            emit('click-outside');
            cancel();
        };
        const onBeforeEnterTransition = (el) => emit('before-open', el);
        const onAfterEnterTransition = (el) => emit('open', el);
        const onBeforeLeaveTransition = (el) => emit('before-close', el);
        const onAfterLeaveTransition = (el) => emit('close', el);
        const listenKeyUp = (e) => {
            e.modalsCounter = e.modalsCounter ? e.modalsCounter + 1 : 1;
            const modalNumber = e.modalsCounter;
            const isOnTop = () => e.modalsCounter === modalNumber;
            const hideModal = () => {
                if (e.code === 'Escape' && !props.noEscDismiss && !props.noDismiss && isOnTop()) {
                    cancel();
                }
            };
            setTimeout(hideModal);
        };
        watch(valueComputed, (value) => {
            if (value) {
                window.addEventListener('keyup', listenKeyUp);
            }
            else {
                window.removeEventListener('keyup', listenKeyUp);
            }
            if (props.blur) {
                if (value) {
                    document.body.classList.add('va-modal-overlay-background--blurred');
                }
                else {
                    document.body.classList.remove('va-modal-overlay-background--blurred');
                }
            }
        }, { immediate: true });
        const publicMethods = {
            show,
            hide,
            toggle,
            cancel,
            ok,
            onOutsideClick,
            onBeforeEnterTransition,
            onAfterEnterTransition,
            onBeforeLeaveTransition,
            onAfterLeaveTransition,
            listenKeyUp,
        };
        return {
            getColor,
            rootElement,
            valueComputed,
            computedClass,
            computedDialogStyle,
            computedModalContainerStyle,
            computedOverlayStyles,
            ...publicMethods,
        };
    },
});

const _hoisted_1 = ["aria-labelledby"];
const _hoisted_2 = {
  key: 0,
  class: "va-modal__anchor"
};
const _hoisted_3 = {
  key: 0,
  class: "va-modal"
};
const _hoisted_4 = { key: 0 };
const _hoisted_5 = {
  key: 1,
  class: "va-modal__header"
};
const _hoisted_6 = {
  key: 2,
  class: "va-modal__message"
};
const _hoisted_7 = {
  key: 3,
  class: "va-modal__message"
};
const _hoisted_8 = {
  key: 4,
  class: "va-modal__footer"
};
const _hoisted_9 = {
  key: 5,
  class: "va-modal__footer"
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  const _component_va_button = resolveComponent("va-button");
  const _component_modal_element = resolveComponent("modal-element");

  return (openBlock(), createElementBlock("div", {
    ref: "rootElement",
    class: normalizeClass(["va-modal-entry", _ctx.$props.anchorClass]),
    role: "dialog",
    "aria-modal": "true",
    "aria-labelledby": _ctx.title
  }, [
    (_ctx.$slots.anchor)
      ? (openBlock(), createElementBlock("div", _hoisted_2, [
          renderSlot(_ctx.$slots, "anchor", normalizeProps(guardReactiveProps({ show: _ctx.show, hide: _ctx.hide, toggle: _ctx.toggle })))
        ]))
      : createCommentVNode("v-if", true),
    (openBlock(), createBlock(Teleport, {
      to: _ctx.attachElement,
      disabled: _ctx.$props.disableAttachment
    }, [
      createVNode(_component_modal_element, mergeProps({
        name: "va-modal",
        isTransition: !_ctx.$props.withoutTransitions,
        appear: "",
        duration: 300
      }, _ctx.$attrs, {
        onBeforeEnter: _ctx.onBeforeEnterTransition,
        onAfterEnter: _ctx.onAfterEnterTransition,
        onBeforeLeave: _ctx.onBeforeLeaveTransition,
        onAfterLeave: _ctx.onAfterLeaveTransition
      }), {
        default: withCtx(() => [
          (_ctx.valueComputed)
            ? (openBlock(), createElementBlock("div", _hoisted_3, [
                (_ctx.$props.overlay)
                  ? (openBlock(), createElementBlock("div", {
                      key: 0,
                      class: "va-modal__overlay",
                      style: normalizeStyle(_ctx.computedOverlayStyles),
                      onClick: _cache[0] || (_cache[0] = (...args) => (_ctx.onOutsideClick && _ctx.onOutsideClick(...args)))
                    }, null, 4 /* STYLE */))
                  : createCommentVNode("v-if", true),
                createElementVNode("div", {
                  class: "va-modal__container",
                  style: normalizeStyle(_ctx.computedModalContainerStyle)
                }, [
                  createElementVNode("div", {
                    class: normalizeClass(["va-modal__dialog", _ctx.computedClass]),
                    style: normalizeStyle(_ctx.computedDialogStyle)
                  }, [
                    (_ctx.$props.fullscreen)
                      ? (openBlock(), createBlock(_component_va_icon, {
                          key: 0,
                          name: "close",
                          class: "va-modal__close",
                          role: "button",
                          "aria-label": "close",
                          "aria-hidden": "false",
                          tabindex: "0",
                          onClick: _ctx.cancel,
                          onKeydown: [
                            withKeys(_ctx.cancel, ["space"]),
                            withKeys(_ctx.cancel, ["enter"])
                          ]
                        }, null, 8 /* PROPS */, ["onClick", "onKeydown"]))
                      : createCommentVNode("v-if", true),
                    createElementVNode("div", {
                      class: "va-modal__inner",
                      style: normalizeStyle({ maxWidth: _ctx.$props.maxWidth, maxHeight: _ctx.$props.maxHeight })
                    }, [
                      (_ctx.$slots.content)
                        ? (openBlock(), createElementBlock("div", _hoisted_4, [
                            renderSlot(_ctx.$slots, "content", normalizeProps(guardReactiveProps({ cancel: _ctx.cancel, ok: _ctx.ok })))
                          ]))
                        : createCommentVNode("v-if", true),
                      (!_ctx.$slots.content)
                        ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                            (_ctx.title)
                              ? (openBlock(), createElementBlock("div", {
                                  key: 0,
                                  class: "va-modal__title",
                                  style: normalizeStyle({ color: _ctx.getColor('primary') })
                                }, toDisplayString(_ctx.$props.title), 5 /* TEXT, STYLE */))
                              : createCommentVNode("v-if", true),
                            (_ctx.$slots.header)
                              ? (openBlock(), createElementBlock("div", _hoisted_5, [
                                  renderSlot(_ctx.$slots, "header")
                                ]))
                              : createCommentVNode("v-if", true),
                            (_ctx.$props.message)
                              ? (openBlock(), createElementBlock("div", _hoisted_6, toDisplayString(_ctx.$props.message), 1 /* TEXT */))
                              : createCommentVNode("v-if", true),
                            (_ctx.$slots.default)
                              ? (openBlock(), createElementBlock("div", _hoisted_7, [
                                  renderSlot(_ctx.$slots, "default")
                                ]))
                              : createCommentVNode("v-if", true),
                            ((_ctx.$props.cancelText || _ctx.$props.okText) && !_ctx.$props.hideDefaultActions)
                              ? (openBlock(), createElementBlock("div", _hoisted_8, [
                                  (_ctx.$props.cancelText)
                                    ? (openBlock(), createBlock(_component_va_button, {
                                        key: 0,
                                        color: "gray",
                                        class: "mr-2",
                                        flat: "",
                                        onClick: _ctx.cancel
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(_ctx.$props.cancelText), 1 /* TEXT */)
                                        ]),
                                        _: 1 /* STABLE */
                                      }, 8 /* PROPS */, ["onClick"]))
                                    : createCommentVNode("v-if", true),
                                  createVNode(_component_va_button, { onClick: _ctx.ok }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(_ctx.$props.okText), 1 /* TEXT */)
                                    ]),
                                    _: 1 /* STABLE */
                                  }, 8 /* PROPS */, ["onClick"])
                                ]))
                              : createCommentVNode("v-if", true),
                            (_ctx.$slots.footer)
                              ? (openBlock(), createElementBlock("div", _hoisted_9, [
                                  renderSlot(_ctx.$slots, "footer")
                                ]))
                              : createCommentVNode("v-if", true)
                          ], 64 /* STABLE_FRAGMENT */))
                        : createCommentVNode("v-if", true)
                    ], 4 /* STYLE */)
                  ], 6 /* CLASS, STYLE */)
                ], 4 /* STYLE */)
              ]))
            : createCommentVNode("v-if", true)
        ]),
        _: 3 /* FORWARDED */
      }, 16 /* FULL_PROPS */, ["isTransition", "onBeforeEnter", "onAfterEnter", "onBeforeLeave", "onAfterLeave"])
    ], 8 /* PROPS */, ["to", "disabled"]))
  ], 10 /* CLASS, PROPS */, _hoisted_1))
}

script.render = render;
script.__file = "src/components/va-modal/VaModal.vue";

const VaModal = withConfigTransport(script);

export { VaModal as V };
//# sourceMappingURL=VaModal.js.map

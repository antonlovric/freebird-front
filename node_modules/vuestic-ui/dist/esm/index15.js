import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, shallowRef, computed, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, createElementVNode, normalizeStyle, withModifiers, mergeProps, toHandlers, withDirectives, createVNode, vShow, createElementBlock, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from 'vue';
import { g as generateUniqueId } from './utils.js';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import { u as useColors } from './useColors.js';
import { u as useKeyboardOnlyFocus } from './useKeyboardOnlyFocus.js';
import { u as useSelectableEmits, a as useSelectableProps, b as useSelectable } from './useSelectable.js';
import { u as useTextColor } from './useTextColor.js';
import { VaIcon } from './index31.js';
import { s as script$1 } from './VaMessageListWrapper.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';
import 'colortranslator';
import './useStateful.js';
import './useLoading.js';
import './index67.js';
import './useSyncProp.js';
import './useFocus.js';
import './consts.js';
import './VaIcon.js';
import './useSize.js';

const VaCheckboxValueType = [Boolean, Array, String, Object];
var script = defineComponent({
    name: 'VaCheckbox',
    components: { VaMessageListWrapper: script$1, VaIcon },
    emits: useSelectableEmits,
    props: {
        ...useSelectableProps,
        modelValue: { type: VaCheckboxValueType, default: false },
        color: { type: String, default: 'primary' },
        checkedIcon: { type: String, default: 'check' },
        indeterminate: { type: Boolean, default: false },
        indeterminateValue: { type: VaCheckboxValueType, default: null },
        indeterminateIcon: { type: String, default: 'remove' },
        id: { type: String, default: '' },
        name: { type: String, default: '' },
        ariaLabel: { type: String, default: undefined },
    },
    setup(props, { emit }) {
        const elements = {
            container: shallowRef(),
            input: shallowRef(),
            label: shallowRef(),
        };
        const { isChecked, computedError, isIndeterminate, computedErrorMessages, toggleSelection, onBlur, onFocus, } = useSelectable(props, emit, elements);
        const { getColor } = useColors();
        const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus();
        const { textColorComputed } = useTextColor();
        const isActive = computed(() => isChecked.value || isIndeterminate.value);
        const computedClass = computed(() => ({
            'va-checkbox--selected': isChecked.value,
            'va-checkbox--readonly': props.readonly,
            'va-checkbox--disabled': props.disabled,
            'va-checkbox--indeterminate': props.indeterminate,
            'va-checkbox--error': computedError.value,
            'va-checkbox--left-label': props.leftLabel,
            'va-checkbox--on-keyboard-focus': hasKeyboardFocus.value,
        }));
        const labelStyle = computed(() => {
            return {
                color: computedError.value ? getColor('danger') : '',
                padding: !props.label
                    ? ''
                    : props.leftLabel
                        ? '0 0.5rem 0 0'
                        : '0 0 0 0.5rem',
            };
        });
        const inputStyle = computed(() => {
            const style = {
                background: isActive.value ? getColor(props.color) : '',
                borderColor: isActive.value ? getColor(props.color) : '',
            };
            if (computedError.value) {
                style.borderColor = getColor('danger');
            }
            return style;
        });
        const computedIconName = computed(() => props.indeterminate && isIndeterminate.value
            ? props.indeterminateIcon
            : props.checkedIcon);
        const uniqueId = computed(generateUniqueId);
        const computedId = computed(() => props.id || uniqueId.value);
        const computedName = computed(() => props.name || uniqueId.value);
        const inputAttributesComputed = computed(() => ({
            name: computedName.value,
            disabled: props.disabled,
            readonly: props.readonly,
            tabindex: props.disabled ? -1 : 0,
            ariaLabel: props.ariaLabel,
            ariaDisabled: props.disabled,
            ariaReadOnly: props.readonly,
            ariaChecked: isActive.value,
            'aria-invalid': !!computedErrorMessages.value.length,
            'aria-errormessage': typeof computedErrorMessages.value === 'string'
                ? computedErrorMessages.value
                : computedErrorMessages.value.join(', '),
        }));
        return {
            isActive,
            computedClass,
            labelStyle,
            inputStyle,
            computedIconName,
            textColorComputed,
            computedError,
            computedErrorMessages,
            keyboardFocusListeners,
            toggleSelection,
            onBlur,
            onFocus,
            inputAttributesComputed,
            computedId,
            computedName,
        };
    },
});

const _hoisted_1 = ["id", "indeterminate", "value", "checked"];
const _hoisted_2 = ["for"];

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  const _component_VaMessageListWrapper = resolveComponent("VaMessageListWrapper");

  return (openBlock(), createBlock(_component_VaMessageListWrapper, {
    class: normalizeClass(["va-checkbox", _ctx.computedClass]),
    disabled: _ctx.disabled,
    success: _ctx.success,
    messages: _ctx.messages,
    error: _ctx.computedError,
    "error-messages": _ctx.computedErrorMessages,
    "error-count": _ctx.errorCount
  }, {
    default: withCtx(() => [
      createElementVNode("div", {
        ref: "container",
        class: "va-checkbox__input-container",
        onClick: _cache[6] || (_cache[6] = (...args) => (_ctx.toggleSelection && _ctx.toggleSelection(...args))),
        onBlur: _cache[7] || (_cache[7] = (...args) => (_ctx.onBlur && _ctx.onBlur(...args)))
      }, [
        createElementVNode("div", {
          class: "va-checkbox__square",
          style: normalizeStyle(_ctx.inputStyle),
          onSelectstart: _cache[4] || (_cache[4] = withModifiers(() => {}, ["prevent"]))
        }, [
          createElementVNode("input", mergeProps({
            ref: "input",
            type: "checkbox",
            class: "va-checkbox__input",
            id: _ctx.computedId,
            indeterminate: _ctx.indeterminate,
            value: _ctx.label,
            checked: _ctx.isActive
          }, _ctx.inputAttributesComputed, toHandlers(_ctx.keyboardFocusListeners), {
            onFocus: _cache[0] || (_cache[0] = (...args) => (_ctx.onFocus && _ctx.onFocus(...args))),
            onBlur: _cache[1] || (_cache[1] = (...args) => (_ctx.onBlur && _ctx.onBlur(...args))),
            onClick: _cache[2] || (_cache[2] = withModifiers(() => {}, ["stop","prevent"])),
            onKeypress: _cache[3] || (_cache[3] = withModifiers((...args) => (_ctx.toggleSelection && _ctx.toggleSelection(...args)), ["prevent"]))
          }), null, 16 /* FULL_PROPS */, _hoisted_1),
          withDirectives(createVNode(_component_va_icon, {
            class: "va-checkbox__icon",
            size: "20px",
            name: _ctx.computedIconName,
            color: _ctx.textColorComputed
          }, null, 8 /* PROPS */, ["name", "color"]), [
            [vShow, _ctx.isActive]
          ])
        ], 36 /* STYLE, HYDRATE_EVENTS */),
        (_ctx.label || _ctx.$slots.label)
          ? (openBlock(), createElementBlock("label", {
              key: 0,
              ref: "label",
              class: "va-checkbox__label",
              for: _ctx.computedId,
              style: normalizeStyle(_ctx.labelStyle),
              onBlur: _cache[5] || (_cache[5] = (...args) => (_ctx.onBlur && _ctx.onBlur(...args)))
            }, [
              renderSlot(_ctx.$slots, "label", {}, () => [
                createTextVNode(toDisplayString(_ctx.label), 1 /* TEXT */)
              ])
            ], 44 /* STYLE, PROPS, HYDRATE_EVENTS */, _hoisted_2))
          : createCommentVNode("v-if", true)
      ], 544 /* HYDRATE_EVENTS, NEED_PATCH */)
    ]),
    _: 3 /* FORWARDED */
  }, 8 /* PROPS */, ["class", "disabled", "success", "messages", "error", "error-messages", "error-count"]))
}

script.render = render;
script.__file = "src/components/va-checkbox/VaCheckbox.vue";

const VaCheckbox = withConfigTransport(script);

export { VaCheckbox };
//# sourceMappingURL=index15.js.map

import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, shallowRef, ref, computed, watch, nextTick, resolveComponent, openBlock, createBlock, withKeys, withModifiers, withCtx, createCommentVNode, renderSlot, createElementBlock, Fragment, renderList, normalizeClass, normalizeStyle, createTextVNode, toDisplayString, withDirectives, vModelText } from 'vue';
import { _ as __DEV__ } from './global-utils.js';
import './global-config.js';
import './usePopover.js';
import { u as useColors } from './useColors.js';
import { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from './useStateful.js';
import { u as useTextColor } from './useTextColor.js';
import { VaButtonGroup } from './index10.js';
import { VaButton } from './index12.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';
import 'colortranslator';
import './VaButton.js';
import './useLoading.js';
import './useRouterLink.js';
import './useSize.js';
import './index31.js';
import './VaIcon.js';
import './index43.js';
import './clamp.js';
import './toNumber.js';

const setPaginationRange = (value = 1, visiblePages, pages, includeBoundary = false) => {
    let start = 0;
    if (pages === 0) {
        pages = 1;
    }
    if (visiblePages > pages) {
        visiblePages = pages;
    }
    if (visiblePages === 0) {
        start = 1;
        visiblePages = pages;
    }
    else {
        const paginationMiddlePage = visiblePages / 2;
        if (value - paginationMiddlePage <= 0 || value > pages) {
            start = 1;
        }
        else {
            start = value + paginationMiddlePage > pages
                ? pages - visiblePages + 1
                : Math.ceil(value - paginationMiddlePage);
        }
    }
    const range = [];
    for (let i = 0; i < visiblePages; i++) {
        range.push(start + i);
    }
    if (includeBoundary) {
        start !== 1 && range.splice(0, 2, 1, '...');
        range[range.length - 1] !== pages && range.splice(-2, 2, '...', pages);
    }
    return range;
};

var script = defineComponent({
    name: 'VaPagination',
    components: { VaButtonGroup, VaButton },
    emits: useStatefulEmits,
    props: {
        ...useStatefulProps,
        modelValue: { type: Number, default: 1 },
        visiblePages: { type: Number, default: 0 },
        pages: { type: Number, default: 0 },
        disabled: { type: Boolean, default: false },
        color: { type: String, default: 'primary' },
        size: {
            type: String,
            default: 'medium',
            validator: (v) => ['medium', 'small', 'large'].includes(v),
        },
        boundaryLinks: { type: Boolean, default: true },
        boundaryNumbers: { type: Boolean, default: false },
        directionLinks: { type: Boolean, default: true },
        input: { type: Boolean, default: false },
        hideOnSinglePage: { type: Boolean, default: false },
        flat: { type: Boolean, default: false },
        total: { type: Number, default: null },
        pageSize: { type: Number, default: null },
        boundaryIconLeft: { type: String, default: 'first_page' },
        boundaryIconRight: { type: String, default: 'last_page' },
        directionIconLeft: { type: String, default: 'chevron_left' },
        directionIconRight: { type: String, default: 'chevron_right' },
    },
    setup(props, { emit }) {
        const htmlInput = shallowRef();
        const inputValue = ref('');
        const usedTotal = computed(() => !!((props.total || props.pageSize === 0) && props.pageSize));
        const { valueComputed } = useStateful(props, emit);
        const { textColorComputed } = useTextColor();
        const currentValue = computed({
            get: () => usedTotal.value ? Math.ceil(valueComputed.value / props.pageSize) || 1 : valueComputed.value,
            set: (value) => { valueComputed.value = value; },
        });
        const paginationRange = computed(() => {
            const { visiblePages, total, pageSize, boundaryNumbers, pages } = props;
            const value = currentValue.value || 1;
            const totalPages = usedTotal.value ? Math.ceil(total / pageSize) : pages;
            return setPaginationRange(value, visiblePages, totalPages, boundaryNumbers);
        });
        const lastPage = computed(() => usedTotal.value ? Math.ceil(props.total / props.pageSize) || 1 : props.pages);
        const IsLstPageNotVisible = computed(() => (!!props.visiblePages && lastPage.value > props.visiblePages));
        const showBoundaryLinks = computed(() => {
            const { boundaryLinks, boundaryNumbers, input } = props;
            return input || (IsLstPageNotVisible.value && boundaryLinks && !boundaryNumbers);
        });
        const showDirectionLinks = computed(() => props.input || (IsLstPageNotVisible.value && props.directionLinks));
        const showPagination = computed(() => lastPage.value > 1 || (!props.hideOnSinglePage && lastPage.value <= 1));
        const focusInput = () => {
            inputValue.value = `${currentValue.value}`;
            nextTick(() => { var _a; return (_a = htmlInput.value) === null || _a === void 0 ? void 0 : _a.setSelectionRange(0, htmlInput.value.value.length); });
        };
        const onUserInput = (pageNum) => {
            if (pageNum === '...' || pageNum < 1 || pageNum > lastPage.value) {
                return;
            }
            currentValue.value = usedTotal.value ? (pageNum - 1) * props.pageSize + 1 : pageNum;
        };
        const resetInput = () => {
            var _a;
            inputValue.value = '';
            (_a = htmlInput.value) === null || _a === void 0 ? void 0 : _a.blur();
        };
        const changeValue = () => {
            if (+inputValue.value === currentValue.value) {
                resetInput();
            }
            if (!inputValue.value.length) {
                return;
            }
            let pageNum = Number.parseInt(inputValue.value);
            switch (true) {
                case pageNum < 1:
                    pageNum = 1;
                    break;
                case pageNum > lastPage.value:
                    pageNum = lastPage.value;
                    break;
                case isNaN(pageNum):
                    pageNum = currentValue.value;
                    break;
            }
            onUserInput(pageNum);
            resetInput();
        };
        const { getColor } = useColors();
        const activeButtonStyle = (buttonValue) => {
            if (buttonValue === currentValue.value) {
                return {
                    backgroundColor: getColor(props.color),
                    color: textColorComputed.value,
                };
            }
            return {
                color: getColor(props.color),
            };
        };
        const inputStyleComputed = computed(() => ({
            cursor: 'default',
            color: getColor(props.color),
            opacity: props.disabled ? 0.4 : 1,
        }));
        watch([usedTotal, () => props.pages], () => {
            if (__DEV__ && usedTotal.value && props.pages) {
                throw new Error('Please, use either `total` and `page-size` props, or `pages`.');
            }
        });
        return {
            currentValue,
            lastPage,
            changeValue,
            inputValue,
            showPagination,
            showBoundaryLinks,
            onUserInput,
            activeButtonStyle,
            showDirectionLinks,
            paginationRange,
            focusInput,
            inputStyleComputed,
        };
    },
});

const _hoisted_1 = ["disabled", "placeholder"];

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  const _component_va_button_group = resolveComponent("va-button-group");

  return (_ctx.showPagination)
    ? (openBlock(), createBlock(_component_va_button_group, {
        key: 0,
        class: "va-pagination",
        flat: _ctx.$props.flat,
        size: _ctx.$props.size,
        color: _ctx.$props.color,
        outline: "",
        onKeydown: [
          _cache[8] || (_cache[8] = withKeys(withModifiers($event => (_ctx.onUserInput(_ctx.currentValue - 1)), ["stop"]), ["left"])),
          _cache[9] || (_cache[9] = withKeys(withModifiers($event => (_ctx.onUserInput(_ctx.currentValue + 1)), ["stop"]), ["right"]))
        ]
      }, {
        default: withCtx(() => [
          (_ctx.showBoundaryLinks)
            ? (openBlock(), createBlock(_component_va_button, {
                key: 0,
                "aria-label": "go first page",
                disabled: _ctx.$props.disabled || _ctx.currentValue === 1,
                icon: _ctx.$props.boundaryIconLeft,
                onClick: _cache[0] || (_cache[0] = $event => (_ctx.onUserInput(1)))
              }, null, 8 /* PROPS */, ["disabled", "icon"]))
            : createCommentVNode("v-if", true),
          (_ctx.showDirectionLinks)
            ? (openBlock(), createBlock(_component_va_button, {
                key: 1,
                "aria-label": "go prev page",
                outline: "",
                disabled: _ctx.$props.disabled || _ctx.currentValue === 1,
                icon: _ctx.$props.directionIconLeft,
                onClick: _cache[1] || (_cache[1] = $event => (_ctx.onUserInput(_ctx.currentValue - 1)))
              }, null, 8 /* PROPS */, ["disabled", "icon"]))
            : createCommentVNode("v-if", true),
          (!_ctx.$props.input)
            ? renderSlot(_ctx.$slots, "default", { key: 2 }, () => [
                (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.paginationRange, (n, i) => {
                  return (openBlock(), createBlock(_component_va_button, {
                    key: i,
                    class: normalizeClass(["va-pagination__numeric-button", { 'va-button--ellipsis': n === '...'}]),
                    outline: "",
                    "aria-label": `go to ${n} page`,
                    "aria-current": n === _ctx.currentValue,
                    style: normalizeStyle(_ctx.activeButtonStyle(n)),
                    disabled: _ctx.$props.disabled || n === '...',
                    onClick: $event => (_ctx.onUserInput(n))
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(n), 1 /* TEXT */)
                    ]),
                    _: 2 /* DYNAMIC */
                  }, 1032 /* PROPS, DYNAMIC_SLOTS */, ["aria-label", "aria-current", "style", "disabled", "class", "onClick"]))
                }), 128 /* KEYED_FRAGMENT */))
              ])
            : withDirectives((openBlock(), createElementBlock("input", {
                key: 3,
                ref: "htmlInput",
                class: normalizeClass(["va-pagination__input va-button", { 'va-pagination__input--flat': _ctx.$props.flat }]),
                "aria-label": "enter the page number to go",
                "onUpdate:modelValue": _cache[2] || (_cache[2] = $event => ((_ctx.inputValue) = $event)),
                disabled: _ctx.$props.disabled,
                placeholder: `${_ctx.currentValue}/${_ctx.lastPage}`,
                style: normalizeStyle(_ctx.inputStyleComputed),
                onKeydown: _cache[3] || (_cache[3] = withKeys((...args) => (_ctx.changeValue && _ctx.changeValue(...args)), ["enter"])),
                onFocus: _cache[4] || (_cache[4] = (...args) => (_ctx.focusInput && _ctx.focusInput(...args))),
                onBlur: _cache[5] || (_cache[5] = (...args) => (_ctx.changeValue && _ctx.changeValue(...args)))
              }, null, 46 /* CLASS, STYLE, PROPS, HYDRATE_EVENTS */, _hoisted_1)), [
                [vModelText, _ctx.inputValue]
              ]),
          (_ctx.showDirectionLinks)
            ? (openBlock(), createBlock(_component_va_button, {
                key: 4,
                "aria-label": "go next page",
                outline: "",
                disabled: _ctx.$props.disabled || _ctx.currentValue === _ctx.lastPage,
                icon: _ctx.$props.directionIconRight,
                onClick: _cache[6] || (_cache[6] = $event => (_ctx.onUserInput(_ctx.currentValue + 1)))
              }, null, 8 /* PROPS */, ["disabled", "icon"]))
            : createCommentVNode("v-if", true),
          (_ctx.showBoundaryLinks)
            ? (openBlock(), createBlock(_component_va_button, {
                key: 5,
                "aria-label": "go last page",
                outline: "",
                disabled: _ctx.$props.disabled || _ctx.currentValue === _ctx.lastPage,
                icon: _ctx.$props.boundaryIconRight,
                onClick: _cache[7] || (_cache[7] = $event => (_ctx.onUserInput(_ctx.lastPage)))
              }, null, 8 /* PROPS */, ["disabled", "icon"]))
            : createCommentVNode("v-if", true)
        ]),
        _: 3 /* FORWARDED */
      }, 8 /* PROPS */, ["flat", "size", "color"]))
    : createCommentVNode("v-if", true)
}

script.render = render;
script.__file = "src/components/va-pagination/VaPagination.vue";

const VaPagination = withConfigTransport(script);

export { VaPagination };
//# sourceMappingURL=index39.js.map

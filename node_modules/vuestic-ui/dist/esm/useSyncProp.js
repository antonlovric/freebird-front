import { computed, ref, watch } from 'vue';

/**
 * Returns computed that emits update:${propName} on edit.
 *
 * @tutorial
 * ```
 * const [prop] = useSyncProp('name', props, emit)
 *
 * prop.value = 'New name'
 *
 * $nextTick(() => console.log(prop.value)) // 'New name'
 * ```
 *
 * @notice
 * Be careful, that property is not updating in current render
 * cycle. Be sure to use $nextTick if you need to use this property after change.
 */
function useSyncProp(propName, props, emit, defaultValue) {
    if (defaultValue === undefined) {
        return [
            computed({
                set(value) {
                    emit(`update:${propName}`, value);
                },
                get() {
                    return props[propName];
                },
            }),
        ];
    }
    const currentValue = props[propName];
    const statefulValue = ref(currentValue === undefined ? defaultValue : currentValue);
    watch(() => props[propName], (newVal) => {
        if (newVal === undefined) {
            return;
        }
        statefulValue.value = newVal;
    });
    return [
        computed({
            set(value) {
                statefulValue.value = value;
                emit(`update:${propName}`, value);
            },
            get() {
                return (props[propName] === undefined ? statefulValue.value : props[propName]);
            },
        }),
    ];
}

export { useSyncProp as u };
//# sourceMappingURL=useSyncProp.js.map

import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, shallowRef, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, mergeProps, toHandlers, withKeys, renderSlot, normalizeProps, guardReactiveProps, createBlock, createCommentVNode, toDisplayString, createVNode, normalizeStyle } from 'vue';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import { u as useColors } from './useColors.js';
import { u as useKeyboardOnlyFocus } from './useKeyboardOnlyFocus.js';
import { u as useSyncProp } from './useSyncProp.js';
import { g as generateUniqueId } from './utils.js';
import { u as useTextColor } from './useTextColor.js';
import { a as useAccordionItem } from './useAccordion.js';
import { VaIcon } from './index31.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';
import 'colortranslator';
import './VaIcon.js';
import './useSize.js';

var script = defineComponent({
    name: 'VaCollapse',
    components: {
        VaIcon,
    },
    props: {
        modelValue: { type: Boolean, default: undefined },
        disabled: { type: Boolean, default: false },
        header: { type: String, default: '' },
        icon: { type: String, default: '' },
        solid: { type: Boolean, default: false },
        color: { type: String, default: 'background' },
        textColor: { type: String, default: '' },
        colorAll: { type: Boolean, default: false },
    },
    emits: ['focus', 'update:modelValue'],
    setup(props, { emit, slots }) {
        const body = shallowRef();
        const [computedModelValue] = useSyncProp('modelValue', props, emit, false);
        const { getColor, getHoverColor } = useColors();
        const { accordionProps, toggle } = useAccordionItem(computedModelValue);
        const { textColorComputed } = useTextColor();
        const getTextNodeHeight = (textNode) => {
            const range = document.createRange();
            range.selectNodeContents(textNode);
            const rect = range.getBoundingClientRect();
            return rect.bottom - rect.top;
        };
        const getNodeHeight = (node) => {
            // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName
            if (node.nodeName === '#text') {
                return getTextNodeHeight(node);
            }
            if (node.nodeName === '#comment') {
                return 0;
            }
            return node.clientHeight;
        };
        const height = computed(() => {
            if (!computedModelValue.value || !body.value) {
                return 0;
            }
            const nodes = Array.from(body.value.childNodes);
            return nodes.reduce((result, node) => result + getNodeHeight(node), 0);
        });
        const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus();
        const getTransition = () => {
            const duration = height.value / 1000 * 0.2;
            return `${duration > 0.2 ? duration : 0.2}s`;
        };
        const getBackground = () => {
            return props.color && props.colorAll
                ? getHoverColor(getColor(props.color))
                : '';
        };
        const uniqueId = computed(generateUniqueId);
        const headerIdComputed = computed(() => `header-${uniqueId.value}`);
        const panelIdComputed = computed(() => `panel-${uniqueId.value}`);
        const tabIndexComputed = computed(() => props.disabled ? -1 : 0);
        const headerAttributes = computed(() => ({
            id: headerIdComputed.value,
            tabindex: tabIndexComputed.value,
            'aria-controls': panelIdComputed.value,
            'aria-expanded': computedModelValue.value,
            'aria-disabled': props.disabled,
            role: 'button',
        }));
        return {
            body,
            height,
            toggle,
            computedModelValue,
            hasKeyboardFocus,
            keyboardFocusListeners,
            textColorComputed,
            headerIdComputed,
            headerAttributes,
            panelIdComputed,
            tabIndexComputed,
            computedClasses: computed(() => ({
                'va-collapse--expanded': computedModelValue.value,
                'va-collapse--disabled': props.disabled,
                'va-collapse--solid': props.solid,
                'va-collapse--active': props.solid && computedModelValue.value,
                'va-collapse--popout': accordionProps.value.popout && computedModelValue.value,
                'va-collapse--inset': accordionProps.value.inset && computedModelValue.value,
            })),
            headerStyle: computed(() => ({
                paddingLeft: props.icon && 0,
                color: textColorComputed.value,
                backgroundColor: props.color ? getColor(props.color) : '',
            })),
            contentStyle: computed(() => {
                var _a;
                const hasContent = computedModelValue.value && !!((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)[0]);
                return {
                    visibility: hasContent ? 'visible' : 'hidden',
                    height: `${height.value}px`,
                    transitionDuration: getTransition(),
                    background: hasContent ? getBackground() : '',
                };
            }),
        };
    },
});

const _hoisted_1 = { class: "va-collapse__header__text" };
const _hoisted_2 = ["id", "aria-labelledby"];

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");

  return (openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-collapse", _ctx.computedClasses])
  }, [
    createElementVNode("div", mergeProps({ class: "va-collapse__header-wrapper" }, toHandlers(_ctx.keyboardFocusListeners), {
      onFocus: _cache[0] || (_cache[0] = $event => (_ctx.$emit('focus'))),
      onClick: _cache[1] || (_cache[1] = (...args) => (_ctx.toggle && _ctx.toggle(...args))),
      onKeydown: [
        _cache[2] || (_cache[2] = withKeys((...args) => (_ctx.toggle && _ctx.toggle(...args)), ["enter"])),
        _cache[3] || (_cache[3] = withKeys((...args) => (_ctx.toggle && _ctx.toggle(...args)), ["space"]))
      ]
    }), [
      renderSlot(_ctx.$slots, "header", normalizeProps(guardReactiveProps({
          value: _ctx.computedModelValue,
          hasKeyboardFocus: _ctx.hasKeyboardFocus,
          bind: _ctx.headerAttributes,
          attributes: _ctx.headerAttributes,
        })), () => [
        createElementVNode("div", mergeProps(_ctx.headerAttributes, {
          class: "va-collapse__header",
          style: _ctx.headerStyle
        }), [
          (_ctx.icon)
            ? (openBlock(), createBlock(_component_va_icon, {
                key: 0,
                class: "va-collapse__header__icon",
                name: _ctx.icon,
                color: _ctx.textColorComputed
              }, null, 8 /* PROPS */, ["name", "color"]))
            : createCommentVNode("v-if", true),
          createElementVNode("div", _hoisted_1, toDisplayString(_ctx.header), 1 /* TEXT */),
          createVNode(_component_va_icon, {
            class: "va-collapse__header__icon",
            name: _ctx.computedModelValue ? 'expand_less' : 'expand_more',
            color: _ctx.textColorComputed
          }, null, 8 /* PROPS */, ["name", "color"])
        ], 16 /* FULL_PROPS */)
      ])
    ], 16 /* FULL_PROPS */),
    createElementVNode("div", {
      ref: "body",
      class: "va-collapse__body",
      role: "region",
      style: normalizeStyle(_ctx.contentStyle),
      id: _ctx.panelIdComputed,
      "aria-labelledby": _ctx.headerIdComputed
    }, [
      renderSlot(_ctx.$slots, "default")
    ], 12 /* STYLE, PROPS */, _hoisted_2)
  ], 2 /* CLASS */))
}

script.render = render;
script.__file = "src/components/va-collapse/VaCollapse.vue";

const VaCollapse = withConfigTransport(script);

export { VaCollapse };
//# sourceMappingURL=index17.js.map

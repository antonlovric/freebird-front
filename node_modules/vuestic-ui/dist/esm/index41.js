import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, computed, resolveComponent, openBlock, createBlock, mergeProps, withCtx, createElementVNode, normalizeStyle, createElementBlock, renderSlot, createVNode, createCommentVNode, createTextVNode, toDisplayString } from 'vue';
import { e as extractComponentProps, f as filterComponentProps } from './child-props.js';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import { u as useColors } from './useColors.js';
import { u as useTextColor } from './useTextColor.js';
import { VaDropdown } from './index27.js';
import { VaIcon } from './index31.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';
import 'colortranslator';
import './useBem.js';
import './_createCompounder.js';
import './useCaptureEvent.js';
import './debounce.js';
import './toNumber.js';
import './useStateful.js';
import './VaIcon.js';
import './useSize.js';

const VaDropdownProps = extractComponentProps(VaDropdown, ['closeOnClickOutside']);
var script = defineComponent({
    name: 'VaPopover',
    components: { VaDropdown, VaIcon },
    props: {
        ...VaDropdownProps,
        trigger: { default: 'hover' },
        color: { type: String, default: 'dark' },
        textColor: { type: String },
        icon: { type: String, default: '' },
        title: { type: String, default: '' },
        message: { type: String, default: '' },
        autoHide: { type: Boolean, default: true },
        offset: { type: [Array, Number], default: 4 },
    },
    setup(props, { slots }) {
        const VaDropdownPropValues = filterComponentProps(props, VaDropdownProps);
        const { getColor, getBoxShadowColor } = useColors();
        const { textColorComputed } = useTextColor();
        const showIconComputed = computed(() => props.icon || slots.icon);
        const showTitleComputed = computed(() => props.title || slots.title);
        const showBodyComputed = computed(() => props.message || slots.body);
        const showPopoverContentComputed = computed(() => showTitleComputed.value || showBodyComputed.value);
        const computedPopoverStyle = computed(() => ({
            boxShadow: `var(--va-popover-content-box-shadow) ${getBoxShadowColor(getColor(props.color))}`,
            backgroundColor: getColor(props.color),
            color: textColorComputed.value,
        }));
        return {
            textColorComputed,
            VaDropdownPropValues,
            showBodyComputed,
            showIconComputed,
            showTitleComputed,
            computedPopoverStyle,
            showPopoverContentComputed,
        };
    },
});

const _hoisted_1 = {
  key: 0,
  "aria-hidden": "true",
  class: "va-popover__icon"
};
const _hoisted_2 = { key: 1 };
const _hoisted_3 = {
  key: 0,
  class: "va-popover__title"
};
const _hoisted_4 = {
  key: 1,
  class: "va-popover__body"
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  const _component_va_dropdown = resolveComponent("va-dropdown");

  return (openBlock(), createBlock(_component_va_dropdown, mergeProps(_ctx.VaDropdownPropValues, {
    "model-value": _ctx.modelValue,
    "close-on-click-outside": _ctx.autoHide,
    offset: _ctx.$props.offset,
    class: "va-popover"
  }), {
    default: withCtx(() => [
      createElementVNode("div", {
        style: normalizeStyle(_ctx.computedPopoverStyle),
        class: "va-popover__content",
        role: "tooltip"
      }, [
        (_ctx.showIconComputed)
          ? (openBlock(), createElementBlock("div", _hoisted_1, [
              renderSlot(_ctx.$slots, "icon", {}, () => [
                createVNode(_component_va_icon, {
                  name: _ctx.$props.icon,
                  color: _ctx.textColorComputed
                }, null, 8 /* PROPS */, ["name", "color"])
              ])
            ]))
          : createCommentVNode("v-if", true),
        (_ctx.showPopoverContentComputed)
          ? (openBlock(), createElementBlock("div", _hoisted_2, [
              (_ctx.showTitleComputed)
                ? (openBlock(), createElementBlock("div", _hoisted_3, [
                    renderSlot(_ctx.$slots, "title", {}, () => [
                      createTextVNode(toDisplayString(_ctx.$props.title), 1 /* TEXT */)
                    ])
                  ]))
                : createCommentVNode("v-if", true),
              (_ctx.showBodyComputed)
                ? (openBlock(), createElementBlock("div", _hoisted_4, [
                    renderSlot(_ctx.$slots, "body", {}, () => [
                      createTextVNode(toDisplayString(_ctx.$props.message), 1 /* TEXT */)
                    ])
                  ]))
                : createCommentVNode("v-if", true)
            ]))
          : createCommentVNode("v-if", true)
      ], 4 /* STYLE */)
    ]),
    anchor: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3 /* FORWARDED */
  }, 16 /* FULL_PROPS */, ["model-value", "close-on-click-outside", "offset"]))
}

script.render = render;
script.__file = "src/components/va-popover/VaPopover.vue";

const VaPopover = withConfigTransport(script);

export { VaPopover };
//# sourceMappingURL=index41.js.map

import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, shallowRef, computed, resolveComponent, openBlock, createBlock, normalizeClass, normalizeStyle, withCtx, createElementVNode, mergeProps, toHandlers, withKeys, withModifiers, createElementBlock, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from 'vue';
import { e as pick_1 } from './usePopover.js';
import { g as generateUniqueId } from './utils.js';
import { u as useBem } from './useBem.js';
import { u as useColors } from './useColors.js';
import './global-config.js';
import { u as useKeyboardOnlyFocus } from './useKeyboardOnlyFocus.js';
import { u as useSelectableEmits, a as useSelectableProps, b as useSelectable } from './useSelectable.js';
import { u as useTextColor } from './useTextColor.js';
import { VaProgressCircle } from './index43.js';
import { s as script$1 } from './VaMessageListWrapper.js';
import './VaConfig.js';
import './isSymbol.js';
import './ssr-utils.js';
import './global-utils.js';
import './_createCompounder.js';
import 'colortranslator';
import './global-properties.js';
import './useStateful.js';
import './useLoading.js';
import './index67.js';
import './useSyncProp.js';
import './useFocus.js';
import './consts.js';
import './clamp.js';
import './toNumber.js';
import './useSize.js';

var script = defineComponent({
    name: 'VaSwitch',
    components: { VaProgressCircle, VaMessageListWrapper: script$1 },
    emits: [
        ...useSelectableEmits,
        'focus', 'blur', 'update:modelValue',
    ],
    props: {
        ...useSelectableProps,
        id: { type: String, default: '' },
        name: { type: String, default: '' },
        modelValue: {
            type: [Boolean, Array, String, Object],
            default: false,
        },
        trueLabel: { type: String, default: null },
        falseLabel: { type: String, default: null },
        trueInnerLabel: { type: String, default: null },
        falseInnerLabel: { type: String, default: null },
        color: { type: String, default: 'primary' },
        offColor: { type: String, default: 'gray' },
        size: {
            type: String,
            default: 'medium',
            validator: (value) => ['medium', 'small', 'large'].includes(value),
        },
    },
    setup(props, { emit }) {
        const elements = {
            container: shallowRef(),
            input: shallowRef(),
            label: shallowRef(),
        };
        const { getColor } = useColors();
        const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus();
        const { isChecked, computedError, isIndeterminate, computedErrorMessages, ...selectable } = useSelectable(props, emit, elements);
        const computedBackground = computed(() => getColor(isChecked.value ? props.color : props.offColor));
        const { textColorComputed } = useTextColor(computedBackground);
        const computedInnerLabel = computed(() => {
            if (props.trueInnerLabel && isChecked.value) {
                return props.trueInnerLabel;
            }
            if (props.falseInnerLabel && !isChecked.value) {
                return props.falseInnerLabel;
            }
            return '';
        });
        const computedLabel = computed(() => {
            if (props.trueLabel && isChecked.value) {
                return props.trueLabel;
            }
            if (props.falseLabel && !isChecked.value) {
                return props.falseLabel;
            }
            return props.label;
        });
        const computedClass = useBem('va-switch', () => ({
            ...pick_1(props, ['readonly', 'disabled', 'leftLabel']),
            checked: isChecked.value,
            indeterminate: isIndeterminate.value,
            small: props.size === 'small',
            large: props.size === 'large',
            error: computedError.value,
            onKeyboardFocus: hasKeyboardFocus.value,
        }));
        const styleComputed = computed(() => ({
            lineHeight: computedErrorMessages.value.length ? 1 : 0,
        }));
        const progressCircleSize = computed(() => {
            const size = { small: '15px', medium: '20px', large: '25px' };
            return size[props.size];
        });
        const trackStyle = computed(() => ({
            borderColor: props.error ? getColor('danger') : '',
            backgroundColor: computedBackground.value,
        }));
        const labelStyle = computed(() => ({
            color: props.error ? getColor('danger') : '',
        }));
        const trackLabelStyle = computed(() => ({
            color: textColorComputed.value,
        }));
        const ariaLabelIdComputed = computed(() => `aria-label-id-${generateUniqueId()}`);
        const inputAttributesComputed = computed(() => ({
            id: props.id,
            name: props.name,
            disabled: props.disabled,
            readonly: props.readonly,
            ariaDisabled: props.disabled,
            ariaReadOnly: props.readonly,
            ariaChecked: !!props.modelValue,
            ariaLabelledby: ariaLabelIdComputed.value,
            'aria-invalid': !!computedErrorMessages.value.length,
            'aria-errormessage': typeof computedErrorMessages.value === 'string'
                ? computedErrorMessages.value
                : computedErrorMessages.value.join(', '),
        }));
        return {
            ...selectable,
            computedErrorMessages,
            isChecked,
            computedError,
            isIndeterminate,
            keyboardFocusListeners,
            computedInnerLabel,
            computedLabel,
            computedClass,
            styleComputed,
            progressCircleSize,
            trackStyle,
            labelStyle,
            trackLabelStyle,
            ariaLabelIdComputed,
            inputAttributesComputed,
        };
    },
});

const _hoisted_1 = { class: "va-switch__checker-wrapper" };
const _hoisted_2 = { class: "va-switch__checker" };
const _hoisted_3 = ["id"];

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_progress_circle = resolveComponent("va-progress-circle");
  const _component_VaMessageListWrapper = resolveComponent("VaMessageListWrapper");

  return (openBlock(), createBlock(_component_VaMessageListWrapper, {
    class: normalizeClass(["va-switch", _ctx.computedClass]),
    style: normalizeStyle(_ctx.styleComputed),
    disabled: _ctx.$props.disabled,
    success: _ctx.$props.success,
    messages: _ctx.$props.messages,
    error: _ctx.computedError,
    "error-messages": _ctx.computedErrorMessages,
    "error-count": _ctx.$props.errorCount
  }, {
    default: withCtx(() => [
      createElementVNode("div", {
        ref: "container",
        class: "va-switch__container",
        tabindex: "-1",
        onBlur: _cache[7] || (_cache[7] = (...args) => (_ctx.onBlur && _ctx.onBlur(...args)))
      }, [
        createElementVNode("div", {
          class: "va-switch__inner",
          onClick: _cache[3] || (_cache[3] = (...args) => (_ctx.toggleSelection && _ctx.toggleSelection(...args)))
        }, [
          createElementVNode("input", mergeProps({
            ref: "input",
            type: "checkbox",
            class: "va-switch__input",
            role: "switch"
          }, _ctx.inputAttributesComputed, toHandlers(_ctx.keyboardFocusListeners), {
            onFocus: _cache[0] || (_cache[0] = (...args) => (_ctx.onFocus && _ctx.onFocus(...args))),
            onBlur: _cache[1] || (_cache[1] = (...args) => (_ctx.onBlur && _ctx.onBlur(...args))),
            onKeypress: _cache[2] || (_cache[2] = withKeys(withModifiers((...args) => (_ctx.toggleSelection && _ctx.toggleSelection(...args)), ["prevent"]), ["enter"]))
          }), null, 16 /* FULL_PROPS */),
          createElementVNode("div", {
            class: "va-switch__track",
            "aria-hidden": "true",
            style: normalizeStyle(_ctx.trackStyle)
          }, [
            (_ctx.computedInnerLabel || _ctx.$slots.innerLabel)
              ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: "va-switch__track-label",
                  style: normalizeStyle(_ctx.trackLabelStyle)
                }, [
                  renderSlot(_ctx.$slots, "innerLabel", {}, () => [
                    createTextVNode(toDisplayString(_ctx.computedInnerLabel), 1 /* TEXT */)
                  ])
                ], 4 /* STYLE */))
              : createCommentVNode("v-if", true),
            createElementVNode("div", _hoisted_1, [
              createElementVNode("span", _hoisted_2, [
                (_ctx.$props.loading)
                  ? (openBlock(), createBlock(_component_va_progress_circle, {
                      key: 0,
                      indeterminate: "",
                      size: _ctx.progressCircleSize,
                      color: _ctx.trackStyle.backgroundColor
                    }, null, 8 /* PROPS */, ["size", "color"]))
                  : createCommentVNode("v-if", true)
              ])
            ])
          ], 4 /* STYLE */)
        ]),
        (_ctx.computedLabel || _ctx.$slots.default)
          ? (openBlock(), createElementBlock("div", {
              key: 0,
              ref: "label",
              class: "va-switch__label",
              style: normalizeStyle(_ctx.labelStyle),
              id: _ctx.ariaLabelIdComputed,
              onBlur: _cache[4] || (_cache[4] = (...args) => (_ctx.onBlur && _ctx.onBlur(...args))),
              onClick: _cache[5] || (_cache[5] = (...args) => (_ctx.toggleSelection && _ctx.toggleSelection(...args))),
              onKeydown: _cache[6] || (_cache[6] = withKeys(withModifiers((...args) => (_ctx.toggleSelection && _ctx.toggleSelection(...args)), ["stop"]), ["enter"]))
            }, [
              renderSlot(_ctx.$slots, "default", {}, () => [
                createTextVNode(toDisplayString(_ctx.computedLabel), 1 /* TEXT */)
              ])
            ], 44 /* STYLE, PROPS, HYDRATE_EVENTS */, _hoisted_3))
          : createCommentVNode("v-if", true)
      ], 544 /* HYDRATE_EVENTS, NEED_PATCH */)
    ]),
    _: 3 /* FORWARDED */
  }, 8 /* PROPS */, ["class", "style", "disabled", "success", "messages", "error", "error-messages", "error-count"]))
}

script.render = render;
script.__file = "src/components/va-switch/VaSwitch.vue";

const VaSwitch = withConfigTransport(script);

export { VaSwitch };
//# sourceMappingURL=index49.js.map

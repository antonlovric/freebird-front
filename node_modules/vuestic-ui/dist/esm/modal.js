import { V as VaModal } from './VaModal.js';
import { h, render, nextTick } from 'vue';

const getNodeProps = (vNode) => {
    var _a;
    return ((_a = vNode.component) === null || _a === void 0 ? void 0 : _a.props) || {};
};
const destroy = (el, vNode) => {
    if (el) {
        render(null, el);
        el.remove();
    }
    el = null;
};
const mount = (component, { props, appContext } = {}) => {
    var _a;
    const el = document === null || document === void 0 ? void 0 : document.createElement('div');
    // eslint-disable-next-line prefer-const
    let vNode;
    // handling the case when 'withoutTransitions = false'
    const onClose = (event) => {
        var _a;
        (_a = props === null || props === void 0 ? void 0 : props.onClose) === null || _a === void 0 ? void 0 : _a.call(props, event);
        destroy(el);
    };
    // handling the case when 'withoutTransitions = true'
    const onUpdateModelValue = (value) => {
        var _a;
        (_a = props === null || props === void 0 ? void 0 : props['onUpdate:modelValue']) === null || _a === void 0 ? void 0 : _a.call(props, value);
        if ((props === null || props === void 0 ? void 0 : props.withoutTransitions) && !value) {
            nextTick(() => {
                destroy(el);
            });
        }
    };
    vNode = h(component, {
        ...props,
        stateful: (_a = props === null || props === void 0 ? void 0 : props.stateful) !== null && _a !== void 0 ? _a : true,
        modelValue: true,
        onClose,
        'onUpdate:modelValue': onUpdateModelValue,
    });
    if (appContext) {
        vNode.appContext = appContext;
    }
    if (el) {
        render(vNode, el);
    }
    return { vNode, el };
};
const getModalOptions = (options) => typeof options === 'string'
    ? { message: options }
    : options;
const createModalInstance = (customProps, appContext) => {
    const { vNode, el } = mount(VaModal, { appContext, props: getModalOptions(customProps) });
    if (el && vNode.el && getNodeProps(vNode)) {
        document.body.appendChild(el.childNodes[0]);
    }
    return vNode;
};

export { createModalInstance as c };
//# sourceMappingURL=modal.js.map

import { getCurrentInstance, computed } from 'vue';
import { u as useGlobalConfig } from './global-config.js';

const sizesConfig = {
    defaultSize: 48,
    sizes: {
        small: 32,
        medium: 48,
        large: 64,
    },
};
const fontSizesConfig = {
    defaultSize: 1,
    sizes: {
        small: 0.75,
        medium: 1,
        large: 1.25,
    },
};
/**
 * You could add these props to any component by destructuring them inside props option.
 * @example
 * props: { ...useSizeProps, componentsOwnProp, etc. }
 * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision
 */
const useSizeProps = {
    size: {
        type: [String, Number],
        default: '',
        validator: (size) => {
            return typeof size === 'string' || typeof size === 'number';
        },
    },
    sizesConfig: {
        type: Object,
        default: () => sizesConfig,
    },
    fontSizesConfig: {
        type: Object,
        default: () => fontSizesConfig,
    },
};
const fontRegex = /(?<fontSize>\d+)(?<extension>px|rem)/i;
const convertToRem = (px) => px / 16 - 0.5;
const useSize = (props, componentName) => {
    var _a;
    if (componentName === void 0) { componentName = (_a = getCurrentInstance()) === null || _a === void 0 ? void 0 : _a.type.name; }
    const { getGlobalConfig } = useGlobalConfig();
    const sizesConfigGlobal = computed(() => {
        var _a, _b;
        return componentName
            ? (_b = (_a = getGlobalConfig().components) === null || _a === void 0 ? void 0 : _a[componentName]) === null || _b === void 0 ? void 0 : _b.sizesConfig
            : undefined;
    });
    const sizeComputed = computed(() => {
        var _a, _b, _c;
        const { defaultSize, sizes } = props.sizesConfig;
        const defaultSizeGlobal = (_a = sizesConfigGlobal.value) === null || _a === void 0 ? void 0 : _a.defaultSize;
        if (!props.size) {
            return `${defaultSizeGlobal || defaultSize}px`;
        }
        if (typeof props.size === 'string') {
            const sizeFromGlobalConfig = (_c = (_b = sizesConfigGlobal.value) === null || _b === void 0 ? void 0 : _b.sizes) === null || _c === void 0 ? void 0 : _c[props.size];
            const sizeFromProps = sizes[props.size];
            if (sizeFromGlobalConfig) {
                return `${sizeFromGlobalConfig}px`;
            }
            if (sizeFromProps) {
                return `${sizeFromProps}px`;
            }
            return props.size;
        }
        return `${props.size}px`;
    });
    const fontSizeInRem = computed(() => {
        const { defaultSize, sizes } = props.fontSizesConfig;
        if (!props.size) {
            return defaultSize;
        }
        if (typeof props.size === 'string') {
            if (props.size in sizes) {
                return sizes[props.size];
            }
            const fontSizeParsed = props.size.match(fontRegex);
            if (!fontSizeParsed || !fontSizeParsed.groups) {
                throw new Error('Size prop should be either valid string or number');
            }
            const { extension, fontSize } = fontSizeParsed.groups;
            return extension === 'rem' ? +fontSize : convertToRem(+fontSize);
        }
        return convertToRem(props.size);
    });
    const fontSizeComputed = computed(() => `${fontSizeInRem.value}rem`);
    return {
        sizeComputed,
        fontSizeComputed,
        fontSizeInRem,
    };
};

export { useSize as a, useSizeProps as u };
//# sourceMappingURL=useSize.js.map

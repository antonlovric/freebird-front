import { w as withConfigTransport } from './withConfigTransport.js';
import { computed, toRef, defineComponent, resolveComponent, openBlock, createBlock, Transition, withCtx, createElementVNode, normalizeStyle, normalizeClass, createElementBlock, renderSlot, createVNode, createCommentVNode, createTextVNode, toDisplayString, withKeys } from 'vue';
import { g as generateUniqueId } from './utils.js';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import 'colortranslator';
import { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from './useStateful.js';
import { u as useColors } from './useColors.js';
import { u as useTextColor } from './useTextColor.js';
import { VaIcon } from './index31.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';
import './VaIcon.js';
import './useSize.js';

const useAlertStyles = (props) => {
    const { getColor } = useColors();
    const isTransparentBackground = computed(() => Boolean(props.outline || props.border));
    const { textColorComputed } = useTextColor(toRef(props, 'color'), isTransparentBackground);
    const colorComputed = computed(() => getColor(props.color));
    const alertStyle = computed(() => {
        let background = colorComputed.value;
        let boxShadow = 'none';
        if (props.outline) {
            background = 'transparent';
        }
        if (props.border) {
            background = 'var(--va-white)';
            boxShadow = 'var(--va-alert-box-shadow)';
        }
        return {
            border: props.outline ? `1px solid ${colorComputed.value}` : '',
            padding: props.dense ? 'var(--va-alert-padding-y-dense) var(--va-alert-padding-x)' : '',
            background,
            boxShadow,
        };
    });
    const contentStyle = computed(() => {
        return {
            alignItems: props.center ? 'center' : '',
            color: props.border ? getColor('dark') : textColorComputed.value,
        };
    });
    const titleStyle = computed(() => {
        return { color: textColorComputed.value };
    });
    const borderStyle = computed(() => ({
        backgroundColor: props.borderColor
            ? getColor(props.borderColor)
            : colorComputed.value,
    }));
    return {
        alertStyle,
        contentStyle,
        titleStyle,
        borderStyle,
    };
};

var script = defineComponent({
    name: 'VaAlert',
    components: { VaIcon },
    emits: useStatefulEmits,
    props: {
        ...useStatefulProps,
        modelValue: { type: Boolean, default: true },
        color: { type: String, default: 'primary' },
        textColor: { type: String, default: '' },
        title: { type: String, default: '' },
        description: { type: String, default: '' },
        icon: { type: String, default: '' },
        closeText: { type: String, default: '' },
        closeable: { type: Boolean, default: false },
        dense: { type: Boolean, default: false },
        outline: { type: Boolean, default: false },
        center: { type: Boolean, default: false },
        borderColor: { type: String, default: '' },
        border: {
            type: String,
            default: '',
            validator: (value) => ['top', 'right', 'bottom', 'left', ''].includes(value),
        },
    },
    setup(props, { slots, emit }) {
        const alertStyles = useAlertStyles(props);
        const { valueComputed } = useStateful(props, emit);
        const hide = () => { valueComputed.value = false; };
        const hasIcon = computed(() => props.icon || slots.icon);
        const hasTitle = computed(() => props.title || slots.title);
        const borderClass = computed(() => `va-alert__border--${props.border}`);
        const closeIcon = computed(() => props.closeText || 'close');
        const uniqueId = computed(generateUniqueId);
        const titleIdComputed = computed(() => `aria-title-${uniqueId.value}`);
        const descriptionIdComputed = computed(() => `aria-description-${uniqueId.value}`);
        return {
            ...alertStyles,
            valueComputed,
            hasIcon,
            hasTitle,
            borderClass,
            closeIcon,
            hide,
            titleIdComputed,
            descriptionIdComputed,
        };
    },
});

const _hoisted_1 = ["role", "aria-labelledby", "aria-describedby"];
const _hoisted_2 = ["id"];
const _hoisted_3 = ["id"];
const _hoisted_4 = {
  key: 1,
  class: "va-alert__close"
};
const _hoisted_5 = ["aria-label"];

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");

  return (_ctx.valueComputed)
    ? (openBlock(), createBlock(Transition, {
        key: 0,
        name: "fade"
      }, {
        default: withCtx(() => [
          createElementVNode("div", {
            class: "va-alert",
            style: normalizeStyle(_ctx.alertStyle),
            role: _ctx.closeable ? 'alertdialog' : 'alert',
            "aria-labelledby": _ctx.titleIdComputed,
            "aria-describedby": _ctx.descriptionIdComputed
          }, [
            createElementVNode("div", {
              style: normalizeStyle(_ctx.borderStyle),
              class: normalizeClass([_ctx.borderClass, "va-alert__border"])
            }, null, 6 /* CLASS, STYLE */),
            (_ctx.hasIcon)
              ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  style: normalizeStyle(_ctx.contentStyle),
                  class: "va-alert__icon",
                  "aria-hidden": "true"
                }, [
                  renderSlot(_ctx.$slots, "icon", {}, () => [
                    createVNode(_component_va_icon, { name: _ctx.icon }, null, 8 /* PROPS */, ["name"])
                  ])
                ], 4 /* STYLE */))
              : createCommentVNode("v-if", true),
            createElementVNode("div", {
              style: normalizeStyle(_ctx.contentStyle),
              class: "va-alert__content"
            }, [
              (_ctx.hasTitle)
                ? (openBlock(), createElementBlock("div", {
                    key: 0,
                    style: normalizeStyle(_ctx.titleStyle),
                    class: "va-alert__title",
                    id: _ctx.titleIdComputed
                  }, [
                    renderSlot(_ctx.$slots, "title", {}, () => [
                      createTextVNode(toDisplayString(_ctx.title), 1 /* TEXT */)
                    ])
                  ], 12 /* STYLE, PROPS */, _hoisted_2))
                : createCommentVNode("v-if", true),
              createElementVNode("span", { id: _ctx.descriptionIdComputed }, [
                renderSlot(_ctx.$slots, "default", {}, () => [
                  createTextVNode(toDisplayString(_ctx.$props.description), 1 /* TEXT */)
                ])
              ], 8 /* PROPS */, _hoisted_3)
            ], 4 /* STYLE */),
            (_ctx.closeable)
              ? (openBlock(), createElementBlock("div", _hoisted_4, [
                  createElementVNode("div", {
                    style: normalizeStyle(_ctx.contentStyle),
                    class: "va-alert__close--closeable",
                    role: "button",
                    tabindex: "0",
                    "aria-label": _ctx.closeText || 'close alert',
                    onClick: _cache[0] || (_cache[0] = $event => (_ctx.hide())),
                    onKeydown: [
                      _cache[1] || (_cache[1] = withKeys($event => (_ctx.hide()), ["space"])),
                      _cache[2] || (_cache[2] = withKeys($event => (_ctx.hide()), ["enter"]))
                    ]
                  }, [
                    renderSlot(_ctx.$slots, "close", {}, () => [
                      (!_ctx.closeText)
                        ? (openBlock(), createBlock(_component_va_icon, {
                            key: 0,
                            name: _ctx.closeIcon,
                            size: "small"
                          }, null, 8 /* PROPS */, ["name"]))
                        : createCommentVNode("v-if", true),
                      createTextVNode(" " + toDisplayString(_ctx.closeText), 1 /* TEXT */)
                    ])
                  ], 44 /* STYLE, PROPS, HYDRATE_EVENTS */, _hoisted_5)
                ]))
              : createCommentVNode("v-if", true)
          ], 12 /* STYLE, PROPS */, _hoisted_1)
        ]),
        _: 3 /* FORWARDED */
      }))
    : createCommentVNode("v-if", true)
}

script.render = render;
script.__file = "src/components/va-alert/VaAlert.vue";

const VaAlert = withConfigTransport(script);

export { VaAlert };
//# sourceMappingURL=index3.js.map

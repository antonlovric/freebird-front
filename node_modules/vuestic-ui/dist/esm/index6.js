import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, ref, computed, onMounted, onBeforeUnmount, resolveComponent, openBlock, createElementBlock, normalizeStyle, withKeys, withModifiers, renderSlot, createVNode, createCommentVNode } from 'vue';
import { VaButton } from './index12.js';
import './VaConfig.js';
import './global-config.js';
import './global-properties.js';
import './VaButton.js';
import './usePopover.js';
import './isSymbol.js';
import './ssr-utils.js';
import './global-utils.js';
import './useColors.js';
import 'colortranslator';
import './useLoading.js';
import './useRouterLink.js';
import './useSize.js';
import './useTextColor.js';
import './index31.js';
import './VaIcon.js';
import './index43.js';
import './clamp.js';
import './toNumber.js';

var script = defineComponent({
    name: 'VaBacktop',
    components: { VaButton },
    props: {
        target: {
            type: [Object, String],
            default: undefined,
        },
        visibilityHeight: { type: Number, default: 300 },
        speed: { type: Number, default: 50 },
        verticalOffset: { type: String, default: '1rem' },
        horizontalOffset: { type: String, default: '1rem' },
        color: { type: String, default: '' },
        horizontalPosition: {
            type: String,
            default: 'right',
            validator: (value) => ['right', 'left'].includes(value),
        },
        verticalPosition: {
            type: String,
            default: 'bottom',
            validator: (value) => ['bottom', 'top'].includes(value),
        },
    },
    setup(props) {
        const targetScrollValue = ref(0);
        const computedStyle = computed(() => ({
            [props.verticalPosition]: props.verticalOffset,
            [props.horizontalPosition]: props.horizontalOffset,
        }));
        let targetElement;
        const getTargetElement = () => {
            if (!props.target) {
                return window;
            }
            if (typeof props.target === 'string') {
                return document.querySelector(props.target);
            }
            return props.target;
        };
        const scrolled = ref(false);
        const interval = ref(0);
        const scrollToTop = () => {
            if (scrolled.value) {
                return;
            }
            scrolled.value = true;
            if (targetElement instanceof Window) {
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth',
                });
                return;
            }
            interval.value = window.setInterval(() => {
                if (targetElement instanceof Element) {
                    if (targetElement.scrollTop === 0) {
                        clearInterval(interval.value);
                        scrolled.value = false;
                    }
                    else {
                        const next = Math.floor(targetElement.scrollTop - props.speed);
                        targetElement.scrollTo(0, next);
                    }
                }
            }, 15);
        };
        const handleScroll = () => {
            targetScrollValue.value = targetElement instanceof Window
                ? targetElement.scrollY
                : targetElement.scrollTop;
        };
        const visible = computed(() => targetScrollValue.value > props.visibilityHeight);
        onMounted(() => {
            targetElement = getTargetElement();
            targetElement.addEventListener('scroll', handleScroll, true);
        });
        onBeforeUnmount(() => targetElement === null || targetElement === void 0 ? void 0 : targetElement.removeEventListener('scroll', handleScroll));
        return {
            computedStyle,
            visible,
            scrollToTop,
        };
    },
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");

  return (_ctx.visible)
    ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: "va-backtop",
        role: "button",
        "aria-label": "back to top",
        style: normalizeStyle(_ctx.computedStyle),
        onClick: _cache[0] || (_cache[0] = (...args) => (_ctx.scrollToTop && _ctx.scrollToTop(...args))),
        onKeydown: _cache[1] || (_cache[1] = withKeys(withModifiers((...args) => (_ctx.scrollToTop && _ctx.scrollToTop(...args)), ["stop"]), ["enter"]))
      }, [
        renderSlot(_ctx.$slots, "default", {}, () => [
          createVNode(_component_va_button, {
            "aria-hidden": "true",
            icon: "expand_less",
            color: _ctx.color
          }, null, 8 /* PROPS */, ["color"])
        ])
      ], 36 /* STYLE, HYDRATE_EVENTS */))
    : createCommentVNode("v-if", true)
}

script.render = render;
script.__file = "src/components/va-backtop/VaBacktop.vue";

const VaBacktop = withConfigTransport(script);

export { VaBacktop };
//# sourceMappingURL=index6.js.map

import { ref, watch, computed } from 'vue';

/**
 * You could add these props to any component by destructuring them inside props option.
 * @example
 * props: { ...useStatefulProps, componentsOwnProp, etc. }
 * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision
 */
const useStatefulProps = {
    stateful: { type: Boolean, default: false },
    modelValue: { type: undefined },
};
const useStatefulEmits = ['update:modelValue'];
/**
 * Returns `valueComputed` that is proxy for `modelValue`
 * if `stateful` prop is `false`
 * Record<any, any> & Record<'modelValue', T>
 */
function useStateful(props, emit, defaultValue) {
    const valueState = ref(defaultValue === undefined ? props.modelValue : defaultValue);
    let unwatchModelValue;
    const watchModelValue = () => {
        unwatchModelValue = watch(() => props.modelValue, (modelValue) => {
            valueState.value = modelValue;
        });
    };
    watch(() => props.stateful, (stateful) => {
        stateful ? watchModelValue() : unwatchModelValue === null || unwatchModelValue === void 0 ? void 0 : unwatchModelValue();
    }, { immediate: true });
    const valueComputed = computed({
        get() {
            if (props.stateful) {
                return valueState.value;
            }
            return props.modelValue;
        },
        set(value) {
            if (props.stateful) {
                valueState.value = value;
            }
            emit('update:modelValue', value);
        },
    });
    return { valueComputed };
}

export { useStatefulProps as a, useStateful as b, useStatefulEmits as u };
//# sourceMappingURL=useStateful.js.map

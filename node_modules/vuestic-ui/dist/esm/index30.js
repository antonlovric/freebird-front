import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, openBlock, createElementBlock, renderSlot, normalizeProps, guardReactiveProps } from 'vue';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import 'colortranslator';
import { a as useStatefulProps, u as useStatefulEmits, b as useStateful } from './useStateful.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';

var script = defineComponent({
    name: 'VaHover',
    props: {
        ...useStatefulProps,
        disabled: { type: Boolean, default: false },
        modelValue: { type: Boolean, default: false },
    },
    emits: useStatefulEmits,
    setup(props, { emit }) {
        const { valueComputed } = useStateful(props, emit);
        const onMouseEnter = () => {
            if (!props.disabled) {
                valueComputed.value = true;
            }
        };
        const onMouseLeave = () => {
            if (!props.disabled) {
                valueComputed.value = false;
            }
        };
        return { onMouseEnter, onMouseLeave, valueComputed };
    },
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("div", {
    class: "va-hover",
    onMouseenter: _cache[0] || (_cache[0] = (...args) => (_ctx.onMouseEnter && _ctx.onMouseEnter(...args))),
    onMouseleave: _cache[1] || (_cache[1] = (...args) => (_ctx.onMouseLeave && _ctx.onMouseLeave(...args)))
  }, [
    renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps({ hover: _ctx.valueComputed })))
  ], 32 /* HYDRATE_EVENTS */))
}

script.render = render;
script.__file = "src/components/va-hover/VaHover.vue";

const VaHover = withConfigTransport(script);

export { VaHover };
//# sourceMappingURL=index30.js.map

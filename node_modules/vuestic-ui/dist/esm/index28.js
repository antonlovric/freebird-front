import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, resolveComponent, openBlock, createElementBlock, createVNode, withCtx, createElementVNode, createTextVNode, ref, createBlock, normalizeClass, toDisplayString, withKeys, withModifiers, computed, onMounted, watch, createCommentVNode, normalizeStyle, Fragment, renderList, shallowRef, renderSlot } from 'vue';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import { e as colorToRgba, u as useColors } from './useColors.js';
import { VaButton } from './index12.js';
import { VaCard } from './index13.js';
import { VaIcon } from './index31.js';
import { V as VaModal } from './VaModal.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';
import 'colortranslator';
import './VaButton.js';
import './useLoading.js';
import './useRouterLink.js';
import './useSize.js';
import './useTextColor.js';
import './index43.js';
import './clamp.js';
import './toNumber.js';
import './VaIcon.js';
import './useAlign.js';
import './useStateful.js';

var script$5 = defineComponent({
    name: 'VaFileUploadUndo',
    components: {
        VaButton,
    },
    emits: ['recover'],
});

const _hoisted_1$5 = { class: "va-file-upload-undo" };
const _hoisted_2$4 = /*#__PURE__*/createElementVNode("span", null, "File was successfully deleted", -1 /* HOISTED */);
const _hoisted_3$4 = /*#__PURE__*/createTextVNode(" Undo ");

function render$5(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");

  return (openBlock(), createElementBlock("div", _hoisted_1$5, [
    _hoisted_2$4,
    createVNode(_component_va_button, {
      class: "va-file-upload-undo__button",
      size: "small",
      outline: "",
      onClick: _cache[0] || (_cache[0] = $event => (_ctx.$emit('recover')))
    }, {
      default: withCtx(() => [
        _hoisted_3$4
      ]),
      _: 1 /* STABLE */
    })
  ]))
}

script$5.render = render$5;
script$5.__file = "src/components/va-file-upload/VaFileUploadUndo/VaFileUploadUndo.vue";

const VaFileUploadUndo = withConfigTransport(script$5);

var script$4 = defineComponent({
    name: 'VaFileUploadListItem',
    components: {
        VaIcon,
        VaCard,
        VaFileUploadUndo,
    },
    emits: ['remove'],
    props: {
        file: { type: Object, default: null },
        color: { type: String, default: 'success' },
        undo: { type: Boolean, default: false },
        undoDuration: { type: Number, default: 3000 },
    },
    setup(props, { emit }) {
        const removed = ref(false);
        const removeFile = () => {
            if (props.undo) {
                removed.value = true;
                setTimeout(() => {
                    if (removed.value) {
                        emit('remove');
                        removed.value = false;
                    }
                }, props.undoDuration);
            }
            else {
                emit('remove');
                removed.value = false;
            }
        };
        const recoverFile = () => { removed.value = false; };
        return {
            removed,
            removeFile,
            recoverFile,
        };
    },
});

const _hoisted_1$4 = {
  key: 1,
  class: "va-file-upload-list-item__content"
};
const _hoisted_2$3 = { class: "va-file-upload-list-item__name" };
const _hoisted_3$3 = { class: "va-file-upload-list-item__size" };

function render$4(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_file_upload_undo = resolveComponent("va-file-upload-undo");
  const _component_va_icon = resolveComponent("va-icon");
  const _component_va_card = resolveComponent("va-card");

  return (openBlock(), createBlock(_component_va_card, {
    class: normalizeClass(["va-file-upload-list-item", {'file-upload-list-item--undo': _ctx.removed}]),
    stripe: _ctx.removed && _ctx.undo,
    stripeColor: _ctx.color,
    "no-margin": "",
    "no-padding": ""
  }, {
    default: withCtx(() => [
      (_ctx.removed && _ctx.undo)
        ? (openBlock(), createBlock(_component_va_file_upload_undo, {
            key: 0,
            onRecover: _ctx.recoverFile
          }, null, 8 /* PROPS */, ["onRecover"]))
        : (openBlock(), createElementBlock("div", _hoisted_1$4, [
            createElementVNode("div", _hoisted_2$3, toDisplayString(_ctx.file && _ctx.file.name), 1 /* TEXT */),
            createElementVNode("div", _hoisted_3$3, toDisplayString(_ctx.file && _ctx.file.size), 1 /* TEXT */),
            createVNode(_component_va_icon, {
              class: "va-file-upload-list-item__delete",
              name: "clear",
              role: "button",
              "aria-hidden": "false",
              "aria-label": "remove file",
              tabindex: "0",
              color: "danger",
              onClick: _ctx.removeFile,
              onKeydown: [
                withKeys(withModifiers(_ctx.removeFile, ["stop"]), ["enter"]),
                withKeys(withModifiers(_ctx.removeFile, ["stop"]), ["space"])
              ]
            }, null, 8 /* PROPS */, ["onClick", "onKeydown"])
          ]))
    ]),
    _: 1 /* STABLE */
  }, 8 /* PROPS */, ["class", "stripe", "stripeColor"]))
}

script$4.render = render$4;
script$4.__file = "src/components/va-file-upload/VaFileUploadListItem/VaFileUploadListItem.vue";

const VaFileUploadListItem = withConfigTransport(script$4);

var script$3 = defineComponent({
    name: 'VaFileUploadGalleryItem',
    components: { VaFileUploadUndo, VaButton },
    emits: ['remove'],
    props: {
        file: { type: Object, default: null },
        color: { type: String, default: 'success' },
        undo: { type: Boolean, default: false },
        undoDuration: { type: Number, default: 3000 },
    },
    setup(props, { emit }) {
        const previewImage = ref('');
        const removed = ref(false);
        const isFocused = ref(false);
        const overlayStyles = computed(() => ({ backgroundColor: colorToRgba(props.color, 0.7) }));
        const removeImage = () => {
            if (props.undo) {
                removed.value = true;
                setTimeout(() => {
                    if (!removed.value) {
                        return;
                    }
                    emit('remove');
                    removed.value = false;
                }, props.undoDuration);
            }
            else {
                emit('remove');
                removed.value = false;
            }
        };
        const recoverImage = () => { removed.value = false; };
        const convertToImg = () => {
            if (!props.file.name || !props.file.image) {
                return;
            }
            if (props.file.image.url) {
                previewImage.value = props.file.image.url;
            }
            else if (props.file.image instanceof File) {
                const reader = new FileReader();
                reader.readAsDataURL(props.file.image);
                reader.onload = (e) => {
                    var _a, _b;
                    if (((_a = e.target) === null || _a === void 0 ? void 0 : _a.result).includes('image')) {
                        previewImage.value = (_b = e.target) === null || _b === void 0 ? void 0 : _b.result;
                    }
                };
            }
        };
        onMounted(convertToImg);
        watch(() => props.file, convertToImg);
        return {
            previewImage,
            removed,
            isFocused,
            recoverImage,
            overlayStyles,
            removeImage,
        };
    },
});

const _hoisted_1$3 = ["src"];
const _hoisted_2$2 = { class: "va-file-upload-gallery-item__overlay" };
const _hoisted_3$2 = ["title"];

function render$3(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_file_upload_undo = resolveComponent("va-file-upload-undo");
  const _component_va_button = resolveComponent("va-button");

  return (_ctx.removed && _ctx.undo)
    ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(["va-file-upload-gallery-item", { 'va-file-upload-gallery-item--undo': _ctx.removed }])
      }, [
        createVNode(_component_va_file_upload_undo, {
          class: "va-file-upload-gallery-item--undo",
          onRecover: _ctx.recoverImage
        }, null, 8 /* PROPS */, ["onRecover"])
      ], 2 /* CLASS */))
    : (openBlock(), createElementBlock("div", {
        key: 1,
        tabindex: "0",
        class: normalizeClass(["va-file-upload-gallery-item", {
      'file-upload-gallery-item_not-image': !_ctx.previewImage,
      'va-file-upload-gallery-item--focused': _ctx.isFocused,
    }]),
        onFocus: _cache[2] || (_cache[2] = $event => (_ctx.isFocused = true)),
        onBlur: _cache[3] || (_cache[3] = $event => (_ctx.isFocused = false))
      }, [
        (_ctx.previewImage)
          ? (openBlock(), createElementBlock("img", {
              key: 0,
              src: _ctx.previewImage,
              alt: "",
              class: "va-file-upload-gallery-item__image"
            }, null, 8 /* PROPS */, _hoisted_1$3))
          : createCommentVNode("v-if", true),
        createElementVNode("div", _hoisted_2$2, [
          createElementVNode("div", {
            class: "va-file-upload-gallery-item__overlay-background",
            style: normalizeStyle(_ctx.overlayStyles)
          }, null, 4 /* STYLE */),
          createElementVNode("div", {
            class: "va-file-upload-gallery-item__name",
            title: _ctx.file.name
          }, toDisplayString(_ctx.file.name), 9 /* TEXT, PROPS */, _hoisted_3$2),
          createVNode(_component_va_button, {
            flat: "",
            color: "danger",
            icon: "delete_outline",
            class: "va-file-upload-gallery-item__delete",
            "aria-label": "remove image",
            onClick: _ctx.removeImage,
            onFocus: _cache[0] || (_cache[0] = $event => (_ctx.isFocused = true)),
            onBlur: _cache[1] || (_cache[1] = $event => (_ctx.isFocused = false))
          }, null, 8 /* PROPS */, ["onClick"])
        ])
      ], 34 /* CLASS, HYDRATE_EVENTS */))
}

script$3.render = render$3;
script$3.__file = "src/components/va-file-upload/VaFileUploadGalleryItem/VaFileUploadGalleryItem.vue";

const VaFileUploadGalleryItem = withConfigTransport(script$3);

var script$2 = defineComponent({
    name: 'VaFileUploadSingleItem',
    components: {
        VaButton,
    },
    emits: ['remove'],
    props: {
        file: { type: Object, default: null },
    },
});

const _hoisted_1$2 = { class: "va-file-upload-single-item" };
const _hoisted_2$1 = { class: "va-file-upload-single-item__name" };
const _hoisted_3$1 = /*#__PURE__*/createTextVNode(" Delete ");

function render$2(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");

  return (openBlock(), createElementBlock("div", _hoisted_1$2, [
    createElementVNode("div", _hoisted_2$1, toDisplayString(_ctx.file && _ctx.file.name), 1 /* TEXT */),
    createVNode(_component_va_button, {
      class: "va-file-upload-single-item__button",
      size: "small",
      color: "danger",
      flat: "",
      onClick: _cache[0] || (_cache[0] = $event => (_ctx.$emit('remove')))
    }, {
      default: withCtx(() => [
        _hoisted_3$1
      ]),
      _: 1 /* STABLE */
    })
  ]))
}

script$2.render = render$2;
script$2.__file = "src/components/va-file-upload/VaFileUploadSingleItem/VaFileUploadSingleItem.vue";

const VaFileUploadSingleItem = withConfigTransport(script$2);

var script$1 = defineComponent({
    name: 'VaFileUploadList',
    components: {
        VaFileUploadListItem,
        VaFileUploadGalleryItem,
        VaFileUploadSingleItem,
    },
    emits: ['remove', 'removeSingle'],
    props: {
        type: { type: String, default: '' },
        files: { type: Array, default: null },
        color: { type: String, default: 'success' },
        undo: { type: Boolean, default: false },
        undoDuration: { type: Number, default: 3000 },
    },
    setup(props) {
        const filesList = computed(() => props.files.map(convertFile));
        const convertFile = (file) => ({
            name: file.name || file.url || '',
            size: formatSize(file.size),
            date: formatDate(new Date()),
            image: file,
        });
        const formatSize = (bytes) => {
            if (bytes === 0) {
                return '0 Bytes';
            }
            if (!bytes) {
                return '';
            }
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        };
        const formatDate = (date = new Date()) => {
            return date.toLocaleDateString('en-US', {
                hour: '2-digit',
                minute: '2-digit',
                month: 'short',
                day: 'numeric',
                year: 'numeric',
            });
        };
        return {
            filesList,
        };
    },
});

const _hoisted_1$1 = ["role"];

function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_file_upload_list_item = resolveComponent("va-file-upload-list-item");
  const _component_va_file_upload_gallery_item = resolveComponent("va-file-upload-gallery-item");
  const _component_va_file_upload_single_item = resolveComponent("va-file-upload-single-item");

  return (openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-file-upload-list", `va-file-upload-list--${_ctx.type}`]),
    role: _ctx.type !== 'single' ? 'list' : undefined
  }, [
    (_ctx.type === 'list')
      ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(_ctx.filesList, (file, index) => {
          return (openBlock(), createBlock(_component_va_file_upload_list_item, {
            key: file.name,
            role: "listitem",
            file: file,
            color: _ctx.color,
            undo: _ctx.undo,
            undoDuration: _ctx.undoDuration,
            onRemove: $event => (_ctx.$emit('remove', index))
          }, null, 8 /* PROPS */, ["file", "color", "undo", "undoDuration", "onRemove"]))
        }), 128 /* KEYED_FRAGMENT */))
      : createCommentVNode("v-if", true),
    (_ctx.type === 'gallery')
      ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(_ctx.filesList, (file, index) => {
          return (openBlock(), createBlock(_component_va_file_upload_gallery_item, {
            role: "listitem",
            file: file,
            key: file.name,
            color: _ctx.color,
            undo: _ctx.undo,
            undoDuration: _ctx.undoDuration,
            onRemove: $event => (_ctx.$emit('remove', index))
          }, null, 8 /* PROPS */, ["file", "color", "undo", "undoDuration", "onRemove"]))
        }), 128 /* KEYED_FRAGMENT */))
      : createCommentVNode("v-if", true),
    (_ctx.type === 'single' && _ctx.filesList.length)
      ? (openBlock(), createBlock(_component_va_file_upload_single_item, {
          key: 2,
          file: _ctx.filesList[_ctx.filesList.length - 1],
          onRemove: _cache[0] || (_cache[0] = $event => (_ctx.$emit('removeSingle')))
        }, null, 8 /* PROPS */, ["file"]))
      : createCommentVNode("v-if", true)
  ], 10 /* CLASS, PROPS */, _hoisted_1$1))
}

script$1.render = render$1;
script$1.__file = "src/components/va-file-upload/VaFileUploadList/VaFileUploadList.vue";

const VaFileUploadList = withConfigTransport(script$1);

var script = defineComponent({
    name: 'VaFileUpload',
    components: {
        VaModal,
        VaButton,
        VaFileUploadList,
    },
    props: {
        fileTypes: { type: String, default: '' },
        dropzone: { type: Boolean, default: false },
        hideFileList: { type: Boolean, default: false },
        color: { type: String, default: 'primary' },
        disabled: { type: Boolean, default: false },
        undo: { type: Boolean, default: false },
        undoDuration: { type: Number, default: 3000 },
        dropZoneText: { type: String, default: 'Drag’n’drop files or' },
        uploadButtonText: { type: String, default: 'Upload file' },
        modelValue: {
            type: [Object, Array],
            default: () => [],
        },
        type: {
            type: String,
            default: 'list',
            validator: (value) => ['list', 'gallery', 'single'].includes(value),
        },
    },
    emits: ['update:modelValue', 'file-removed', 'file-added'],
    setup(props, { emit }) {
        const fileInputRef = shallowRef();
        const modal = ref(false);
        const dropzoneHighlight = ref(false);
        const { getColor, shiftHSLAColor } = useColors();
        const colorComputed = computed(() => getColor(props.color));
        const computedStyle = computed(() => ({
            backgroundColor: props.dropzone
                ? shiftHSLAColor(colorComputed.value, { a: dropzoneHighlight.value ? -0.82 : -0.92 })
                : 'transparent',
        }));
        const files = computed({
            get() { return Array.isArray(props.modelValue) ? props.modelValue : [props.modelValue]; },
            set(files) {
                if (props.type === 'single') {
                    emit('update:modelValue', files[0]);
                }
                else {
                    emit('update:modelValue', files);
                }
            },
        });
        const validateFiles = (files) => files.filter((file) => {
            const fileName = file.name || file.url;
            if (!fileName) {
                return false;
            }
            if (file.url) {
                return true;
            }
            const MIMETypes = ['audio/*', 'video/*', 'image/*'];
            const isContainedMIMEType = MIMETypes.find((t) => props.fileTypes.includes(t));
            if (isContainedMIMEType) {
                // Do not validate MIMEType because there is too much to validate.
                return true;
            }
            const extension = fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase();
            const isCorrectExt = props.fileTypes.includes(extension);
            if (!isCorrectExt) {
                modal.value = true;
            }
            return isCorrectExt;
        });
        const uploadFile = (e) => {
            var _a, _b;
            const f = ((_a = e.target) === null || _a === void 0 ? void 0 : _a.files) || ((_b = e.dataTransfer) === null || _b === void 0 ? void 0 : _b.files);
            if (!f) {
                return;
            }
            const validatedFiles = props.fileTypes ? validateFiles(Array.from(f)) : f;
            files.value = props.type === 'single' ? validatedFiles : [...files.value, ...validatedFiles];
            emit('file-added', validatedFiles);
        };
        const changeFieldValue = (e) => {
            uploadFile(e);
            if (fileInputRef.value) {
                fileInputRef.value.value = '';
            }
        };
        const removeFile = (index) => {
            if (index in files.value) {
                const removedFile = files.value[index];
                files.value = files.value.filter((item, idx) => idx !== index);
                emit('file-removed', removedFile);
            }
        };
        const removeSingleFile = () => {
            if (files.value.length > 0) {
                const removedFile = files.value[0];
                files.value = [];
                emit('file-removed', removedFile);
            }
        };
        const callFileDialogue = () => {
            if (fileInputRef.value) {
                fileInputRef.value.click();
            }
        };
        onMounted(() => {
            if (Array.isArray(files.value)) {
                files.value = validateFiles(files.value);
            }
        });
        return {
            modal,
            dropzoneHighlight,
            fileInputRef,
            colorComputed,
            computedStyle,
            uploadFile,
            changeFieldValue,
            files,
            removeFile,
            removeSingleFile,
            callFileDialogue,
        };
    },
});

const _hoisted_1 = { class: "va-file-upload__field" };
const _hoisted_2 = {
  key: 0,
  class: "va-file-upload__field__text"
};
const _hoisted_3 = ["accept", "multiple", "disabled"];

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  const _component_va_file_upload_list = resolveComponent("va-file-upload-list");
  const _component_va_modal = resolveComponent("va-modal");

  return (openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-file-upload", { 'va-file-upload--dropzone': _ctx.dropzone }]),
    style: normalizeStyle(_ctx.computedStyle)
  }, [
    renderSlot(_ctx.$slots, "default", {}, () => [
      createElementVNode("div", _hoisted_1, [
        (_ctx.dropzone)
          ? (openBlock(), createElementBlock("div", _hoisted_2, toDisplayString(_ctx.dropZoneText), 1 /* TEXT */))
          : createCommentVNode("v-if", true),
        createVNode(_component_va_button, {
          class: "va-file-upload__field__button",
          disabled: _ctx.disabled,
          color: _ctx.colorComputed,
          style: normalizeStyle({ 'pointer-events': _ctx.dropzoneHighlight ? 'none' : '' }),
          onChange: _ctx.changeFieldValue,
          onClick: _ctx.callFileDialogue
        }, {
          default: withCtx(() => [
            createTextVNode(toDisplayString(_ctx.uploadButtonText), 1 /* TEXT */)
          ]),
          _: 1 /* STABLE */
        }, 8 /* PROPS */, ["disabled", "color", "style", "onChange", "onClick"])
      ])
    ]),
    createElementVNode("input", {
      ref: "fileInputRef",
      type: "file",
      class: "va-file-upload__field__input",
      tabindex: -1,
      "aria-hidden": "true",
      accept: _ctx.fileTypes,
      multiple: _ctx.type !== 'single',
      disabled: _ctx.disabled,
      onChange: _cache[0] || (_cache[0] = (...args) => (_ctx.changeFieldValue && _ctx.changeFieldValue(...args))),
      onDragenter: _cache[1] || (_cache[1] = $event => (_ctx.dropzoneHighlight = true)),
      onDragleave: _cache[2] || (_cache[2] = $event => (_ctx.dropzoneHighlight = false))
    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_3),
    (_ctx.files.length && !_ctx.$props.hideFileList)
      ? (openBlock(), createBlock(_component_va_file_upload_list, {
          key: 0,
          type: _ctx.type,
          files: _ctx.files,
          color: _ctx.colorComputed,
          undo: _ctx.undo,
          undoDuration: _ctx.undoDuration,
          onRemove: _ctx.removeFile,
          onRemoveSingle: _ctx.removeSingleFile
        }, null, 8 /* PROPS */, ["type", "files", "color", "undo", "undoDuration", "onRemove", "onRemoveSingle"]))
      : createCommentVNode("v-if", true),
    createVNode(_component_va_modal, {
      modelValue: _ctx.modal,
      "onUpdate:modelValue": _cache[3] || (_cache[3] = $event => ((_ctx.modal) = $event)),
      "hide-default-actions": "",
      title: "File validation",
      message: "File type is incorrect!"
    }, null, 8 /* PROPS */, ["modelValue"])
  ], 6 /* CLASS, STYLE */))
}

script.render = render;
script.__file = "src/components/va-file-upload/VaFileUpload.vue";

const VaFileUpload = withConfigTransport(script);

export { VaFileUpload, VaFileUploadGalleryItem, VaFileUploadList, VaFileUploadListItem, VaFileUploadSingleItem, VaFileUploadUndo };
//# sourceMappingURL=index28.js.map

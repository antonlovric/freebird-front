{"version":3,"file":"VaConfig.js","sources":["../../src/components/va-config/VaConfig.ts"],"sourcesContent":["import { inject, provide, computed, toRefs, defineComponent, ComputedRef } from 'vue'\n\nimport { ComponentConfig } from '../../services/component-config/component-config'\n\n/**\n * We need another key to provide injected value.\n */\nexport const LocalConfigKey = Symbol('LocalConfigKey')\n\nexport const CONFIGS_DEFAULT = computed(() => [])\n\nexport function useLocalConfig (): ComputedRef<ComponentConfig[]> {\n  return inject(LocalConfigKey, CONFIGS_DEFAULT)\n}\n\nexport default defineComponent({\n  name: 'VaConfig',\n  props: {\n    components: { type: Object, default: () => ({}) },\n  },\n  setup (props) {\n    const { components } = toRefs(props)\n    const prevChain = useLocalConfig()\n    // We want it to be an array and not a merged object for optimization purposes\n    const nextChain = computed(() => [...prevChain.value, components.value])\n\n    provide(LocalConfigKey, nextChain)\n\n    return {}\n  },\n  render () {\n    return this.$slots.default ? this.$slots.default() : null\n  },\n})\n"],"names":[],"mappings":";;AAIA;;AAEG;AACI,MAAM,cAAc,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAA;AAE/C,MAAM,eAAe,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAA;SAEjC,cAAc,GAAA;AAC5B,IAAA,OAAO,MAAM,CAAC,cAAc,EAAE,eAAe,CAAC,CAAA;AAChD,CAAC;AAED,eAAe,eAAe,CAAC;AAC7B,IAAA,IAAI,EAAE,UAAU;AAChB,IAAA,KAAK,EAAE;AACL,QAAA,UAAU,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,EAAE;AAClD,KAAA;AACD,IAAA,KAAK,CAAE,KAAK,EAAA;QACV,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,CAAA;AACpC,QAAA,MAAM,SAAS,GAAG,cAAc,EAAE,CAAA;;AAElC,QAAA,MAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC,KAAK,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAA;AAExE,QAAA,OAAO,CAAC,cAAc,EAAE,SAAS,CAAC,CAAA;AAElC,QAAA,OAAO,EAAE,CAAA;KACV;IACD,MAAM,GAAA;AACJ,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAA;KAC1D;AACF,CAAA,CAAC;;;;"}
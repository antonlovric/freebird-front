import { f as isObject_1 } from './global-config.js';
import { _ as __DEV__ } from './global-utils.js';

//  @ts-nocheck
const sleep = (ms = 0) => {
    return new Promise(resolve => setTimeout(resolve, ms));
};
// vuestic-ui warn, currently is mostly a placeholder, but later might provide ability to disable warns etc.
const warn = (...attrs) => {
    if (__DEV__) {
        // eslint-disable-next-line  no-console
        console.warn(...attrs);
    }
    return false;
};
const hasOwnProperty = (object, key) => {
    // See https://eslint.org/docs/rules/no-prototype-builtins for explanation
    // on why we don't use object.hasOwnProperty directly.
    return Object.prototype.hasOwnProperty.call(object, key);
};
// Find value in the object with an array of keys
const getNestedValue = (option, propsArray) => {
    if (propsArray.length === 0) {
        return option;
    }
    const nestedItem = option[propsArray[0]];
    if (!isObject_1(nestedItem)) {
        if (propsArray.length === 1) {
            return nestedItem;
        }
        return undefined;
    }
    return getNestedValue(nestedItem, propsArray.slice(1));
};
/**
 * Finds value in the object using string with dots 'key.key.key'
 *
 * @param option
 * @param prop
 */
const getValueByPath = (option, prop) => {
    if (prop in option) {
        return option[prop];
    }
    prop = prop.replace(/^\./, ''); // remove first point symbol
    return getNestedValue(option, prop.split('.'));
};
/**
 * Finds value of nested property inside of an object.
 *
 * @param option - Object to look properties inside
 * @param prop - string or function used to find nested property
 */
const getValueByKey = (option, prop) => {
    // Can't access not object option
    if (typeof option !== 'object' || !option) {
        return undefined;
    }
    if (!prop) {
        return option;
    }
    if (typeof prop === 'string') {
        return getValueByPath(option, prop);
    }
    if (typeof prop === 'function') {
        return prop(option);
    }
    return option;
};
const getRandomString = (stringLength = 4) => {
    return Math.random().toString(36).substring(2, stringLength + 2);
};
const generateUniqueId = () => {
    return `${getRandomString(8)}-${getRandomString(4)}-${getRandomString(4)}`;
};

export { getValueByPath as a, getValueByKey as b, generateUniqueId as g, hasOwnProperty as h, sleep as s, warn as w };
//# sourceMappingURL=utils.js.map

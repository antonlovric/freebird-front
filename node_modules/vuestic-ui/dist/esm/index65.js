import { s as createGlobalConfig, G as GLOBAL_CONFIG } from './global-config.js';
import { defineVuesticPlugin } from './index55.js';
import { defineGlobalProperty, getGlobalProperty } from './global-properties.js';
import { watch } from 'vue';
import { i as isServer } from './ssr-utils.js';

/** Provides global configuration to Vuestic components */
const GlobalConfigPlugin = defineVuesticPlugin((config) => ({
    install(app) {
        const globalConfig = createGlobalConfig();
        if (config) {
            globalConfig.mergeGlobalConfig(config);
        }
        app.provide(GLOBAL_CONFIG, globalConfig);
        defineGlobalProperty(app, '$vaConfig', globalConfig);
    },
}));

const setCSSVariable = (name, value, root) => {
    root.style.setProperty(`--va-${name}`, value);
};
const createColorConfigPlugin = (app) => {
    const globalConfig = getGlobalProperty(app, '$vaConfig').globalConfig;
    /** Renders CSS varialbes string. Use this in SSR mode */
    const renderCSSVarialbes = (colors = globalConfig.value.colors) => {
        if (!colors) {
            return;
        }
        const colorNames = Object.keys(colors);
        return colorNames.map((key) => `--va-${key}: ${colors[key]}`).join(';');
    };
    const updateColors = (newValue) => {
        if (!newValue) {
            return;
        }
        if (isServer()) {
            return;
        }
        const root = document.documentElement;
        const colorNames = Object.keys(newValue);
        colorNames.forEach((key) => {
            setCSSVariable(key, newValue[key], root);
        });
    };
    updateColors(globalConfig.value.colors);
    watch(() => globalConfig.value.colors, (newValue) => {
        updateColors(newValue);
    }, { immediate: true, deep: true });
    return { renderCSSVarialbes, updateColors };
};

/** Creates color css variables and reactively updates on ColorConfig changes. */
const ColorConfigPlugin = defineVuesticPlugin(() => ({
    install(app) {
        defineGlobalProperty(app, '$vaColorConfig', createColorConfigPlugin(app));
    },
}));

export { ColorConfigPlugin as C, GlobalConfigPlugin as G };
//# sourceMappingURL=index65.js.map

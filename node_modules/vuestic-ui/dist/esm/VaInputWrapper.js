import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, renderSlot, createCommentVNode, createTextVNode, toDisplayString, createBlock, normalizeProps, guardReactiveProps } from 'vue';
import { e as pick_1 } from './usePopover.js';
import { u as useBem } from './useBem.js';
import { u as useColors } from './useColors.js';
import { u as useCSSVariables } from './useCSSVariables.js';
import './global-config.js';
import { u as useFormProps } from './useForm.js';
import { V as VaMessageList, u as useValidationProps } from './index67.js';
import './global-utils.js';
import { VaIcon } from './index31.js';

var script = defineComponent({
    name: 'VaInputWrapper',
    components: { VaMessageList, VaIcon },
    props: {
        ...useFormProps,
        ...useValidationProps,
        counterValue: { type: Number, default: undefined },
        maxLength: { type: Number, default: undefined },
        label: { type: String, default: '' },
        color: { type: String, default: 'primary' },
        outline: { type: Boolean, default: false },
        bordered: { type: Boolean, default: false },
        focused: { type: Boolean, default: false },
        error: { type: Boolean, default: false },
        success: { type: Boolean, default: false },
        requiredMark: { type: Boolean, default: false },
    },
    emits: [
        'click',
        'click-prepend',
        'click-append',
        'click-prepend-inner',
        'click-append-inner',
    ],
    setup(props) {
        const { getColor } = useColors();
        const wrapperClass = useBem('va-input-wrapper', () => ({
            ...pick_1(props, ['outline', 'bordered', 'success', 'focused', 'error', 'disabled', 'readonly']),
            labeled: !!props.label,
            solid: !props.outline && !props.bordered,
        }));
        const wrapperStyle = useCSSVariables('va-input-wrapper', () => ({
            color: colorComputed.value,
        }));
        const colorComputed = computed(() => getColor(props.color));
        const messagesComputed = computed(() => props.error ? props.errorMessages : props.messages);
        const hasMessages = computed(() => {
            var _a;
            return Boolean(typeof messagesComputed.value === 'string' ? messagesComputed.value : (_a = messagesComputed.value) === null || _a === void 0 ? void 0 : _a.length);
        });
        const messagesColor = computed(() => {
            if (props.error) {
                return 'danger';
            }
            if (props.success) {
                return 'success';
            }
            return '';
        });
        const errorLimit = computed(() => props.error ? Number(props.errorCount) : 99);
        const isCounterVisible = computed(() => props.counterValue !== undefined);
        const counterComputed = computed(() => props.maxLength !== undefined ? `${props.counterValue}/${props.maxLength}` : props.counterValue);
        return {
            wrapperClass,
            wrapperStyle,
            isCounterVisible,
            counterComputed,
            colorComputed,
            messagesColor,
            messagesComputed,
            hasMessages,
            errorLimit,
        };
    },
});

const _hoisted_1 = { class: "va-input-wrapper__container" };
const _hoisted_2 = { class: "va-input-wrapper__field" };
const _hoisted_3 = { class: "va-input-wrapper__text" };
const _hoisted_4 = {
  key: 0,
  class: "va-input-wrapper__required-mark"
};
const _hoisted_5 = {
  key: 0,
  class: "va-input-wrapper__bottom"
};
const _hoisted_6 = { class: "va-input-wrapper__bottom-counter" };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  const _component_va_message_list = resolveComponent("va-message-list");

  return (openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-input-wrapper", _ctx.wrapperClass]),
    style: normalizeStyle(_ctx.wrapperStyle),
    onClick: _cache[4] || (_cache[4] = $event => (_ctx.$emit('click', $event)))
  }, [
    createElementVNode("div", _hoisted_1, [
      (_ctx.$slots.prepend)
        ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: "va-input-wrapper__prepend-inner",
            onClick: _cache[0] || (_cache[0] = $event => (_ctx.$emit('click-prepend')))
          }, [
            renderSlot(_ctx.$slots, "prepend")
          ]))
        : createCommentVNode("v-if", true),
      createElementVNode("div", _hoisted_2, [
        (_ctx.$slots.prependInner)
          ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: "va-input-wrapper__prepend-inner",
              onClick: _cache[1] || (_cache[1] = $event => (_ctx.$emit('click-prepend-inner', $event)))
            }, [
              renderSlot(_ctx.$slots, "prependInner")
            ]))
          : createCommentVNode("v-if", true),
        createElementVNode("div", _hoisted_3, [
          (_ctx.label)
            ? (openBlock(), createElementBlock("label", {
                key: 0,
                "aria-hidden": "true",
                class: "va-input-wrapper__label",
                style: normalizeStyle({ color: _ctx.colorComputed })
              }, [
                createTextVNode(toDisplayString(_ctx.label) + " ", 1 /* TEXT */),
                (_ctx.requiredMark)
                  ? (openBlock(), createElementBlock("span", _hoisted_4, " * "))
                  : createCommentVNode("v-if", true)
              ], 4 /* STYLE */))
            : createCommentVNode("v-if", true),
          renderSlot(_ctx.$slots, "default")
        ]),
        (_ctx.success)
          ? (openBlock(), createBlock(_component_va_icon, {
              key: 1,
              color: "success",
              name: "check_circle",
              size: "small"
            }))
          : createCommentVNode("v-if", true),
        (_ctx.error)
          ? (openBlock(), createBlock(_component_va_icon, {
              key: 2,
              color: "danger",
              name: "warning",
              size: "small"
            }))
          : createCommentVNode("v-if", true),
        renderSlot(_ctx.$slots, "icon"),
        (_ctx.$slots.appendInner)
          ? (openBlock(), createElementBlock("div", {
              key: 3,
              class: "va-input-wrapper__append-inner",
              onClick: _cache[2] || (_cache[2] = $event => (_ctx.$emit('click-append-inner', $event)))
            }, [
              renderSlot(_ctx.$slots, "appendInner")
            ]))
          : createCommentVNode("v-if", true)
      ]),
      (_ctx.$slots.append)
        ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: "va-input-wrapper__append-inner",
            onClick: _cache[3] || (_cache[3] = $event => (_ctx.$emit('click-append')))
          }, [
            renderSlot(_ctx.$slots, "append")
          ]))
        : createCommentVNode("v-if", true)
    ]),
    (_ctx.isCounterVisible)
      ? (openBlock(), createElementBlock("div", _hoisted_5, [
          renderSlot(_ctx.$slots, "counter", normalizeProps(guardReactiveProps({ valueLength: _ctx.$props.counterValue, maxLength: _ctx.$props.maxLength })), () => [
            createElementVNode("div", _hoisted_6, toDisplayString(_ctx.counterComputed), 1 /* TEXT */)
          ])
        ]))
      : createCommentVNode("v-if", true),
    renderSlot(_ctx.$slots, "messages", normalizeProps(guardReactiveProps({ messages: _ctx.messagesComputed, errorLimit: _ctx.errorLimit, color: _ctx.messagesColor })), () => [
      (_ctx.hasMessages)
        ? (openBlock(), createBlock(_component_va_message_list, {
            key: 0,
            color: _ctx.messagesColor,
            "model-value": _ctx.messagesComputed,
            limit: _ctx.errorLimit
          }, null, 8 /* PROPS */, ["color", "model-value", "limit"]))
        : createCommentVNode("v-if", true)
    ])
  ], 6 /* CLASS, STYLE */))
}

script.render = render;
script.__file = "src/components/va-input/components/VaInputWrapper.vue";

export { script as s };
//# sourceMappingURL=VaInputWrapper.js.map

import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, renderSlot, createBlock, resolveDynamicComponent, withCtx, createElementVNode, normalizeStyle } from 'vue';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import 'colortranslator';
import { u as useRouterLinkProps, a as useRouterLink } from './useRouterLink.js';
import { u as useColors } from './useColors.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';

var script$5 = defineComponent({
    name: 'VaList',
    props: {
        fit: { type: Boolean, default: false },
    },
    setup: (props) => ({
        computedClass: computed(() => ({ 'va-list--fit': props.fit })),
    }),
});

function render$5(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-list", _ctx.computedClass]),
    role: "list"
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 2 /* CLASS */))
}

script$5.render = render$5;
script$5.__file = "src/components/va-list/VaList.vue";

var script$4 = defineComponent({
    name: 'VaListItem',
    emits: ['focus', 'click'],
    props: {
        ...useRouterLinkProps,
        tag: { type: String, default: 'div' },
        disabled: { type: Boolean, default: false },
    },
    setup(props) {
        const tabIndexComputed = computed(() => props.disabled ? -1 : 0);
        const computedClass = computed(() => ({
            'va-list-item--disabled': props.disabled,
        }));
        return {
            ...useRouterLink(props),
            tabIndexComputed,
            computedClass,
        };
    },
});

function render$4(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createBlock(resolveDynamicComponent(_ctx.tagComputed), {
    class: normalizeClass(["va-list-item", _ctx.computedClass]),
    role: "listitem",
    href: _ctx.hrefComputed,
    target: _ctx.target,
    to: _ctx.to,
    replace: _ctx.replace,
    exact: _ctx.exact,
    "active-class": _ctx.activeClass,
    "exact-active-class": _ctx.exactActiveClass,
    tabindex: _ctx.tabIndexComputed
  }, {
    default: withCtx(() => [
      createElementVNode("div", {
        class: "va-list-item__inner",
        onClick: _cache[0] || (_cache[0] = $event => (_ctx.$emit('click'))),
        onFocus: _cache[1] || (_cache[1] = $event => (_ctx.$emit('focus')))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 32 /* HYDRATE_EVENTS */)
    ]),
    _: 3 /* FORWARDED */
  }, 8 /* PROPS */, ["href", "target", "to", "replace", "exact", "active-class", "exact-active-class", "class", "tabindex"]))
}

script$4.render = render$4;
script$4.__file = "src/components/va-list/VaListItem.vue";

var script$3 = defineComponent({
    name: 'VaListLabel',
    props: {
        color: { type: String, default: 'primary' },
    },
    setup: (props) => {
        const { getColor } = useColors();
        return {
            computedStyle: computed(() => ({
                color: getColor(props.color),
            })),
        };
    },
});

function render$3(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("div", {
    class: "va-list-label",
    style: normalizeStyle(_ctx.computedStyle)
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 4 /* STYLE */))
}

script$3.render = render$3;
script$3.__file = "src/components/va-list/VaListLabel.vue";

var script$2 = defineComponent({
    name: 'VaListItemLabel',
    props: {
        caption: { type: Boolean, default: false },
        lines: { type: Number, default: 1 },
    },
    setup: (props) => ({
        computedClass: computed(() => ({ 'va-list-item-label--caption': props.caption })),
        computedStyle: computed(() => ({ '-webkit-line-clamp': props.lines })),
    }),
});

function render$2(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-list-item-label", _ctx.computedClass]),
    style: normalizeStyle(_ctx.computedStyle)
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 6 /* CLASS, STYLE */))
}

script$2.render = render$2;
script$2.__file = "src/components/va-list/VaListItemLabel.vue";

var script$1 = defineComponent({
    name: 'VaListItemSection',
    props: {
        icon: { type: Boolean, default: false },
        avatar: { type: Boolean, default: false },
    },
    setup: (props) => ({
        computedClass: computed(() => ({
            'va-list-item-section--main': !props.icon && !props.avatar,
            'va-list-item-section--icon': props.icon,
            'va-list-item-section--avatar': props.avatar,
        })),
    }),
});

function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-list-item-section", _ctx.computedClass])
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 2 /* CLASS */))
}

script$1.render = render$1;
script$1.__file = "src/components/va-list/VaListItemSection.vue";

var script = defineComponent({
    name: 'VaListSeparator',
    props: {
        fit: { type: Boolean, default: false },
        spaced: { type: Boolean, default: false },
    },
    setup: (props) => ({
        computedClass: computed(() => ({
            'va-list-separator--offset': !props.fit,
            'va-list-separator--spaced': props.spaced,
        })),
    }),
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("div", {
    "aria-hidden": "true",
    class: normalizeClass(["va-list-separator", _ctx.computedClass])
  }, null, 2 /* CLASS */))
}

script.render = render;
script.__file = "src/components/va-list/VaListSeparator.vue";

const VaListItem = withConfigTransport(script$4);
const VaListLabel = withConfigTransport(script$3);
const VaListItemLabel = withConfigTransport(script$2);
const VaListItemSection = withConfigTransport(script$1);
const VaListSeparator = withConfigTransport(script);
const VaList = withConfigTransport(script$5);

export { VaList, VaListItem, VaListItemLabel, VaListItemSection, VaListLabel, VaListSeparator };
//# sourceMappingURL=index36.js.map

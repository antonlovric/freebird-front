import { w as withConfigTransport } from './withConfigTransport.js';
import { shallowRef, onMounted, onBeforeUnmount, defineComponent, ref, computed, openBlock, createElementBlock, normalizeClass, normalizeStyle, renderSlot } from 'vue';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import { u as useColors, g as getBoxShadowColor, a as getGradientBackground } from './useColors.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';
import 'colortranslator';

/** @deprecated */
function getTargetElement(target) {
    if (!target) {
        throw new Error('Cant find target');
    }
    return typeof target === 'string' ? document.querySelector(target) : target;
}
function setupScroll(target, onScrollCallback) {
    const scrollRoot = shallowRef();
    let targetElement;
    onMounted(() => {
        targetElement = getTargetElement(target || scrollRoot.value);
        targetElement === null || targetElement === void 0 ? void 0 : targetElement.addEventListener('scroll', onScrollCallback);
    });
    onBeforeUnmount(() => {
        targetElement === null || targetElement === void 0 ? void 0 : targetElement.removeEventListener('scroll', onScrollCallback);
    });
    return scrollRoot;
}

var script = defineComponent({
    name: 'VaAppBar',
    props: {
        gradient: { type: Boolean, default: false },
        bottom: { type: Boolean, default: false },
        target: { type: [Object, String], default: '' },
        hideOnScroll: { type: Boolean, default: false },
        shadowOnScroll: { type: Boolean, default: false },
        shadowColor: { type: String, default: '' },
        color: { type: String, default: undefined },
        absolute: { type: Boolean, default: false },
    },
    setup(props) {
        const prevScrollPosition = ref(0);
        const doShowShadow = ref(false);
        const isHidden = ref(false);
        const scrollRoot = setupScroll(props.target, (e) => {
            const target = e.target;
            if (prevScrollPosition.value < target.scrollTop) {
                // Scroll down
                isHidden.value = !!props.hideOnScroll;
                doShowShadow.value = !!props.shadowOnScroll;
            }
            else {
                // Scroll up
                isHidden.value = false;
                doShowShadow.value = false;
            }
            prevScrollPosition.value = target.scrollTop;
        });
        const { getColor } = useColors();
        const colorComputed = computed(() => getColor(props.color, 'primary'));
        const shadowColorComputed = computed(() => getColor(props.shadowColor, colorComputed.value));
        const computedShadow = computed(() => {
            const shadow = getBoxShadowColor(props.shadowColor ? shadowColorComputed.value : colorComputed.value);
            return doShowShadow.value ? `var(--va-app-bar-shadow) ${shadow}` : '';
        });
        const transformComputed = computed(() => {
            if (!isHidden.value) {
                return '';
            }
            return props.bottom ? 'translateY(100%)' : 'translateY(-100%)';
        });
        const computedStyle = computed(() => ({
            background: props.gradient ? getGradientBackground(colorComputed.value) : colorComputed.value,
            'box-shadow': computedShadow.value,
            transform: transformComputed.value,
            position: props.absolute ? 'absolute' : undefined,
        }));
        const computedClass = computed(() => ({
            'va-app-bar': true,
            'va-app-bar--bottom': props.bottom,
        }));
        return {
            scrollRoot,
            computedStyle,
            computedClass,
        };
    },
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("header", {
    ref: "scrollRoot",
    role: "toolbar",
    class: normalizeClass(_ctx.computedClass),
    style: normalizeStyle(_ctx.computedStyle)
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 6 /* CLASS, STYLE */))
}

script.render = render;
script.__file = "src/components/va-app-bar/VaAppBar.vue";

const VaAppBar = withConfigTransport(script);

export { VaAppBar };
//# sourceMappingURL=index4.js.map

import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeStyle, renderSlot, createBlock, createCommentVNode } from 'vue';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import { u as useColors } from './useColors.js';
import { u as useLoadingProps } from './useLoading.js';
import { u as useSizeProps, a as useSize } from './useSize.js';
import { u as useTextColor } from './useTextColor.js';
import { VaIcon } from './index31.js';
import { VaProgressCircle } from './index43.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';
import 'colortranslator';
import './VaIcon.js';
import './clamp.js';
import './toNumber.js';

var script = defineComponent({
    name: 'VaAvatar',
    components: { VaIcon, VaProgressCircle },
    props: {
        ...useLoadingProps,
        ...useSizeProps,
        color: { type: String, default: 'info' },
        textColor: { type: String, default: 'white' },
        square: { type: Boolean, default: false },
        icon: { type: String, default: '' },
        src: { type: String, default: null },
        alt: { type: String, default: '' },
        fontSize: { type: String, default: '' },
    },
    setup(props) {
        const { getColor } = useColors();
        const colorComputed = computed(() => getColor(props.color));
        const { sizeComputed, fontSizeComputed } = useSize(props, 'VaAvatar');
        const { textColorComputed } = useTextColor();
        const computedStyle = computed(() => ({
            color: textColorComputed.value,
            backgroundColor: props.loading ? 'transparent' : colorComputed.value,
            borderRadius: props.square ? 0 : '',
            fontSize: props.fontSize || fontSizeComputed.value,
            width: sizeComputed.value,
            minWidth: sizeComputed.value,
            height: sizeComputed.value,
        }));
        return {
            sizeComputed,
            computedStyle,
            colorComputed,
        };
    },
});

const _hoisted_1 = ["aria-hidden"];
const _hoisted_2 = ["src", "alt"];

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_progress_circle = resolveComponent("va-progress-circle");
  const _component_va_icon = resolveComponent("va-icon");

  return (openBlock(), createElementBlock("div", {
    class: "va-avatar",
    style: normalizeStyle(_ctx.computedStyle),
    "aria-hidden": !_ctx.$props.src,
    "aria-live": "polite"
  }, [
    renderSlot(_ctx.$slots, "default", {}, () => [
      (_ctx.$props.loading)
        ? (openBlock(), createBlock(_component_va_progress_circle, {
            key: 0,
            size: _ctx.sizeComputed,
            color: _ctx.colorComputed,
            indeterminate: ""
          }, null, 8 /* PROPS */, ["size", "color"]))
        : (_ctx.$props.src)
          ? (openBlock(), createElementBlock("img", {
              key: 1,
              src: _ctx.$props.src,
              alt: _ctx.$props.alt
            }, null, 8 /* PROPS */, _hoisted_2))
          : (_ctx.$props.icon)
            ? (openBlock(), createBlock(_component_va_icon, {
                key: 2,
                name: _ctx.$props.icon
              }, null, 8 /* PROPS */, ["name"]))
            : createCommentVNode("v-if", true)
    ])
  ], 12 /* STYLE, PROPS */, _hoisted_1))
}

script.render = render;
script.__file = "src/components/va-avatar/VaAvatar.vue";

const VaAvatar = withConfigTransport(script);

export { VaAvatar };
//# sourceMappingURL=index5.js.map

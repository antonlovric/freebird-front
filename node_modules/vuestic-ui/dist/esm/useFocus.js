import { ref, onMounted, onBeforeUnmount } from 'vue';

const useFocusEmits = ['focus', 'blur'];
function useFocus(el, emit) {
    const isFocused = ref(false);
    const onFocus = (e) => {
        isFocused.value = true;
        emit === null || emit === void 0 ? void 0 : emit('focus', e);
    };
    const onBlur = (e) => {
        isFocused.value = false;
        emit === null || emit === void 0 ? void 0 : emit('blur', e);
    };
    const focus = () => {
        var _a;
        (_a = el === null || el === void 0 ? void 0 : el.value) === null || _a === void 0 ? void 0 : _a.focus();
    };
    const blur = () => {
        var _a;
        (_a = el === null || el === void 0 ? void 0 : el.value) === null || _a === void 0 ? void 0 : _a.blur();
    };
    if (el) {
        onMounted(() => {
            var _a, _b;
            if ((el === null || el === void 0 ? void 0 : el.value) instanceof HTMLElement) {
                (_a = el.value) === null || _a === void 0 ? void 0 : _a.addEventListener('focus', onFocus);
                (_b = el.value) === null || _b === void 0 ? void 0 : _b.addEventListener('blur', onBlur);
            }
        });
        onBeforeUnmount(() => {
            var _a, _b;
            if ((el === null || el === void 0 ? void 0 : el.value) instanceof HTMLElement) {
                (_a = el.value) === null || _a === void 0 ? void 0 : _a.removeEventListener('focus', onFocus);
                (_b = el.value) === null || _b === void 0 ? void 0 : _b.removeEventListener('blur', onBlur);
            }
        });
    }
    return {
        isFocused,
        onFocus,
        onBlur,
        focus,
        blur,
    };
}

export { useFocus as a, useFocusEmits as u };
//# sourceMappingURL=useFocus.js.map

{"version":3,"file":"index11.js","sources":["../../src/components/va-button-toggle/VaButtonToggle.vue","../../src/components/va-button-toggle/VaButtonToggle.vue?vue&type=template&id=39f0c05a&lang.js","../../src/components/va-button-toggle/index.ts"],"sourcesContent":["<template>\n  <div class=\"va-button-toggle\">\n    <va-button-group\n      :color=\"color\"\n      :textColor=\"textColor\"\n      :rounded=\"rounded\"\n      :outline=\"outline\"\n      :flat=\"flat\"\n      :gradient=\"gradient\"\n    >\n      <va-button\n        v-for=\"option in options\"\n        :key=\"option.value\"\n        :aria-pressed=\"isToggled(option.value)\"\n        :class=\"getButtonClass(option.value)\"\n        :disabled=\"disabled\"\n        :size=\"size\"\n        v-bind=\"getButtonProps(option)\"\n        @click=\"changeValue(option.value)\"\n      >\n        {{ option.label }}\n      </va-button>\n    </va-button-group>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\n\nimport { shiftHSLAColor } from '../../services/color-config/color-functions'\nimport { useColors, useTextColor } from '../../composables'\n\nimport { ButtonOption } from './types'\n\nimport { VaButton } from '../va-button'\nimport { VaButtonGroup } from '../va-button-group'\n\nexport default defineComponent({\n  name: 'VaButtonToggle',\n  components: {\n    VaButtonGroup,\n    VaButton,\n  },\n  emits: ['update:modelValue'],\n  props: {\n    options: {\n      type: Array as PropType<ButtonOption[]>,\n      required: true,\n    },\n    color: { type: String, default: 'primary' },\n    textColor: { type: String, default: undefined },\n    activeButtonTextColor: { type: String },\n    modelValue: { type: [String, Number], default: '' },\n    outline: { type: Boolean, default: false },\n    flat: { type: Boolean, default: false },\n    rounded: { type: Boolean, default: true },\n    disabled: { type: Boolean, default: false },\n    size: {\n      type: String as PropType<'medium' | 'small' | 'large'>,\n      default: 'medium',\n      validator: (value: string) => ['medium', 'small', 'large'].includes(value),\n    },\n    toggleColor: { type: String, default: '' },\n    gradient: { type: Boolean, default: false },\n  },\n  setup (props, { emit }) {\n    const { getColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n\n    const isFlatOrOutline = computed(() => props.outline || props.flat)\n    const activeButtonColor = computed(() => {\n      if (props.toggleColor) {\n        return getColor(props.toggleColor)\n      } else {\n        return isFlatOrOutline.value ? colorComputed.value : shiftHSLAColor(colorComputed.value, { l: -6 })\n      }\n    })\n\n    const { textColorComputed: activeButtonTextColor } = useTextColor(activeButtonColor)\n\n    const isToggled = (value: any) => value === props.modelValue\n\n    const getButtonProps = (option: ButtonOption = {} as ButtonOption) => {\n      const iconsProps = {\n        icon: option.icon,\n        iconRight: option.iconRight,\n      }\n\n      if (!isToggled(option.value)) { return iconsProps }\n\n      return {\n        color: activeButtonColor.value,\n        textColor: props.activeButtonTextColor ?? activeButtonTextColor.value,\n        ...iconsProps,\n        ...(isFlatOrOutline.value && { outline: false, flat: false }),\n      }\n    }\n\n    const getButtonClass = (buttonValue: any) => ({ 'va-button--active': isToggled(buttonValue) })\n\n    const changeValue = (value: any) => emit('update:modelValue', value)\n\n    return {\n      getButtonProps,\n      getButtonClass,\n      changeValue,\n      isToggled,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-button-toggle {\n  .va-button {\n    &:focus,\n    &:hover {\n      box-shadow: none !important;\n    }\n  }\n}\n</style>\n","<template>\n  <div class=\"va-button-toggle\">\n    <va-button-group\n      :color=\"color\"\n      :textColor=\"textColor\"\n      :rounded=\"rounded\"\n      :outline=\"outline\"\n      :flat=\"flat\"\n      :gradient=\"gradient\"\n    >\n      <va-button\n        v-for=\"option in options\"\n        :key=\"option.value\"\n        :aria-pressed=\"isToggled(option.value)\"\n        :class=\"getButtonClass(option.value)\"\n        :disabled=\"disabled\"\n        :size=\"size\"\n        v-bind=\"getButtonProps(option)\"\n        @click=\"changeValue(option.value)\"\n      >\n        {{ option.label }}\n      </va-button>\n    </va-button-group>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\n\nimport { shiftHSLAColor } from '../../services/color-config/color-functions'\nimport { useColors, useTextColor } from '../../composables'\n\nimport { ButtonOption } from './types'\n\nimport { VaButton } from '../va-button'\nimport { VaButtonGroup } from '../va-button-group'\n\nexport default defineComponent({\n  name: 'VaButtonToggle',\n  components: {\n    VaButtonGroup,\n    VaButton,\n  },\n  emits: ['update:modelValue'],\n  props: {\n    options: {\n      type: Array as PropType<ButtonOption[]>,\n      required: true,\n    },\n    color: { type: String, default: 'primary' },\n    textColor: { type: String, default: undefined },\n    activeButtonTextColor: { type: String },\n    modelValue: { type: [String, Number], default: '' },\n    outline: { type: Boolean, default: false },\n    flat: { type: Boolean, default: false },\n    rounded: { type: Boolean, default: true },\n    disabled: { type: Boolean, default: false },\n    size: {\n      type: String as PropType<'medium' | 'small' | 'large'>,\n      default: 'medium',\n      validator: (value: string) => ['medium', 'small', 'large'].includes(value),\n    },\n    toggleColor: { type: String, default: '' },\n    gradient: { type: Boolean, default: false },\n  },\n  setup (props, { emit }) {\n    const { getColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n\n    const isFlatOrOutline = computed(() => props.outline || props.flat)\n    const activeButtonColor = computed(() => {\n      if (props.toggleColor) {\n        return getColor(props.toggleColor)\n      } else {\n        return isFlatOrOutline.value ? colorComputed.value : shiftHSLAColor(colorComputed.value, { l: -6 })\n      }\n    })\n\n    const { textColorComputed: activeButtonTextColor } = useTextColor(activeButtonColor)\n\n    const isToggled = (value: any) => value === props.modelValue\n\n    const getButtonProps = (option: ButtonOption = {} as ButtonOption) => {\n      const iconsProps = {\n        icon: option.icon,\n        iconRight: option.iconRight,\n      }\n\n      if (!isToggled(option.value)) { return iconsProps }\n\n      return {\n        color: activeButtonColor.value,\n        textColor: props.activeButtonTextColor ?? activeButtonTextColor.value,\n        ...iconsProps,\n        ...(isFlatOrOutline.value && { outline: false, flat: false }),\n      }\n    }\n\n    const getButtonClass = (buttonValue: any) => ({ 'va-button--active': isToggled(buttonValue) })\n\n    const changeValue = (value: any) => emit('update:modelValue', value)\n\n    return {\n      getButtonProps,\n      getButtonClass,\n      changeValue,\n      isToggled,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-button-toggle {\n  .va-button {\n    &:focus,\n    &:hover {\n      box-shadow: none !important;\n    }\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport _VaButtonToggle from './VaButtonToggle.vue'\n\nexport const VaButtonToggle = withConfigTransport(_VaButtonToggle)\n\nexport * from './types'\n"],"names":["_openBlock","_createElementBlock","_createVNode","_Fragment","_renderList","_createBlock","_mergeProps","_createTextVNode","_toDisplayString","_VaButtonToggle"],"mappings":"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"}
import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, renderSlot, createTextVNode, toDisplayString } from 'vue';
import { g as generateUniqueId } from './utils.js';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import { u as useColors } from './useColors.js';
import { u as useFormProps, a as useForm } from './useForm.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';
import 'colortranslator';
import './useBem.js';
import './_createCompounder.js';

var script = defineComponent({
    name: 'VaRadio',
    emits: ['update:modelValue', 'focus'],
    props: {
        ...useFormProps,
        modelValue: { type: [Boolean, Array, String, Object], default: null },
        option: { default: null },
        name: { type: String, default: '' },
        label: { type: String, default: '' },
        leftLabel: { type: Boolean, default: false },
        color: { type: String, default: 'primary' },
        tabindex: { type: Number, default: 0 },
    },
    setup(props, { emit }) {
        const { getColor } = useColors();
        const isActive = computed(() => props.modelValue === props.option);
        const { computedClasses } = useForm('va-radio', props);
        const computedClass = computed(() => ({
            'va-radio--left-label': props.leftLabel,
            ...computedClasses,
        }));
        const iconBackgroundComputedStyles = computed(() => ({
            backgroundColor: getColor(props.color),
        }));
        const iconDotComputedStyles = computed(() => {
            if (!isActive.value) {
                return;
            }
            return {
                borderColor: getColor(props.color),
                backgroundColor: getColor(props.color),
            };
        });
        const iconComputedStyles = computed(() => {
            if (!isActive.value) {
                return;
            }
            return { borderColor: getColor(props.color) };
        });
        const computedLabel = computed(() => props.label || props.option);
        const onClick = (e) => {
            if (props.readonly || props.disabled) {
                return;
            }
            emit('update:modelValue', props.option, e);
        };
        const onFocus = (e) => emit('focus', e);
        return {
            computedClass,
            isActive,
            iconBackgroundComputedStyles,
            iconDotComputedStyles,
            iconComputedStyles,
            computedLabel,
            onClick,
            onFocus,
            computedName: computed(() => props.name || generateUniqueId()),
            tabIndexComputed: computed(() => props.disabled ? -1 : props.tabindex),
        };
    },
});

const _hoisted_1 = ["checked", "disabled", "readonly", "name", "value", "aria-checked", "tabindex"];
const _hoisted_2 = { class: "va-radio__text" };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("label", {
    class: normalizeClass(["va-radio", _ctx.computedClass])
  }, [
    createElementVNode("input", {
      class: "va-radio__input",
      type: "radio",
      checked: _ctx.isActive,
      disabled: _ctx.$props.disabled,
      readonly: _ctx.$props.readonly,
      name: _ctx.computedName,
      value: _ctx.computedLabel,
      "aria-checked": _ctx.isActive,
      tabindex: _ctx.tabIndexComputed,
      onChange: _cache[0] || (_cache[0] = (...args) => (_ctx.onClick && _ctx.onClick(...args))),
      onFocus: _cache[1] || (_cache[1] = (...args) => (_ctx.onFocus && _ctx.onFocus(...args)))
    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_1),
    createElementVNode("span", {
      "aria-hidden": "true",
      class: "va-radio__icon",
      style: normalizeStyle(_ctx.iconComputedStyles)
    }, [
      createElementVNode("span", {
        class: "va-radio__icon__background",
        style: normalizeStyle(_ctx.iconBackgroundComputedStyles)
      }, null, 4 /* STYLE */),
      createElementVNode("span", {
        class: "va-radio__icon__dot",
        style: normalizeStyle(_ctx.iconDotComputedStyles)
      }, null, 4 /* STYLE */)
    ], 4 /* STYLE */),
    createElementVNode("span", _hoisted_2, [
      renderSlot(_ctx.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(_ctx.computedLabel), 1 /* TEXT */)
      ])
    ])
  ], 2 /* CLASS */))
}

script.render = render;
script.__file = "src/components/va-radio/VaRadio.vue";

const VaRadio = withConfigTransport(script);

export { VaRadio };
//# sourceMappingURL=index44.js.map

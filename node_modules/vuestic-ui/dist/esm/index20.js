import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, resolveComponent, openBlock, createElementBlock, createElementVNode, Fragment, renderList, createBlock } from 'vue';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import 'colortranslator';
import { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from './useStateful.js';
import { VaColorIndicator } from './index18.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';
import './useColors.js';

var script = defineComponent({
    name: 'VaColorPalette',
    components: { VaColorIndicator },
    emits: useStatefulEmits,
    props: {
        ...useStatefulProps,
        modelValue: { type: String, default: null },
        palette: { type: Array, default: () => [] },
        indicator: {
            type: String,
            default: 'dot',
            validator: (value) => ['dot', 'square'].includes(value),
        },
    },
    setup(props, { emit }) {
        const { valueComputed } = useStateful(props, emit);
        return {
            valueComputed,
            isSelected: (color) => valueComputed.value === color,
        };
    },
});

const _hoisted_1 = { class: "va-color-palette" };
const _hoisted_2 = {
  class: "va-color-palette__colors",
  role: "listbox",
  "aria-label": "color selection"
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_color_indicator = resolveComponent("va-color-indicator");

  return (openBlock(), createElementBlock("div", _hoisted_1, [
    createElementVNode("ul", _hoisted_2, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.palette, (color, index) => {
        return (openBlock(), createBlock(_component_va_color_indicator, {
          key: index,
          role: "option",
          "aria-label": `color ${color}`,
          "aria-selected": _ctx.isSelected(color),
          tabindex: "0",
          modelValue: _ctx.isSelected(color),
          color: color,
          square: _ctx.indicator === 'square',
          "onUpdate:modelValue": $event => (_ctx.valueComputed = color)
        }, null, 8 /* PROPS */, ["aria-label", "aria-selected", "modelValue", "color", "square", "onUpdate:modelValue"]))
      }), 128 /* KEYED_FRAGMENT */))
    ])
  ]))
}

script.render = render;
script.__file = "src/components/va-color-palette/VaColorPalette.vue";

const VaColorPalette = withConfigTransport(script);

export { VaColorPalette };
//# sourceMappingURL=index20.js.map

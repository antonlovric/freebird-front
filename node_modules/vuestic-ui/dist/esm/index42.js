import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, computed, openBlock, createElementBlock, mergeProps, renderSlot, normalizeProps, guardReactiveProps, Fragment, createTextVNode, toDisplayString, createCommentVNode, createElementVNode, normalizeStyle } from 'vue';
import { c as clamp_1 } from './clamp.js';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import { u as useColors } from './useColors.js';
import { u as useTextColor } from './useTextColor.js';
import './VaConfig.js';
import './toNumber.js';
import './isSymbol.js';
import './global-properties.js';
import './ssr-utils.js';
import 'colortranslator';

var script = defineComponent({
    name: 'VaProgressBar',
    props: {
        modelValue: { type: Number, default: 0 },
        indeterminate: { type: Boolean, default: false },
        color: { type: String, default: 'primary' },
        size: {
            type: [Number, String],
            default: 'medium',
        },
        buffer: { type: Number, default: 100 },
        rounded: { type: Boolean, default: true },
        reverse: { type: Boolean, default: false },
        contentInside: { type: Boolean, default: false },
        showPercent: { type: Boolean, default: false },
    },
    setup(props) {
        const { getColor, getHoverColor } = useColors();
        const { textColorComputed } = useTextColor();
        const colorComputed = computed(() => getColor(props.color));
        const isTextSize = computed(() => typeof props.size === 'string' && ['small', 'medium', 'large'].includes(props.size));
        const getCSSHeight = () => {
            if (typeof props.size === 'number') {
                return `${props.size}px`;
            }
            if (isTextSize.value) {
                return;
            }
            return props.size;
        };
        return {
            rootClass: computed(() => ({
                'va-progress-bar--square': !props.rounded,
                [`va-progress-bar--${props.size}`]: isTextSize.value,
            })),
            rooStyle: computed(() => ({
                '--va-progress-bar-color': colorComputed.value,
                '--va-progress-bar-background-color': getHoverColor(colorComputed.value),
            })),
            wrapperStyle: computed(() => ({
                height: getCSSHeight(),
            })),
            bufferStyle: computed(() => ({
                width: `${props.indeterminate ? 100 : clamp_1(props.buffer, 0, 100)}%`,
                color: textColorComputed.value,
                [props.reverse ? 'right' : 'left']: 0,
            })),
            progressStyle: computed(() => ({
                width: `${clamp_1(props.modelValue, 0, 100)}%`,
                marginLeft: props.reverse ? 'auto' : undefined,
            })),
            intermediateStyle: computed(() => ({
                animationDirection: props.reverse ? 'reverse' : 'normal',
            })),
            ariaAttributesComputed: computed(() => ({
                role: 'progressbar',
                ariaLabel: 'progress state',
                ariaValuenow: !props.indeterminate ? props.modelValue : undefined,
            })),
        };
    },
});

const _hoisted_1 = {
  key: 0,
  class: "va-progress-bar__info"
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("div", mergeProps({
    class: ["va-progress-bar", _ctx.rootClass],
    style: _ctx.rooStyle
  }, _ctx.ariaAttributesComputed), [
    (!_ctx.$props.contentInside)
      ? (openBlock(), createElementBlock("div", _hoisted_1, [
          renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps({ value: _ctx.$props.modelValue })), () => [
            (_ctx.$props.showPercent)
              ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                  createTextVNode(toDisplayString(_ctx.$props.modelValue) + "% ", 1 /* TEXT */)
                ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))
              : createCommentVNode("v-if", true)
          ])
        ]))
      : createCommentVNode("v-if", true),
    createElementVNode("div", {
      class: "va-progress-bar__wrapper",
      style: normalizeStyle(_ctx.wrapperStyle)
    }, [
      createElementVNode("div", {
        class: "va-progress-bar__buffer",
        style: normalizeStyle(_ctx.bufferStyle)
      }, [
        (_ctx.$props.contentInside)
          ? renderSlot(_ctx.$slots, "default", normalizeProps(mergeProps({ key: 0 }, { value: _ctx.$props.modelValue })), () => [
              (_ctx.$props.showPercent)
                ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                    createTextVNode(toDisplayString(_ctx.$props.modelValue) + "% ", 1 /* TEXT */)
                  ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))
                : createCommentVNode("v-if", true)
            ])
          : createCommentVNode("v-if", true)
      ], 4 /* STYLE */),
      (_ctx.indeterminate)
        ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            createElementVNode("div", {
              class: "va-progress-bar__progress--indeterminate-start",
              style: normalizeStyle(_ctx.intermediateStyle)
            }, null, 4 /* STYLE */),
            createElementVNode("div", {
              class: "va-progress-bar__progress--indeterminate-end",
              style: normalizeStyle(_ctx.intermediateStyle)
            }, null, 4 /* STYLE */)
          ], 64 /* STABLE_FRAGMENT */))
        : (openBlock(), createElementBlock("div", {
            key: 1,
            class: "va-progress-bar__progress",
            style: normalizeStyle(_ctx.progressStyle)
          }, null, 4 /* STYLE */))
    ], 4 /* STYLE */)
  ], 16 /* FULL_PROPS */))
}

script.render = render;
script.__file = "src/components/va-progress-bar/VaProgressBar.vue";

const VaProgressBar = withConfigTransport(script);

export { VaProgressBar };
//# sourceMappingURL=index42.js.map

import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, computed, openBlock, createBlock, resolveDynamicComponent, normalizeClass, normalizeStyle, withCtx, createElementBlock, createCommentVNode, createElementVNode, renderSlot } from 'vue';
import { u as useColors, a as getGradientBackground } from './useColors.js';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import { u as useRouterLinkProps, a as useRouterLink } from './useRouterLink.js';
import { u as useTextColor } from './useTextColor.js';
import { u as useAlignProps, a as useAlign } from './useAlign.js';
import 'colortranslator';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';

var script$3 = defineComponent({
    name: 'VaCard',
    emits: ['click'],
    props: {
        ...useRouterLinkProps,
        tag: { type: String, default: 'div' },
        square: { type: Boolean, default: false },
        outlined: { type: Boolean, default: false },
        bordered: { type: Boolean, default: true },
        disabled: { type: Boolean, default: false },
        href: { type: String, default: '' },
        target: { type: String, default: '' },
        stripe: { type: Boolean, default: false },
        stripeColor: { type: String, default: '' },
        gradient: { type: Boolean, default: false },
        textColor: { type: String },
        color: { type: String, default: 'white' },
    },
    setup(props) {
        const { getColor } = useColors();
        const { isLinkTag, tagComputed, hrefComputed } = useRouterLink(props);
        const { textColorComputed } = useTextColor();
        const stripeStyles = computed(() => ({ background: getColor(props.stripeColor) }));
        const cardClasses = computed(() => ({
            'va-card--square': props.square,
            'va-card--outlined': props.outlined,
            'va-card--no-border': !props.bordered,
            'va-card--disabled': props.disabled,
            'va-card--link': isLinkTag.value,
        }));
        const cardStyles = computed(() => {
            if (props.gradient && props.color) {
                return {
                    background: getGradientBackground(getColor(props.color)),
                    color: textColorComputed.value,
                };
            }
            return { background: getColor(props.color), color: textColorComputed.value };
        });
        return {
            cardClasses,
            cardStyles,
            stripeStyles,
            tagComputed,
            hrefComputed,
        };
    },
});

function render$3(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createBlock(resolveDynamicComponent(_ctx.tagComputed), {
    class: normalizeClass(["va-card", _ctx.cardClasses]),
    style: normalizeStyle(_ctx.cardStyles),
    href: _ctx.hrefComputed,
    target: _ctx.target,
    to: _ctx.to,
    replace: _ctx.replace,
    exact: _ctx.exact,
    "active-class": _ctx.activeClass,
    "exact-active-class": _ctx.exactActiveClass
  }, {
    default: withCtx(() => [
      (_ctx.stripe)
        ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: "va-card__stripe",
            style: normalizeStyle(_ctx.stripeStyles)
          }, null, 4 /* STYLE */))
        : createCommentVNode("v-if", true),
      createElementVNode("div", {
        class: "va-card__inner",
        onClick: _cache[0] || (_cache[0] = $event => (_ctx.$emit('click', $event)))
      }, [
        renderSlot(_ctx.$slots, "default")
      ])
    ]),
    _: 3 /* FORWARDED */
  }, 8 /* PROPS */, ["class", "style", "href", "target", "to", "replace", "exact", "active-class", "exact-active-class"]))
}

script$3.render = render$3;
script$3.__file = "src/components/va-card/VaCard.vue";

var script$2 = defineComponent({
    name: 'VaCardContent',
});

const _hoisted_1 = { class: "va-card__content" };

function render$2(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("div", _hoisted_1, [
    renderSlot(_ctx.$slots, "default")
  ]))
}

script$2.render = render$2;
script$2.__file = "src/components/va-card/VaCardContent.vue";

var script$1 = defineComponent({
    name: 'VaCardTitle',
    props: {
        textColor: { type: String },
    },
    setup(props) {
        const { getColor } = useColors();
        return {
            titleStyles: computed(() => ({
                color: props.textColor ? getColor(props.textColor) : '',
            })),
        };
    },
});

function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("div", {
    class: "va-card__title",
    style: normalizeStyle(_ctx.titleStyles)
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 4 /* STYLE */))
}

script$1.render = render$1;
script$1.__file = "src/components/va-card/VaCardTitle.vue";

var script = defineComponent({
    name: 'VaCardActions',
    props: {
        ...useAlignProps,
    },
    setup(props) {
        const { alignComputed } = useAlign(props);
        return {
            alignComputed,
        };
    },
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createElementBlock("div", {
    class: normalizeClass([_ctx.vertical ? 'va-card__actions_vertical' : 'va-card__actions']),
    style: normalizeStyle(_ctx.alignComputed)
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 6 /* CLASS, STYLE */))
}

script.render = render;
script.__file = "src/components/va-card/VaCardActions.vue";

const VaCardContent = withConfigTransport(script$2);
const VaCardTitle = withConfigTransport(script$1);
const VaCardActions = withConfigTransport(script);
const VaCard = withConfigTransport(script$3);

export { VaCard, VaCardActions, VaCardContent, VaCardTitle };
//# sourceMappingURL=index13.js.map

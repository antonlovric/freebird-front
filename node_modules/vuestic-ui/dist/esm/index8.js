import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, computed, ref, h, Fragment, openBlock, createBlock, resolveDynamicComponent, normalizeClass, withCtx, renderSlot, createTextVNode, toDisplayString } from 'vue';
import { u as useAlignProps, a as useAlign } from './useAlign.js';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import { u as useColors } from './useColors.js';
import { h as hasOwnProperty } from './utils.js';
import 'colortranslator';
import { u as useRouterLinkProps, a as useRouterLink } from './useRouterLink.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';

var script$1 = defineComponent({
    name: 'VaBreadcrumbs',
    props: {
        ...useAlignProps,
        separator: { type: String, default: '/' },
        color: { type: String, default: 'gray' },
        activeColor: { type: String, default: null },
        separatorColor: { type: String, default: null },
    },
    setup(props, { slots }) {
        const { alignComputed } = useAlign(props);
        const { getColor } = useColors();
        const computedThemesSeparatorColor = computed(() => {
            return props.separatorColor ? getColor(props.separatorColor) : getColor(props.color);
        });
        const computedThemesActiveColor = computed(() => {
            return props.activeColor ? getColor(props.activeColor) : getColor(props.color);
        });
        const childNodeFilter = (result, node) => {
            const nodes = node && node.type === Fragment && node.children ? node.children : [node];
            return [
                ...result,
                ...nodes.filter((node) => { var _a, _b; return !!((_b = (_a = node === null || node === void 0 ? void 0 : node.type) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.match(/VaBreadcrumbsItem$/)); }),
            ];
        };
        const createSeparatorComponent = () => {
            // Temp fix for https://github.com/intlify/vue-i18n-next/issues/412
            // `separatorNode` can be moved outside this method after update vuestic's minimal vue version to 3.1.0
            // testing: have to monitor errors after leaving breadcrumbs page in doc
            const separatorNode = slots.separator ? slots.separator() : [props.separator];
            return h('span', {
                ariaHidden: true,
                class: ['va-breadcrumbs__separator'],
                style: [{ color: computedThemesSeparatorColor.value }],
            }, separatorNode);
        };
        const isDisabledChild = (child) => {
            const childPropData = child === null || child === void 0 ? void 0 : child.props;
            if (!childPropData || !hasOwnProperty(childPropData, 'disabled')) {
                return false;
            }
            if (childPropData.disabled === '') { // NOTE: by default empty attribute is ''
                return true;
            }
            return Boolean(childPropData.disabled);
        };
        const isAllChildLinks = ref(true);
        const getChildren = () => {
            var _a;
            const childNodes = ((_a = slots === null || slots === void 0 ? void 0 : slots.default()) === null || _a === void 0 ? void 0 : _a.reduce(childNodeFilter, [])) || [];
            const childNodesLength = childNodes.length;
            const isLastIndexChildNodes = (index) => index === childNodesLength - 1;
            const isChildLink = (child) => {
                const childPropData = child === null || child === void 0 ? void 0 : child.props;
                if (!childPropData || !hasOwnProperty(childPropData, 'to')) {
                    return false;
                }
                return !!(childPropData.to && !childPropData.disabled);
            };
            const createChildComponent = (child, index) => h('span', {
                class: 'va-breadcrumbs__item',
                ariaCurrent: (isLastIndexChildNodes(index) && isChildLink(child)) ? 'location' : false,
                style: {
                    color: (!isLastIndexChildNodes(index) && !isDisabledChild(child)) ? computedThemesActiveColor.value : null,
                },
            }, [child]);
            const children = [];
            if (childNodesLength) {
                childNodes.forEach((child, index) => {
                    if (isAllChildLinks.value && !isChildLink(child)) {
                        isAllChildLinks.value = false;
                    }
                    children.push(createChildComponent(child, index));
                    if (!isLastIndexChildNodes(index)) {
                        children.push(createSeparatorComponent());
                    }
                });
            }
            return children;
        };
        return () => h('div', {
            class: 'va-breadcrumbs',
            style: alignComputed.value,
            role: isAllChildLinks.value ? 'navigation' : undefined,
            ariaLabel: isAllChildLinks.value ? 'breadcrumbs' : undefined,
        }, getChildren());
    },
});

script$1.__file = "src/components/va-breadcrumbs/VaBreadcrumbs.vue";

var script = defineComponent({
    name: 'VaBreadcrumbsItem',
    props: {
        ...useRouterLinkProps,
        disabled: { type: Boolean, default: false },
        label: { type: String, default: '' },
    },
    setup: (props) => {
        const { tagComputed, hrefComputed, isLinkTag } = useRouterLink(props);
        const classComputed = computed(() => ({
            'va-breadcrumb-item--link': isLinkTag.value,
        }));
        return { tagComputed, hrefComputed, classComputed };
    },
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createBlock(resolveDynamicComponent(_ctx.tagComputed), {
    class: normalizeClass(["va-breadcrumb-item", _ctx.classComputed]),
    "active-class": _ctx.$props.activeClass,
    href: _ctx.hrefComputed,
    to: _ctx.$props.to,
    target: _ctx.$props.target,
    replace: _ctx.$props.replace,
    append: _ctx.$props.append,
    exact: _ctx.$props.exact,
    "exact-active-class": _ctx.$props.exactActiveClass
  }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(_ctx.label), 1 /* TEXT */)
      ])
    ]),
    _: 3 /* FORWARDED */
  }, 8 /* PROPS */, ["class", "active-class", "href", "to", "target", "replace", "append", "exact", "exact-active-class"]))
}

script.render = render;
script.__file = "src/components/va-breadcrumbs/VaBreadcrumbsItem/VaBreadcrumbsItem.vue";

const VaBreadcrumbsItem = withConfigTransport(script);
const VaBreadcrumbs = withConfigTransport(script$1);

export { VaBreadcrumbs, VaBreadcrumbsItem };
//# sourceMappingURL=index8.js.map

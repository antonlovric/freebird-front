import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, createVNode, withCtx, Fragment, renderList, createBlock, mergeProps, createTextVNode, toDisplayString } from 'vue';
import { u as useColors, s as shiftHSLAColor } from './useColors.js';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import { u as useTextColor } from './useTextColor.js';
import { VaButton } from './index12.js';
import { VaButtonGroup } from './index10.js';
import './VaConfig.js';
import 'colortranslator';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';
import './VaButton.js';
import './useLoading.js';
import './useRouterLink.js';
import './useSize.js';
import './index31.js';
import './VaIcon.js';
import './index43.js';
import './clamp.js';
import './toNumber.js';

var script = defineComponent({
    name: 'VaButtonToggle',
    components: {
        VaButtonGroup,
        VaButton,
    },
    emits: ['update:modelValue'],
    props: {
        options: {
            type: Array,
            required: true,
        },
        color: { type: String, default: 'primary' },
        textColor: { type: String, default: undefined },
        activeButtonTextColor: { type: String },
        modelValue: { type: [String, Number], default: '' },
        outline: { type: Boolean, default: false },
        flat: { type: Boolean, default: false },
        rounded: { type: Boolean, default: true },
        disabled: { type: Boolean, default: false },
        size: {
            type: String,
            default: 'medium',
            validator: (value) => ['medium', 'small', 'large'].includes(value),
        },
        toggleColor: { type: String, default: '' },
        gradient: { type: Boolean, default: false },
    },
    setup(props, { emit }) {
        const { getColor } = useColors();
        const colorComputed = computed(() => getColor(props.color));
        const isFlatOrOutline = computed(() => props.outline || props.flat);
        const activeButtonColor = computed(() => {
            if (props.toggleColor) {
                return getColor(props.toggleColor);
            }
            else {
                return isFlatOrOutline.value ? colorComputed.value : shiftHSLAColor(colorComputed.value, { l: -6 });
            }
        });
        const { textColorComputed: activeButtonTextColor } = useTextColor(activeButtonColor);
        const isToggled = (value) => value === props.modelValue;
        const getButtonProps = (option = {}) => {
            var _a;
            const iconsProps = {
                icon: option.icon,
                iconRight: option.iconRight,
            };
            if (!isToggled(option.value)) {
                return iconsProps;
            }
            return {
                color: activeButtonColor.value,
                textColor: (_a = props.activeButtonTextColor) !== null && _a !== void 0 ? _a : activeButtonTextColor.value,
                ...iconsProps,
                ...(isFlatOrOutline.value && { outline: false, flat: false }),
            };
        };
        const getButtonClass = (buttonValue) => ({ 'va-button--active': isToggled(buttonValue) });
        const changeValue = (value) => emit('update:modelValue', value);
        return {
            getButtonProps,
            getButtonClass,
            changeValue,
            isToggled,
        };
    },
});

const _hoisted_1 = { class: "va-button-toggle" };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  const _component_va_button_group = resolveComponent("va-button-group");

  return (openBlock(), createElementBlock("div", _hoisted_1, [
    createVNode(_component_va_button_group, {
      color: _ctx.color,
      textColor: _ctx.textColor,
      rounded: _ctx.rounded,
      outline: _ctx.outline,
      flat: _ctx.flat,
      gradient: _ctx.gradient
    }, {
      default: withCtx(() => [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.options, (option) => {
          return (openBlock(), createBlock(_component_va_button, mergeProps({
            key: option.value,
            "aria-pressed": _ctx.isToggled(option.value),
            class: _ctx.getButtonClass(option.value),
            disabled: _ctx.disabled,
            size: _ctx.size
          }, _ctx.getButtonProps(option), {
            onClick: $event => (_ctx.changeValue(option.value))
          }), {
            default: withCtx(() => [
              createTextVNode(toDisplayString(option.label), 1 /* TEXT */)
            ]),
            _: 2 /* DYNAMIC */
          }, 1040 /* FULL_PROPS, DYNAMIC_SLOTS */, ["aria-pressed", "class", "disabled", "size", "onClick"]))
        }), 128 /* KEYED_FRAGMENT */))
      ]),
      _: 1 /* STABLE */
    }, 8 /* PROPS */, ["color", "textColor", "rounded", "outline", "flat", "gradient"])
  ]))
}

script.render = render;
script.__file = "src/components/va-button-toggle/VaButtonToggle.vue";

const VaButtonToggle = withConfigTransport(script);

export { VaButtonToggle };
//# sourceMappingURL=index11.js.map

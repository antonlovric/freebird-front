{"version":3,"file":"index33.js","sources":["../../src/components/va-infinite-scroll/hooks/useScroll.ts","../../src/components/va-infinite-scroll/VaInfiniteScroll.vue","../../src/components/va-infinite-scroll/VaInfiniteScroll.vue?vue&type=template&id=b399cd12&lang.js","../../src/components/va-infinite-scroll/index.ts"],"sourcesContent":["import { Ref, onMounted, onBeforeUnmount } from 'vue'\n\ninterface ScrollTargetProps {\n  scrollTarget: HTMLElement | string | undefined;\n  disabled: boolean;\n  reverse: boolean;\n}\n\nexport const useScroll = (\n  props: ScrollTargetProps,\n  element: Ref<HTMLElement | undefined>,\n  handler: Ref<any>,\n) => {\n  const addScrollListener = () => {\n    element.value?.addEventListener(\n      'scroll',\n      handler.value,\n      { passive: true },\n    )\n  }\n\n  const removeScrollListener = () => {\n    element.value?.removeEventListener(\n      'scroll',\n      handler.value,\n    )\n  }\n\n  onMounted(() => {\n    if (!element.value) { return }\n\n    element.value.style.overflowY = 'scroll'\n\n    if (props.reverse) {\n      element.value.scrollTop = element.value.scrollHeight\n    }\n\n    addScrollListener()\n  })\n\n  onBeforeUnmount(removeScrollListener)\n\n  return {\n    addScrollListener,\n    removeScrollListener,\n  }\n}\n","<template>\n  <component\n    :is=\"$props.tag\"\n    ref=\"element\"\n    role=\"feed\"\n    class=\"va-infinite-scroll\"\n    :class=\"{ 'va-infinite-scroll--reversed': $props.reverse }\"\n    :aria-busy=\"fetching\"\n  >\n    <slot name=\"default\" />\n\n    <div\n      ref=\"spinnerSlotContainer\"\n      class=\"va-infinite-scroll__spinner\"\n      :class=\"{ 'va-infinite-scroll__spinner--invisible': !fetching }\"\n    >\n      <slot\n        v-if=\"!$props.disabled\"\n        name=\"loading\"\n      >\n        <div class=\"va-infinite-scroll__spinner__default\">\n          <va-progress-circle\n            size=\"small\"\n            :thickness=\"0.15\"\n            :color=\"spinnerColor\"\n            indeterminate\n          />\n        </div>\n      </slot>\n    </div>\n  </component>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, ref, shallowRef, watch } from 'vue'\nimport debounce from 'lodash/debounce.js'\n\nimport { sleep } from '../../services/utils'\nimport { useColors } from '../../composables'\nimport { useScroll } from './hooks/useScroll'\n\nimport { VaProgressCircle } from '../va-progress-circle'\n\nexport default defineComponent({\n  name: 'VaInfiniteScroll',\n\n  components: { VaProgressCircle },\n\n  props: {\n    load: { type: Function, required: true },\n    offset: { type: Number, default: 500 },\n    reverse: { type: Boolean, default: false },\n    disabled: { type: Boolean, default: false },\n    scrollTarget: { type: [String, Object] as PropType<string | HTMLElement>, default: undefined },\n    debounce: { type: Number, default: 100 },\n    tag: { type: String, default: 'div' },\n  },\n\n  emits: ['onload', 'onerror'],\n\n  setup (props, { emit }) {\n    const element = shallowRef<HTMLElement>()\n    const spinnerSlotContainer = shallowRef<HTMLDivElement>()\n\n    const fetching = ref(false)\n    const error = ref(false)\n    const forcedScrolling = ref(false)\n    const debouncedLoad = ref()\n    const notScrolledContentBeforeLoad = ref(0)\n    const prevScrollTop = ref(0)\n\n    const scrollTargetElement = computed<HTMLElement>(() => {\n      let target\n\n      if (typeof props.scrollTarget === 'string') {\n        target = document.querySelector(props.scrollTarget)\n      } else {\n        target = props.scrollTarget || element.value?.parentElement\n      }\n\n      return (target || document.body) as HTMLElement\n    })\n\n    const {\n      addScrollListener,\n      removeScrollListener,\n    } = useScroll(props, scrollTargetElement, debouncedLoad)\n\n    const { getColor } = useColors()\n\n    const spinnerColor = computed(() => {\n      return error.value ? getColor('danger') : getColor('primary')\n    })\n\n    const spinnerHeight = computed(() => {\n      return spinnerSlotContainer.value?.offsetHeight || 0\n    })\n\n    const computedOffset = computed(() => {\n      return props.offset + spinnerHeight.value\n    })\n\n    const stop = () => {\n      if (props.disabled) { return }\n\n      fetching.value = false\n      removeScrollListener()\n    }\n\n    const resume = () => {\n      if (props.disabled) { return }\n\n      addScrollListener()\n    }\n\n    const onLoad = () => {\n      const { scrollTop, scrollHeight, clientHeight } = scrollTargetElement.value\n      notScrolledContentBeforeLoad.value = scrollHeight - scrollTop\n      const scrollDelta = scrollTop - prevScrollTop.value\n      prevScrollTop.value = scrollTop\n\n      if (props.disabled || error.value || fetching.value) { return }\n\n      if (forcedScrolling.value) {\n        forcedScrolling.value = false\n        return\n      }\n\n      const isReverseScrollDirection = (props.reverse && scrollDelta > 0) || (!props.reverse && scrollDelta < 0)\n      if (isReverseScrollDirection) { return }\n\n      const offset = props.reverse ? scrollTop : scrollHeight - scrollTop - clientHeight\n      if (offset > computedOffset.value) { return }\n\n      fetching.value = true\n\n      props.load()\n        .then(finishLoading)\n        .catch(onError)\n    }\n\n    const forceSetScrollTopToTarget = (value: number) => {\n      forcedScrolling.value = true\n      scrollTargetElement.value.scrollTop = value\n    }\n\n    const updateTargetElementScrollTop = () => {\n      const { scrollTop, scrollHeight, clientHeight } = scrollTargetElement.value\n\n      if (props.reverse) {\n        const isScrolledUp = scrollHeight - scrollTop < notScrolledContentBeforeLoad.value\n        const isSpinnerHidden = scrollTop >= spinnerHeight.value\n\n        if (isScrolledUp && isSpinnerHidden) { return }\n\n        (scrollHeight - notScrolledContentBeforeLoad.value > spinnerHeight.value)\n          ? forceSetScrollTopToTarget(scrollHeight - notScrolledContentBeforeLoad.value)\n          : forceSetScrollTopToTarget(spinnerHeight.value)\n      }\n\n      if (!props.reverse) {\n        const isSpinnerHidden = scrollHeight - scrollTop - clientHeight >= spinnerHeight.value\n        !isSpinnerHidden && forceSetScrollTopToTarget(scrollHeight - clientHeight - spinnerHeight.value)\n      }\n    }\n\n    const finishLoading = () => {\n      updateTargetElementScrollTop()\n      fetching.value = false\n      emit('onload')\n    }\n\n    const stopErrorDisplay = () => {\n      updateTargetElementScrollTop()\n      forcedScrolling.value = false\n      error.value = false\n      fetching.value = false\n      emit('onerror')\n    }\n\n    const onError = () => {\n      stop()\n      error.value = true\n\n      sleep(1200)\n        .then(stopErrorDisplay)\n        .then(resume)\n    }\n\n    watch(() => props.debounce, (value) => {\n      debouncedLoad.value = debounce(onLoad, value)\n    }, { immediate: true })\n\n    watch(() => props.disabled, (value) => {\n      value ? stop() : resume()\n    })\n\n    return {\n      element,\n      spinnerSlotContainer,\n\n      spinnerColor,\n      fetching,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import 'variables';\n\n.va-infinite-scroll {\n  display: var(--va-infinite-scroll-display);\n  flex-direction: var(--va-infinite-scroll-flex-direction);\n  font-family: var(--va-font-family);\n\n  &--reversed {\n    flex-direction: var(--va-infinite-scroll-reversed-flex-direction);\n  }\n\n  &__spinner {\n    &__default {\n      @include flex-center();\n\n      width: var(--va-infinite-scroll-spinner-default-width);\n      min-height: var(--va-infinite-scroll-spinner-default-min-height);\n    }\n\n    &--invisible {\n      visibility: hidden !important;\n    }\n\n    @include flex-center();\n  }\n}\n</style>\n","<template>\n  <component\n    :is=\"$props.tag\"\n    ref=\"element\"\n    role=\"feed\"\n    class=\"va-infinite-scroll\"\n    :class=\"{ 'va-infinite-scroll--reversed': $props.reverse }\"\n    :aria-busy=\"fetching\"\n  >\n    <slot name=\"default\" />\n\n    <div\n      ref=\"spinnerSlotContainer\"\n      class=\"va-infinite-scroll__spinner\"\n      :class=\"{ 'va-infinite-scroll__spinner--invisible': !fetching }\"\n    >\n      <slot\n        v-if=\"!$props.disabled\"\n        name=\"loading\"\n      >\n        <div class=\"va-infinite-scroll__spinner__default\">\n          <va-progress-circle\n            size=\"small\"\n            :thickness=\"0.15\"\n            :color=\"spinnerColor\"\n            indeterminate\n          />\n        </div>\n      </slot>\n    </div>\n  </component>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, ref, shallowRef, watch } from 'vue'\nimport debounce from 'lodash/debounce.js'\n\nimport { sleep } from '../../services/utils'\nimport { useColors } from '../../composables'\nimport { useScroll } from './hooks/useScroll'\n\nimport { VaProgressCircle } from '../va-progress-circle'\n\nexport default defineComponent({\n  name: 'VaInfiniteScroll',\n\n  components: { VaProgressCircle },\n\n  props: {\n    load: { type: Function, required: true },\n    offset: { type: Number, default: 500 },\n    reverse: { type: Boolean, default: false },\n    disabled: { type: Boolean, default: false },\n    scrollTarget: { type: [String, Object] as PropType<string | HTMLElement>, default: undefined },\n    debounce: { type: Number, default: 100 },\n    tag: { type: String, default: 'div' },\n  },\n\n  emits: ['onload', 'onerror'],\n\n  setup (props, { emit }) {\n    const element = shallowRef<HTMLElement>()\n    const spinnerSlotContainer = shallowRef<HTMLDivElement>()\n\n    const fetching = ref(false)\n    const error = ref(false)\n    const forcedScrolling = ref(false)\n    const debouncedLoad = ref()\n    const notScrolledContentBeforeLoad = ref(0)\n    const prevScrollTop = ref(0)\n\n    const scrollTargetElement = computed<HTMLElement>(() => {\n      let target\n\n      if (typeof props.scrollTarget === 'string') {\n        target = document.querySelector(props.scrollTarget)\n      } else {\n        target = props.scrollTarget || element.value?.parentElement\n      }\n\n      return (target || document.body) as HTMLElement\n    })\n\n    const {\n      addScrollListener,\n      removeScrollListener,\n    } = useScroll(props, scrollTargetElement, debouncedLoad)\n\n    const { getColor } = useColors()\n\n    const spinnerColor = computed(() => {\n      return error.value ? getColor('danger') : getColor('primary')\n    })\n\n    const spinnerHeight = computed(() => {\n      return spinnerSlotContainer.value?.offsetHeight || 0\n    })\n\n    const computedOffset = computed(() => {\n      return props.offset + spinnerHeight.value\n    })\n\n    const stop = () => {\n      if (props.disabled) { return }\n\n      fetching.value = false\n      removeScrollListener()\n    }\n\n    const resume = () => {\n      if (props.disabled) { return }\n\n      addScrollListener()\n    }\n\n    const onLoad = () => {\n      const { scrollTop, scrollHeight, clientHeight } = scrollTargetElement.value\n      notScrolledContentBeforeLoad.value = scrollHeight - scrollTop\n      const scrollDelta = scrollTop - prevScrollTop.value\n      prevScrollTop.value = scrollTop\n\n      if (props.disabled || error.value || fetching.value) { return }\n\n      if (forcedScrolling.value) {\n        forcedScrolling.value = false\n        return\n      }\n\n      const isReverseScrollDirection = (props.reverse && scrollDelta > 0) || (!props.reverse && scrollDelta < 0)\n      if (isReverseScrollDirection) { return }\n\n      const offset = props.reverse ? scrollTop : scrollHeight - scrollTop - clientHeight\n      if (offset > computedOffset.value) { return }\n\n      fetching.value = true\n\n      props.load()\n        .then(finishLoading)\n        .catch(onError)\n    }\n\n    const forceSetScrollTopToTarget = (value: number) => {\n      forcedScrolling.value = true\n      scrollTargetElement.value.scrollTop = value\n    }\n\n    const updateTargetElementScrollTop = () => {\n      const { scrollTop, scrollHeight, clientHeight } = scrollTargetElement.value\n\n      if (props.reverse) {\n        const isScrolledUp = scrollHeight - scrollTop < notScrolledContentBeforeLoad.value\n        const isSpinnerHidden = scrollTop >= spinnerHeight.value\n\n        if (isScrolledUp && isSpinnerHidden) { return }\n\n        (scrollHeight - notScrolledContentBeforeLoad.value > spinnerHeight.value)\n          ? forceSetScrollTopToTarget(scrollHeight - notScrolledContentBeforeLoad.value)\n          : forceSetScrollTopToTarget(spinnerHeight.value)\n      }\n\n      if (!props.reverse) {\n        const isSpinnerHidden = scrollHeight - scrollTop - clientHeight >= spinnerHeight.value\n        !isSpinnerHidden && forceSetScrollTopToTarget(scrollHeight - clientHeight - spinnerHeight.value)\n      }\n    }\n\n    const finishLoading = () => {\n      updateTargetElementScrollTop()\n      fetching.value = false\n      emit('onload')\n    }\n\n    const stopErrorDisplay = () => {\n      updateTargetElementScrollTop()\n      forcedScrolling.value = false\n      error.value = false\n      fetching.value = false\n      emit('onerror')\n    }\n\n    const onError = () => {\n      stop()\n      error.value = true\n\n      sleep(1200)\n        .then(stopErrorDisplay)\n        .then(resume)\n    }\n\n    watch(() => props.debounce, (value) => {\n      debouncedLoad.value = debounce(onLoad, value)\n    }, { immediate: true })\n\n    watch(() => props.disabled, (value) => {\n      value ? stop() : resume()\n    })\n\n    return {\n      element,\n      spinnerSlotContainer,\n\n      spinnerColor,\n      fetching,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import 'variables';\n\n.va-infinite-scroll {\n  display: var(--va-infinite-scroll-display);\n  flex-direction: var(--va-infinite-scroll-flex-direction);\n  font-family: var(--va-font-family);\n\n  &--reversed {\n    flex-direction: var(--va-infinite-scroll-reversed-flex-direction);\n  }\n\n  &__spinner {\n    &__default {\n      @include flex-center();\n\n      width: var(--va-infinite-scroll-spinner-default-width);\n      min-height: var(--va-infinite-scroll-spinner-default-min-height);\n    }\n\n    &--invisible {\n      visibility: hidden !important;\n    }\n\n    @include flex-center();\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport _VaInfiniteScroll from './VaInfiniteScroll.vue'\n\nexport const VaInfiniteScroll = withConfigTransport(_VaInfiniteScroll)\n"],"names":["debounce","_createBlock","_resolveDynamicComponent","_normalizeClass","_renderSlot","_createElementVNode","_createVNode","_VaInfiniteScroll"],"mappings":"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"}
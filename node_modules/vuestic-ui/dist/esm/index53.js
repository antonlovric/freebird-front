import { w as withConfigTransport } from './withConfigTransport.js';
import { h, Fragment, defineComponent } from 'vue';
import { e as extractComponentProps, f as filterComponentProps } from './child-props.js';
import './global-config.js';
import './usePopover.js';
import './global-utils.js';
import { u as useColors } from './useColors.js';
import './VaConfig.js';
import './global-properties.js';
import './isSymbol.js';
import './ssr-utils.js';
import 'colortranslator';

const getPropsData = (slot) => slot?.props;

const getIsActive = (slot) => !!slot?.props?.active || false;

/**
* Slot can be Vue Fragment generated by v-for.
* If slot `type` property is Vue Fragment Symbol return true
*/
const isVueFragment = (slot) => slot.type === Fragment;

const isEmptyArray = (arr) => arr && arr.length === 0;

/* Returns correct slots without v-for vue fragment */
function getSlots (slots) {
  const defaultSlots = slots.default?.();

  if (!defaultSlots || isEmptyArray(defaultSlots)) { return [] }
  if (isVueFragment(defaultSlots[0])) { return defaultSlots[0].children }

  return defaultSlots
}

const processSlots = (context) => {
  const slots = getSlots(context.slots);

  slots.forEach((slot, index) => {
    if (!getPropsData(slot)) {
      slot.props = {};
    }

    const propsData = getPropsData(slot);

    // Pass down vertical prop.
    propsData.vertical = context.props.vertical;

    if (context.props.centered) {
      // Every second slot will be inverted
      propsData.inverted = !!(index % 2);
    }

    if (index === 0) {
      propsData.isFirst = true;
    }
    if (index === slots.length - 1) {
      propsData.isLast = true;
    }

    const currentSlotActive = propsData.active;

    // For inactive slot props are default
    if (!currentSlotActive) {
      return
    }

    if (index === 0) {
      propsData.activePrevious = currentSlotActive;
    }

    if (index === slots.length - 1) {
      propsData.activeNext = currentSlotActive;
    }

    const previousSlotActive = getIsActive(slots[index - 1]);
    if (previousSlotActive) {
      propsData.activePrevious = true;
    }

    const nextSlotActive = getIsActive(slots[index + 1]);
    if (nextSlotActive) {
      propsData.activeNext = true;
    }
  });

  return slots
};

const COMPONENT_NAME$1 = 'va-timeline';

var script$2 = {
  name: COMPONENT_NAME$1,
  props: {
    vertical: { type: Boolean },
    centered: { type: Boolean },
    alignTop: { type: Boolean },
  },
  setup (props, { slots }) {
    return () => h(
      'div',
      {
        class: {
          [COMPONENT_NAME$1]: true,
          [`${COMPONENT_NAME$1}--vertical`]: props.vertical,
          [`${COMPONENT_NAME$1}--align-top`]: props.alignTop,
        },
      },
      processSlots({ props, slots }),
    )
  },
};

script$2.__file = "src/components/va-timeline/VaTimeline.vue";

const componentName = 'va-timeline-separator';
var script$1 = defineComponent({
    name: componentName,
    props: {
        color: { type: String, default: 'primary' },
        vertical: { type: Boolean },
        active: { type: Boolean },
        activePrevious: { type: Boolean },
        activeNext: { type: Boolean },
    },
    setup(props) {
        const { getColor } = useColors();
        return () => h('div', {
            class: {
                [componentName]: true,
                [`${componentName}--vertical`]: props.vertical,
            },
        }, [
            h('div', {
                class: {
                    [`${componentName}__line`]: true,
                    [`${componentName}__line--active`]: props.activePrevious,
                },
                style: {
                    backgroundColor: getColor(props.activePrevious ? props.color : 'divider'),
                },
            }),
            h('div', {
                class: {
                    [`${componentName}__center`]: true,
                    [`${componentName}__center--active`]: props.active,
                },
                style: {
                    backgroundColor: getColor(props.active ? props.color : 'divider'),
                },
            }),
            h('div', {
                class: {
                    [`${componentName}__line`]: true,
                    [`${componentName}__line--active`]: props.activeNext,
                },
                style: {
                    backgroundColor: getColor(props.activeNext ? props.color : 'divider'),
                },
            }),
        ]);
    },
});

script$1.__file = "src/components/va-timeline/VaTimelineSeparator/VaTimelineSeparator.vue";

const VaTimelineSeparator = withConfigTransport(script$1);

const COMPONENT_NAME = 'va-timeline-item';
const VaTimelineSeparatorProps = extractComponentProps(VaTimelineSeparator);
var script = defineComponent({
    name: COMPONENT_NAME,
    props: {
        ...VaTimelineSeparatorProps,
        color: { type: String, default: 'primary' },
        isFirst: { type: Boolean },
        isLast: { type: Boolean },
        inverted: { type: Boolean },
    },
    setup(props, { slots }) {
        const children = [
            h(VaTimelineSeparator, { ...filterComponentProps(props, VaTimelineSeparatorProps).value }),
        ];
        const before = props.inverted ? slots.after : slots.before;
        if (before) {
            children.unshift(h('div', { class: `${COMPONENT_NAME}__before` }, before()));
        }
        const after = props.inverted ? slots.before : slots.after;
        if (after) {
            children.push(h('div', { class: `${COMPONENT_NAME}__after` }, after()));
        }
        return () => h('div', {
            class: [
                { [COMPONENT_NAME]: true },
                { [`${COMPONENT_NAME}--vertical`]: props.vertical },
                { [`${COMPONENT_NAME}--is-first`]: props.isFirst },
                { [`${COMPONENT_NAME}--is-last`]: props.isLast },
            ],
        }, children);
    },
});

script.__file = "src/components/va-timeline/VaTimelineItem/VaTimelineItem.vue";

const VaTimelineItem = withConfigTransport(script);

const VaTimeline = withConfigTransport(script$2);

export { VaTimeline, VaTimelineItem, VaTimelineSeparator };
//# sourceMappingURL=index53.js.map

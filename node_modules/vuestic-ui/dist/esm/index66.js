import { c as createToastInstance, a as closeById, b as closeAllNotifications } from './toast.js';
import { defineVuesticPlugin } from './index55.js';
import { defineGlobalProperty } from './global-properties.js';
import { c as createModalInstance } from './modal.js';

const createVaToastPlugin = (app) => ({
    /** Returns toast instance id */
    init(options) {
        return createToastInstance(options, app === null || app === void 0 ? void 0 : app._context);
    },
    close(id) {
        closeById(id);
    },
    closeAll(allApps = false) {
        closeAllNotifications(allApps ? undefined : app === null || app === void 0 ? void 0 : app._context);
    },
});
const VaToastPlugin = defineVuesticPlugin(() => ({
    install(app) {
        defineGlobalProperty(app, '$vaToast', createVaToastPlugin(app));
    },
}));

const vaDropdownPlugin = {
    closeDropdown() {
        let vm = this;
        // Hide first parent dropdown.
        while ((vm = vm.$parent)) {
            const name = vm.$options.name;
            if (name === 'VaDropdown') {
                vm.hide();
                break;
            }
        }
    },
};
const VaDropdownPlugin = defineVuesticPlugin(() => ({
    install(app) {
        defineGlobalProperty(app, '$closeDropdown', vaDropdownPlugin.closeDropdown);
        defineGlobalProperty(app, '$vaDropdown', vaDropdownPlugin);
    },
}));

const createVaModalPlugin = (app) => ({
    init(options) {
        return createModalInstance(options, app === null || app === void 0 ? void 0 : app._context);
    },
});
const VaModalPlugin = defineVuesticPlugin(() => ({
    install(app) {
        defineGlobalProperty(app, '$vaModal', createVaModalPlugin(app));
    },
}));

export { VaToastPlugin as V, VaDropdownPlugin as a, VaModalPlugin as b };
//# sourceMappingURL=index66.js.map

import { w as withConfigTransport } from './withConfigTransport.js';
import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, withCtx, createVNode, mergeProps, toHandlers, withKeys, withModifiers, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from 'vue';
import { p as placementsPositions, e as pick_1 } from './usePopover.js';
import './global-config.js';
import './global-utils.js';
import 'colortranslator';
import { u as useEmitProxy } from './useEmitProxy.js';
import { a as useStatefulProps, b as useStateful } from './useStateful.js';
import { VaDropdown, VaDropdownContent } from './index27.js';
import { VaButton } from './index12.js';
import { VaButtonGroup } from './index10.js';
import './VaConfig.js';
import './isSymbol.js';
import './ssr-utils.js';
import './global-properties.js';
import './useBem.js';
import './_createCompounder.js';
import './useCaptureEvent.js';
import './debounce.js';
import './toNumber.js';
import './useColors.js';
import './useTextColor.js';
import './VaButton.js';
import './useLoading.js';
import './useRouterLink.js';
import './useSize.js';
import './index31.js';
import './VaIcon.js';
import './index43.js';
import './clamp.js';

const { createEmits, createVOnListeners: createListeners } = useEmitProxy(['click']);
const { createEmits: createMainButtonEmits, createVOnListeners: createMainButtonListeners } = useEmitProxy([{ listen: 'click', emit: 'main-button-click' }]);
const componentName = 'VaButtonDropdown';
var script = defineComponent({
    name: componentName,
    components: {
        VaButtonGroup,
        VaButton,
        VaDropdown,
        VaDropdownContent,
    },
    emits: ['update:modelValue', ...createEmits(), ...createMainButtonEmits()],
    props: {
        ...useStatefulProps,
        modelValue: { type: Boolean, default: false },
        stateful: { type: Boolean, default: true },
        color: { type: String, default: 'primary' },
        textColor: { type: String, default: undefined },
        size: {
            type: String,
            default: 'medium',
            validator: (value) => ['medium', 'small', 'large'].includes(value),
        },
        outline: { type: Boolean, default: false },
        flat: { type: Boolean, default: false },
        rounded: { type: Boolean, default: true },
        gradient: { type: Boolean, default: undefined },
        icon: { type: String, default: 'expand_more' },
        openedIcon: { type: String, default: 'expand_less' },
        hideIcon: { type: Boolean, default: false },
        leftIcon: { type: Boolean, default: false },
        disableButton: { type: Boolean, default: false },
        disableDropdown: { type: Boolean, default: false },
        disabled: { type: Boolean, default: false },
        placement: {
            type: String,
            default: 'bottom',
            validator: (placement) => placementsPositions.includes(placement),
        },
        offset: { type: [Number, Array], default: 2 },
        keepAnchorWidth: { type: Boolean, default: false },
        closeOnContentClick: { type: Boolean, default: true },
        split: { type: Boolean },
        splitTo: { type: String, default: '' },
        splitHref: { type: String, default: '' },
        loading: { type: Boolean, default: false },
        label: { type: String },
    },
    setup(props, { emit, slots }) {
        const { valueComputed } = useStateful(props, emit);
        const computedIcon = computed(() => {
            return valueComputed.value ? props.openedIcon : props.icon;
        });
        const computedClass = computed(() => ({
            'va-button-dropdown': true,
            'va-button-dropdown--split': props.split,
            'va-button-dropdown--normal': props.size === 'medium',
            'va-button-dropdown--large': props.size === 'large',
            'va-button-dropdown--small': props.size === 'small',
        }));
        const computedButtonIcons = computed(() => {
            const propName = (props.label || slots.label) && !props.leftIcon ? 'icon-right' : 'icon';
            return props.hideIcon ? {} : { [propName]: computedIcon.value };
        });
        const computedViewStyles = computed(() => pick_1(props, ['outline', 'gradient', 'rounded', 'flat', 'size', 'color']));
        const computedMainButtonProps = computed(() => ({
            to: props.splitTo,
            href: props.splitHref,
            loading: props.loading,
        }));
        const hideDropdown = () => { valueComputed.value = false; };
        return {
            hideDropdown,
            valueComputed,
            computedIcon,
            computedClass,
            listeners: createListeners(emit),
            mainButtonListeners: createMainButtonListeners(emit),
            computedButtonIcons,
            computedViewStyles,
            computedMainButtonProps,
        };
    },
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  const _component_va_dropdown_content = resolveComponent("va-dropdown-content");
  const _component_va_dropdown = resolveComponent("va-dropdown");
  const _component_va_button_group = resolveComponent("va-button-group");

  return (openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.computedClass)
  }, [
    (!_ctx.$props.split)
      ? (openBlock(), createBlock(_component_va_dropdown, {
          key: 0,
          disabled: _ctx.$props.disabled,
          placement: _ctx.$props.placement,
          offset: _ctx.$props.offset,
          "keep-anchor-width": _ctx.$props.keepAnchorWidth,
          "close-on-content-click": _ctx.$props.closeOnContentClick,
          stateful: _ctx.$props.stateful,
          modelValue: _ctx.valueComputed,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => ((_ctx.valueComputed) = $event))
        }, {
          anchor: withCtx(() => [
            createVNode(_component_va_button, mergeProps({
              disabled: _ctx.$props.disabled,
              round: !_ctx.$props.label && !_ctx.$slots.label
            }, { ..._ctx.computedButtonIcons, ..._ctx.computedViewStyles }, toHandlers(_ctx.listeners), {
              onKeydown: withKeys(withModifiers(_ctx.hideDropdown, ["prevent"]), ["esc"])
            }), {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "label", {}, () => [
                  createTextVNode(toDisplayString(_ctx.label), 1 /* TEXT */)
                ])
              ]),
              _: 3 /* FORWARDED */
            }, 16 /* FULL_PROPS */, ["disabled", "round", "onKeydown"])
          ]),
          default: withCtx(() => [
            createVNode(_component_va_dropdown_content, null, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3 /* FORWARDED */
            })
          ]),
          _: 3 /* FORWARDED */
        }, 8 /* PROPS */, ["disabled", "placement", "offset", "keep-anchor-width", "close-on-content-click", "stateful", "modelValue"]))
      : (openBlock(), createBlock(_component_va_button_group, mergeProps({
          key: 1,
          class: { 'va-button-group__left-icon': _ctx.$props.leftIcon }
        }, _ctx.computedViewStyles), {
          default: withCtx(() => [
            (!_ctx.$props.leftIcon)
              ? (openBlock(), createBlock(_component_va_button, mergeProps({
                  key: 0,
                  disabled: _ctx.$props.disabled || _ctx.$props.disableButton
                }, _ctx.computedMainButtonProps, toHandlers(_ctx.mainButtonListeners)), {
                  default: withCtx(() => [
                    renderSlot(_ctx.$slots, "label", {}, () => [
                      createTextVNode(toDisplayString(_ctx.label), 1 /* TEXT */)
                    ])
                  ]),
                  _: 3 /* FORWARDED */
                }, 16 /* FULL_PROPS */, ["disabled"]))
              : createCommentVNode("v-if", true),
            createVNode(_component_va_dropdown, {
              disabled: _ctx.$props.disabled || _ctx.$props.disableDropdown,
              placement: _ctx.$props.placement,
              offset: _ctx.$props.offset,
              stateful: _ctx.$props.stateful,
              modelValue: _ctx.valueComputed,
              "onUpdate:modelValue": _cache[1] || (_cache[1] = $event => ((_ctx.valueComputed) = $event))
            }, {
              anchor: withCtx(() => [
                createVNode(_component_va_button, mergeProps({
                  "aria-label": "toggle dropdown",
                  disabled: _ctx.$props.disabled || _ctx.$props.disableDropdown,
                  icon: _ctx.computedIcon
                }, toHandlers(_ctx.listeners), {
                  onKeydown: withKeys(withModifiers(_ctx.hideDropdown, ["prevent"]), ["esc"])
                }), null, 16 /* FULL_PROPS */, ["disabled", "icon", "onKeydown"])
              ]),
              default: withCtx(() => [
                createVNode(_component_va_dropdown_content, null, {
                  default: withCtx(() => [
                    renderSlot(_ctx.$slots, "default")
                  ]),
                  _: 3 /* FORWARDED */
                })
              ]),
              _: 3 /* FORWARDED */
            }, 8 /* PROPS */, ["disabled", "placement", "offset", "stateful", "modelValue"]),
            (_ctx.$props.leftIcon)
              ? (openBlock(), createBlock(_component_va_button, mergeProps({
                  key: 1,
                  disabled: _ctx.$props.disabled || _ctx.$props.disableButton
                }, _ctx.computedMainButtonProps, toHandlers(_ctx.mainButtonListeners)), {
                  default: withCtx(() => [
                    renderSlot(_ctx.$slots, "label", {}, () => [
                      createTextVNode(toDisplayString(_ctx.label), 1 /* TEXT */)
                    ])
                  ]),
                  _: 3 /* FORWARDED */
                }, 16 /* FULL_PROPS */, ["disabled"]))
              : createCommentVNode("v-if", true)
          ]),
          _: 3 /* FORWARDED */
        }, 16 /* FULL_PROPS */, ["class"]))
  ], 2 /* CLASS */))
}

script.render = render;
script.__file = "src/components/va-button-dropdown/VaButtonDropdown.vue";

const VaButtonDropdown = withConfigTransport(script);

export { VaButtonDropdown };
//# sourceMappingURL=index9.js.map

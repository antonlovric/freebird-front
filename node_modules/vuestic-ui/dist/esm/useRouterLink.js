import { computed, getCurrentInstance } from 'vue';

const useRouterLinkProps = {
    tag: { type: String, default: 'span' },
    to: { type: [String, Object], default: '' },
    replace: { type: Boolean, default: false },
    append: { type: Boolean, default: false },
    exact: { type: Boolean, default: false },
    activeClass: { type: String, default: '' },
    exactActiveClass: { type: String, default: '' },
    href: { type: String, default: '' },
    target: { type: String, default: '' },
    disabled: { type: Boolean, default: false },
};
const useRouterLink = (props) => {
    const globalProperties = computed(() => { var _a; return (_a = getCurrentInstance()) === null || _a === void 0 ? void 0 : _a.appContext.config.globalProperties; });
    const isNuxt = computed(() => { var _a; return !!((_a = globalProperties.value) === null || _a === void 0 ? void 0 : _a.$nuxt); });
    const vueRouter = computed(() => { var _a; return (_a = globalProperties.value) === null || _a === void 0 ? void 0 : _a.$router; });
    const vueRoute = computed(() => { var _a; return (_a = globalProperties.value) === null || _a === void 0 ? void 0 : _a.$route; });
    const tagComputed = computed(() => {
        if (props.disabled) {
            return props.tag;
        }
        if (props.href && !props.to) {
            return 'a';
        }
        if (props.to) {
            return isNuxt.value ? 'nuxt-link' : 'router-link';
        }
        return props.tag;
    });
    const isLinkTag = computed(() => ['a', 'router-link', 'nuxt-link'].includes(tagComputed.value));
    const isActiveRouterLink = computed(() => {
        if (!vueRouter.value || !props.to) {
            return false;
        }
        const to = vueRouter.value.resolve(props.to).href;
        const currentHref = vueRouter.value.currentRoute.value.path;
        return to.replace('#', '') === currentHref.replace('#', '');
    });
    const hrefComputed = computed(() => {
        var _a;
        // to resolve href on server for SEO optimization
        // https://github.com/nuxt/nuxt.js/issues/8204
        // @ts-ignore
        return props.href || (props.to ? (_a = vueRouter.value) === null || _a === void 0 ? void 0 : _a.resolve(props.to, vueRoute.value).href : '');
    });
    return {
        tagComputed,
        isActiveRouterLink,
        hrefComputed,
        isLinkTag,
    };
};

export { useRouterLink as a, useRouterLinkProps as u };
//# sourceMappingURL=useRouterLink.js.map

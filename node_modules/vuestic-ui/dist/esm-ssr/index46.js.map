{"version":3,"file":"index46.js","sources":["../../src/composables/useMaxSelections.ts","../../src/components/va-select/VaSelectOptionList/VaSelectOptionList.vue","../../src/utils/scroll-to-element.ts","../../src/components/va-select/VaSelectOptionList/VaSelectOptionList.vue?vue&type=template&id=59030744&lang.js","../../src/components/va-select/VaSelectOptionList/index.ts","../../src/components/va-select/VaSelect.vue","../../src/components/va-select/VaSelect.vue?vue&type=template&id=ef3afb70&lang.js","../../src/components/va-select/index.ts"],"sourcesContent":["import { Ref } from 'vue'\n\n/**\n * You could add these props to any component by destructuring them inside props option.\n * @example\n * props: { ...useMaxSelectionsProps, componentsOwnProp, etc. }\n * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision\n */\nexport const useMaxSelectionsProps = {\n  maxSelections: {\n    type: [Number, String],\n    default: undefined,\n  },\n}\n\nexport function useMaxSelections (\n  selections: Ref<any[]>,\n  maxSelections: Ref<number | string | undefined>,\n  emit: (event: 'update:modelValue', ...args: any[]) => void,\n) {\n  const exceedsMaxSelections = (): boolean => {\n    if (maxSelections.value === undefined || isNaN(+maxSelections.value)) { return false }\n    return selections.value.length >= maxSelections.value\n  }\n\n  const addOption = (optionToAdd: any): void => {\n    const newSelectedOptions = [...selections.value, optionToAdd]\n    emit('update:modelValue', newSelectedOptions)\n  }\n\n  return {\n    exceedsMaxSelections,\n    addOption,\n  }\n}\n","<template>\n  <div\n    ref=\"rootElement\"\n    class=\"va-select-option-list\"\n    :tabindex=\"tabindex\"\n    @keydown.up.stop.prevent=\"hoverPreviousOption\"\n    @keydown.left.stop.prevent=\"hoverPreviousOption\"\n    @keydown.down.stop.prevent=\"hoverNextOption\"\n    @keydown.right.stop.prevent=\"hoverNextOption\"\n    @scroll.passive=\"onScroll\"\n  >\n    <template\n      v-for=\"(options, groupName) in optionGroups\"\n      :key=\"groupName\"\n    >\n      <span\n        v-if=\"groupName !== '_noGroup'\"\n        class=\"va-select-option-list__group-name\"\n      >\n        {{ groupName }}\n      </span>\n      <div\n        v-for=\"option in options\"\n        :key=\"$props.getTrackBy(option)\"\n        :ref=\"setItemRef(option)\"\n        role=\"option\"\n        :aria-selected=\"!!$props.getSelectedState(option)\"\n        :class=\"getOptionClass(option)\"\n        :style=\"getOptionStyle(option)\"\n        @click=\"selectOption(option)\"\n        @mouseover=\"updateHoveredOption(option)\"\n      >\n        <va-icon\n          v-if=\"getOptionIcon(option)\"\n          size=\"small\"\n          class=\"va-select-option-list__option--icon\"\n          :name=\"getOptionIcon(option)\"\n        />\n        <span>{{ getText(option) }}</span>\n        <va-icon\n          v-show=\"$props.getSelectedState(option)\"\n          class=\"va-select-option-list__option--selected-icon\"\n          size=\"small\"\n          name=\"done\"\n          :color=\"getColor($props.color)\"\n        />\n      </div>\n    </template>\n    <div\n      v-if=\"!filteredOptions.length\"\n      class=\"va-select-option-list no-options\"\n    >\n      {{ noOptionsText }}\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, watch, ref, computed, ComponentPublicInstance, shallowRef } from 'vue'\n\nimport { scrollToElement } from '../../../utils/scroll-to-element'\nimport { useColors, useColorProps, SelectableOption } from '../../../composables'\n\nimport { VaIcon } from '../../va-icon'\n\nexport default defineComponent({\n  name: 'VaSelectOptionList',\n  components: { VaIcon },\n  emits: [\n    'select-option',\n    'update:hoveredOption',\n    'no-previous-option-to-hover',\n    'scroll-bottom',\n  ],\n  props: {\n    ...useColorProps,\n    options: { type: Array as PropType<SelectableOption[]>, default: () => [] },\n    noOptionsText: { type: String, default: 'Items not found' },\n    getSelectedState: { type: Function as PropType<(option: SelectableOption) => boolean>, required: true },\n    getText: { type: Function as PropType<(option: SelectableOption) => string>, required: true },\n    getTrackBy: { type: Function as PropType<(option: SelectableOption) => number>, required: true },\n    getGroupBy: { type: Function as PropType<(option: SelectableOption) => string>, required: true },\n    multiple: { type: Boolean, default: false },\n    search: { type: String, default: '' },\n    tabindex: { type: Number, default: 0 },\n    hoveredOption: {\n      type: [String, Number, Object] as PropType<SelectableOption | null>,\n      default: null,\n    },\n  },\n  setup (props, { emit }) {\n    const { getColor, getHoverColor } = useColors()\n\n    const rootElement = shallowRef<HTMLElement>()\n    const itemRefs = ref<Record<number, HTMLElement>>({})\n\n    const onScroll = (event: UIEvent) => {\n      const target = event.target as Element\n      if (!target) { return }\n\n      if (target.scrollTop + target.clientHeight === target.scrollHeight) {\n        emit('scroll-bottom')\n      }\n    }\n\n    const beforeUpdate = () => { itemRefs.value = {} }\n\n    const setItemRef = (option: SelectableOption) => (el: Element | null | ComponentPublicInstance) => {\n      if (el) {\n        itemRefs.value[props.getTrackBy(option)] = el as HTMLElement\n      }\n    }\n\n    const hoveredOptionComputed = computed({\n      get: () => props.hoveredOption || null,\n      set: (value: SelectableOption | null) => emit('update:hoveredOption', value),\n    })\n\n    const filteredOptions = computed(() => {\n      if (!props.search) {\n        return props.options\n      }\n\n      return props.options.filter((option: SelectableOption) => {\n        const optionText = props.getText(option).toString().toUpperCase()\n        const search = props.search.toUpperCase()\n        return optionText.includes(search)\n      })\n    })\n\n    const optionGroups = computed(() => filteredOptions.value.reduce((groups: Record<string, SelectableOption[]>, option) => {\n      if (typeof option !== 'object' || !option.group) {\n        groups._noGroup.push(option)\n      } else {\n        const groupBy = props.getGroupBy(option)\n\n        if (!groups[groupBy]) { groups[groupBy] = [] }\n\n        groups[groupBy].push(option)\n      }\n\n      return groups\n    }, { _noGroup: [] }))\n\n    const selectOption = (option: SelectableOption) => emit('select-option', option)\n\n    const getOptionIcon = (option: SelectableOption) => typeof option === 'object' ? (option.icon as string) : undefined\n\n    const getOptionClass = (option: SelectableOption) => ({\n      'va-select-option-list__option': true,\n      'va-select-option-list__option--selected': props.getSelectedState(option),\n    })\n\n    const getOptionStyle = (option: SelectableOption) => ({\n      color: props.getSelectedState(option) ? getColor(props.color) : 'inherit',\n      backgroundColor: isHovered(option) ? getHoverColor(getColor(props.color)) : 'transparent',\n    })\n\n    const isHovered = (option: SelectableOption) => {\n      if (!hoveredOptionComputed.value) { return false }\n      if (typeof option === 'string') { return option === hoveredOptionComputed.value }\n      if (!props.getTrackBy) { return false }\n\n      return props.getTrackBy(hoveredOptionComputed.value) === props.getTrackBy(option)\n    }\n\n    const updateHoveredOption = (option?: SelectableOption) => { hoveredOptionComputed.value = option || null }\n\n    const hoveredOptionIndex = computed(() => filteredOptions.value.findIndex((option) => {\n      return !!hoveredOptionComputed.value && props.getTrackBy(option) === props.getTrackBy(hoveredOptionComputed.value)\n    }))\n\n    const hoverPreviousOption = () => {\n      if (!hoveredOptionComputed.value) {\n        // Hover last option from list\n        filteredOptions.value.length && updateHoveredOption(filteredOptions.value.at(-1))\n      } else {\n        if (filteredOptions.value[hoveredOptionIndex.value - 1]) {\n          hoveredOptionComputed.value = filteredOptions.value[hoveredOptionIndex.value - 1]\n        } else {\n          emit('no-previous-option-to-hover')\n        }\n      }\n    }\n\n    const hoverNextOption = () => {\n      if (!hoveredOptionComputed.value) {\n        // Hover first option from list\n        filteredOptions.value.length && updateHoveredOption(filteredOptions.value[0])\n      } else {\n        if (filteredOptions.value[hoveredOptionIndex.value + 1]) {\n          hoveredOptionComputed.value = filteredOptions.value[hoveredOptionIndex.value + 1]\n        }\n      }\n    }\n\n    const hoverFirstOption = () => {\n      if (filteredOptions.value.length > 0) {\n        updateHoveredOption(filteredOptions.value[0])\n      }\n    }\n\n    const focus = () => {\n      // Prevent scroll since element in dropdown and it cause scrolling to page end.\n      rootElement.value?.focus({ preventScroll: true })\n    }\n\n    const scrollToOption = (option: SelectableOption) => {\n      if (!option) { return }\n\n      const element = itemRefs.value[props.getTrackBy(option)]\n\n      if (element) {\n        scrollToElement(element)\n      }\n    }\n\n    watch(() => props.hoveredOption, (newOption: SelectableOption | null) => newOption && scrollToOption(newOption))\n\n    const publicMethods = {\n      hoverPreviousOption,\n      hoverNextOption,\n      hoverFirstOption,\n      focus,\n      scrollToOption,\n    }\n\n    return {\n      rootElement,\n\n      getColor,\n      filteredOptions,\n      optionGroups,\n      onScroll,\n      beforeUpdate,\n      setItemRef,\n      selectOption,\n      getOptionIcon,\n      getOptionClass,\n      getOptionStyle,\n      updateHoveredOption,\n      ...publicMethods,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../styles/resources\";\n@import \"variables\";\n\n.va-select-option-list {\n  display: var(--va-select-option-list-display);\n  flex-direction: var(--va-select-option-list-flex-direction);\n  width: var(--va-select-option-list-width);\n  list-style: var(--va-select-option-list-list-style);\n  max-height: var(--va-select-option-list-max-height);\n  font-family: var(--va-font-family);\n  overflow: auto;\n\n  @include va-scroll();\n\n  &__group-name {\n    padding: var(--va-select-option-list-group-name-padding);\n    font-size: var(--va-select-option-list-group-name-font-size);\n    color: var(--va-select-option-list-group-name-color);\n    font-weight: var(--va-select-option-list-group-name-font-weight);\n    text-transform: uppercase;\n  }\n\n  &__option {\n    cursor: var(--va-select-option-list-option-cursor);\n    display: var(--va-select-option-list-option-display);\n    align-items: var(--va-select-option-list-option-align-items);\n    padding: var(--va-select-option-list-option-padding);\n    min-height: var(--va-select-option-list-option-min-height);\n    word-break: var(--va-select-option-list-option-word-break);\n\n    &--icon {\n      margin-right: var(--va-select-option-list-icon-margin-right);\n    }\n\n    &--selected-icon {\n      margin-left: var(--va-select-option-list-selected-icon-margin-left);\n      font-size: var(--va-select-option-list-selected-icon-font-size);\n    }\n  }\n\n  &.no-options {\n    padding: 0.5rem;\n  }\n}\n</style>\n","const getTopCoordinate = (element: HTMLElement) => element.offsetTop\nconst getBottomCoordinate = (element: HTMLElement) => element.offsetTop + element.offsetHeight\nconst getCenterCoordinate = (element: HTMLElement) => element.offsetTop + element.offsetHeight / 2\n\nconst getScrollTop = (element: HTMLElement, scrollTarget: HTMLElement, verticalAlignment?: 'start' | 'end' | 'center' | 'any') => {\n  const viewHeight = scrollTarget.offsetHeight\n  const currentPosition = scrollTarget.scrollTop\n  const top = getTopCoordinate(element) - scrollTarget.offsetTop\n  const center = getCenterCoordinate(element) - scrollTarget.offsetTop\n  const bottom = getBottomCoordinate(element) - scrollTarget.offsetTop\n\n  if (verticalAlignment === 'start') {\n    return top\n  }\n\n  if (verticalAlignment === 'end') {\n    return bottom - viewHeight\n  }\n\n  if (verticalAlignment === 'center') {\n    return center - viewHeight / 2\n  }\n\n  if (verticalAlignment === 'any') {\n    if (top - currentPosition < 0) {\n      return top\n    }\n\n    if (bottom - currentPosition > viewHeight) {\n      return bottom - viewHeight\n    }\n  }\n}\n\n/**\n * @param options.scrollTarget - element that will be scrolled\n */\nexport const scrollToElement = (element: HTMLElement, options: {\n  scrollTarget?: HTMLElement,\n  verticalAlignment?: 'start' | 'end' | 'center' | 'any',\n  smooth?: boolean,\n} = {\n  scrollTarget: element.parentElement!,\n  verticalAlignment: 'any',\n  smooth: false,\n}) => {\n  const scrollTarget = options.scrollTarget || element.parentElement!\n\n  const top = getScrollTop(element, scrollTarget, options.verticalAlignment)\n\n  if (top === undefined) { return }\n\n  scrollTarget.scroll({\n    top: top,\n    behavior: options.smooth ? 'smooth' : 'auto',\n  })\n}\n","<template>\n  <div\n    ref=\"rootElement\"\n    class=\"va-select-option-list\"\n    :tabindex=\"tabindex\"\n    @keydown.up.stop.prevent=\"hoverPreviousOption\"\n    @keydown.left.stop.prevent=\"hoverPreviousOption\"\n    @keydown.down.stop.prevent=\"hoverNextOption\"\n    @keydown.right.stop.prevent=\"hoverNextOption\"\n    @scroll.passive=\"onScroll\"\n  >\n    <template\n      v-for=\"(options, groupName) in optionGroups\"\n      :key=\"groupName\"\n    >\n      <span\n        v-if=\"groupName !== '_noGroup'\"\n        class=\"va-select-option-list__group-name\"\n      >\n        {{ groupName }}\n      </span>\n      <div\n        v-for=\"option in options\"\n        :key=\"$props.getTrackBy(option)\"\n        :ref=\"setItemRef(option)\"\n        role=\"option\"\n        :aria-selected=\"!!$props.getSelectedState(option)\"\n        :class=\"getOptionClass(option)\"\n        :style=\"getOptionStyle(option)\"\n        @click=\"selectOption(option)\"\n        @mouseover=\"updateHoveredOption(option)\"\n      >\n        <va-icon\n          v-if=\"getOptionIcon(option)\"\n          size=\"small\"\n          class=\"va-select-option-list__option--icon\"\n          :name=\"getOptionIcon(option)\"\n        />\n        <span>{{ getText(option) }}</span>\n        <va-icon\n          v-show=\"$props.getSelectedState(option)\"\n          class=\"va-select-option-list__option--selected-icon\"\n          size=\"small\"\n          name=\"done\"\n          :color=\"getColor($props.color)\"\n        />\n      </div>\n    </template>\n    <div\n      v-if=\"!filteredOptions.length\"\n      class=\"va-select-option-list no-options\"\n    >\n      {{ noOptionsText }}\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, watch, ref, computed, ComponentPublicInstance, shallowRef } from 'vue'\n\nimport { scrollToElement } from '../../../utils/scroll-to-element'\nimport { useColors, useColorProps, SelectableOption } from '../../../composables'\n\nimport { VaIcon } from '../../va-icon'\n\nexport default defineComponent({\n  name: 'VaSelectOptionList',\n  components: { VaIcon },\n  emits: [\n    'select-option',\n    'update:hoveredOption',\n    'no-previous-option-to-hover',\n    'scroll-bottom',\n  ],\n  props: {\n    ...useColorProps,\n    options: { type: Array as PropType<SelectableOption[]>, default: () => [] },\n    noOptionsText: { type: String, default: 'Items not found' },\n    getSelectedState: { type: Function as PropType<(option: SelectableOption) => boolean>, required: true },\n    getText: { type: Function as PropType<(option: SelectableOption) => string>, required: true },\n    getTrackBy: { type: Function as PropType<(option: SelectableOption) => number>, required: true },\n    getGroupBy: { type: Function as PropType<(option: SelectableOption) => string>, required: true },\n    multiple: { type: Boolean, default: false },\n    search: { type: String, default: '' },\n    tabindex: { type: Number, default: 0 },\n    hoveredOption: {\n      type: [String, Number, Object] as PropType<SelectableOption | null>,\n      default: null,\n    },\n  },\n  setup (props, { emit }) {\n    const { getColor, getHoverColor } = useColors()\n\n    const rootElement = shallowRef<HTMLElement>()\n    const itemRefs = ref<Record<number, HTMLElement>>({})\n\n    const onScroll = (event: UIEvent) => {\n      const target = event.target as Element\n      if (!target) { return }\n\n      if (target.scrollTop + target.clientHeight === target.scrollHeight) {\n        emit('scroll-bottom')\n      }\n    }\n\n    const beforeUpdate = () => { itemRefs.value = {} }\n\n    const setItemRef = (option: SelectableOption) => (el: Element | null | ComponentPublicInstance) => {\n      if (el) {\n        itemRefs.value[props.getTrackBy(option)] = el as HTMLElement\n      }\n    }\n\n    const hoveredOptionComputed = computed({\n      get: () => props.hoveredOption || null,\n      set: (value: SelectableOption | null) => emit('update:hoveredOption', value),\n    })\n\n    const filteredOptions = computed(() => {\n      if (!props.search) {\n        return props.options\n      }\n\n      return props.options.filter((option: SelectableOption) => {\n        const optionText = props.getText(option).toString().toUpperCase()\n        const search = props.search.toUpperCase()\n        return optionText.includes(search)\n      })\n    })\n\n    const optionGroups = computed(() => filteredOptions.value.reduce((groups: Record<string, SelectableOption[]>, option) => {\n      if (typeof option !== 'object' || !option.group) {\n        groups._noGroup.push(option)\n      } else {\n        const groupBy = props.getGroupBy(option)\n\n        if (!groups[groupBy]) { groups[groupBy] = [] }\n\n        groups[groupBy].push(option)\n      }\n\n      return groups\n    }, { _noGroup: [] }))\n\n    const selectOption = (option: SelectableOption) => emit('select-option', option)\n\n    const getOptionIcon = (option: SelectableOption) => typeof option === 'object' ? (option.icon as string) : undefined\n\n    const getOptionClass = (option: SelectableOption) => ({\n      'va-select-option-list__option': true,\n      'va-select-option-list__option--selected': props.getSelectedState(option),\n    })\n\n    const getOptionStyle = (option: SelectableOption) => ({\n      color: props.getSelectedState(option) ? getColor(props.color) : 'inherit',\n      backgroundColor: isHovered(option) ? getHoverColor(getColor(props.color)) : 'transparent',\n    })\n\n    const isHovered = (option: SelectableOption) => {\n      if (!hoveredOptionComputed.value) { return false }\n      if (typeof option === 'string') { return option === hoveredOptionComputed.value }\n      if (!props.getTrackBy) { return false }\n\n      return props.getTrackBy(hoveredOptionComputed.value) === props.getTrackBy(option)\n    }\n\n    const updateHoveredOption = (option?: SelectableOption) => { hoveredOptionComputed.value = option || null }\n\n    const hoveredOptionIndex = computed(() => filteredOptions.value.findIndex((option) => {\n      return !!hoveredOptionComputed.value && props.getTrackBy(option) === props.getTrackBy(hoveredOptionComputed.value)\n    }))\n\n    const hoverPreviousOption = () => {\n      if (!hoveredOptionComputed.value) {\n        // Hover last option from list\n        filteredOptions.value.length && updateHoveredOption(filteredOptions.value.at(-1))\n      } else {\n        if (filteredOptions.value[hoveredOptionIndex.value - 1]) {\n          hoveredOptionComputed.value = filteredOptions.value[hoveredOptionIndex.value - 1]\n        } else {\n          emit('no-previous-option-to-hover')\n        }\n      }\n    }\n\n    const hoverNextOption = () => {\n      if (!hoveredOptionComputed.value) {\n        // Hover first option from list\n        filteredOptions.value.length && updateHoveredOption(filteredOptions.value[0])\n      } else {\n        if (filteredOptions.value[hoveredOptionIndex.value + 1]) {\n          hoveredOptionComputed.value = filteredOptions.value[hoveredOptionIndex.value + 1]\n        }\n      }\n    }\n\n    const hoverFirstOption = () => {\n      if (filteredOptions.value.length > 0) {\n        updateHoveredOption(filteredOptions.value[0])\n      }\n    }\n\n    const focus = () => {\n      // Prevent scroll since element in dropdown and it cause scrolling to page end.\n      rootElement.value?.focus({ preventScroll: true })\n    }\n\n    const scrollToOption = (option: SelectableOption) => {\n      if (!option) { return }\n\n      const element = itemRefs.value[props.getTrackBy(option)]\n\n      if (element) {\n        scrollToElement(element)\n      }\n    }\n\n    watch(() => props.hoveredOption, (newOption: SelectableOption | null) => newOption && scrollToOption(newOption))\n\n    const publicMethods = {\n      hoverPreviousOption,\n      hoverNextOption,\n      hoverFirstOption,\n      focus,\n      scrollToOption,\n    }\n\n    return {\n      rootElement,\n\n      getColor,\n      filteredOptions,\n      optionGroups,\n      onScroll,\n      beforeUpdate,\n      setItemRef,\n      selectOption,\n      getOptionIcon,\n      getOptionClass,\n      getOptionStyle,\n      updateHoveredOption,\n      ...publicMethods,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../styles/resources\";\n@import \"variables\";\n\n.va-select-option-list {\n  display: var(--va-select-option-list-display);\n  flex-direction: var(--va-select-option-list-flex-direction);\n  width: var(--va-select-option-list-width);\n  list-style: var(--va-select-option-list-list-style);\n  max-height: var(--va-select-option-list-max-height);\n  font-family: var(--va-font-family);\n  overflow: auto;\n\n  @include va-scroll();\n\n  &__group-name {\n    padding: var(--va-select-option-list-group-name-padding);\n    font-size: var(--va-select-option-list-group-name-font-size);\n    color: var(--va-select-option-list-group-name-color);\n    font-weight: var(--va-select-option-list-group-name-font-weight);\n    text-transform: uppercase;\n  }\n\n  &__option {\n    cursor: var(--va-select-option-list-option-cursor);\n    display: var(--va-select-option-list-option-display);\n    align-items: var(--va-select-option-list-option-align-items);\n    padding: var(--va-select-option-list-option-padding);\n    min-height: var(--va-select-option-list-option-min-height);\n    word-break: var(--va-select-option-list-option-word-break);\n\n    &--icon {\n      margin-right: var(--va-select-option-list-icon-margin-right);\n    }\n\n    &--selected-icon {\n      margin-left: var(--va-select-option-list-selected-icon-margin-left);\n      font-size: var(--va-select-option-list-selected-icon-font-size);\n    }\n  }\n\n  &.no-options {\n    padding: 0.5rem;\n  }\n}\n</style>\n","import withConfigTransport from '../../../services/config-transport/withConfigTransport'\nimport _VaSelectOptionList from './VaSelectOptionList.vue'\n\nexport const VaSelectOptionList = withConfigTransport(_VaSelectOptionList)\n","<template>\n  <va-dropdown\n    ref=\"dropdown\"\n    class=\"va-select__dropdown va-select-dropdown\"\n    trigger=\"none\"\n    anchorSelector=\".va-input-wrapper__field\"\n    :placement=\"$props.placement\"\n    :disabled=\"$props.disabled\"\n    :max-height=\"$props.maxHeight\"\n    :fixed=\"$props.fixed\"\n    :close-on-content-click=\"closeOnContentClick\"\n    :stateful=\"false\"\n    :offset=\"[1, 0]\"\n    keep-anchor-width\n    v-model=\"showDropdownContentComputed\"\n    @keydown.up.stop.prevent=\"showDropdown\"\n    @keydown.down.stop.prevent=\"showDropdown\"\n    @keydown.space.stop.prevent=\"showDropdown\"\n    @keydown.enter.stop.prevent=\"showDropdown\"\n    @click.prevent=\"onSelectClick\"\n  >\n    <template #anchor>\n      <va-input-wrapper\n        ref=\"input\"\n        class=\"va-select\"\n        aria-label=\"selected option\"\n        :model-value=\"valueComputedString\"\n        :success=\"$props.success\"\n        :error=\"computedError\"\n        :color=\"$props.color\"\n        :label=\"$props.label\"\n        :loading=\"$props.loading\"\n        :disabled=\"$props.disabled\"\n        :outline=\"$props.outline\"\n        :bordered=\"$props.bordered\"\n        :required-mark=\"$props.requiredMark\"\n        :messages=\"$props.messages\"\n        :error-messages=\"computedErrorMessages\"\n        :focused=\"isFocused\"\n        :tabindex=\"tabIndexComputed\"\n        @focus=\"onInputFocus\"\n        @blur=\"onInputBlur\"\n      >\n        <template\n          v-if=\"$slots.prepend\"\n          #prepend\n        >\n          <slot name=\"prepend\" />\n        </template>\n\n        <template\n          v-if=\"$slots.append\"\n          #append\n        >\n          <slot name=\"append\" />\n        </template>\n\n        <template\n          v-if=\"$slots.prependInner\"\n          #prependInner\n        >\n          <slot name=\"prependInner\" />\n        </template>\n\n        <template #icon>\n          <va-icon\n            v-if=\"showClearIcon\"\n            role=\"button\"\n            aria-hidden=\"false\"\n            aria-label=\"reset\"\n            tabindex=\"0\"\n            v-bind=\"clearIconProps\"\n            @click.stop=\"reset\"\n            @keydown.enter.stop=\"reset\"\n            @keydown.space.stop=\"reset\"\n          />\n        </template>\n\n        <template #appendInner>\n          <slot\n            v-if=\"$slots.appendInner\"\n            name=\"appendInner\"\n          />\n          <va-icon\n            :color=\"toggleIconColor\"\n            :name=\"toggleIcon\"\n          />\n        </template>\n\n        <template\n          #default\n        >\n          <span\n            v-if=\"isPlaceholder\"\n            class=\"va-select__placeholder\"\n          >\n            {{ $props.placeholder }}\n          </span>\n          <slot\n            v-else\n            name=\"content\"\n            v-bind=\"{\n              valueString: valueComputedString,\n              value: valueComputed,\n              tabindex: tabIndexComputed,\n            }\"\n          >\n            {{ valueComputedString }}\n          </slot>\n        </template>\n      </va-input-wrapper>\n    </template>\n\n    <!-- Stop propagation for enter keyup event, to prevent VaDropdown closing -->\n    <va-dropdown-content\n      class=\"va-select-dropdown__content\"\n      :style=\"{ width: $props.width }\"\n      @keyup.enter.stop=\"() => undefined\"\n      @keydown.tab.stop.prevent=\"() => undefined\"\n      @keydown.esc.prevent=\"hideAndFocus\"\n    >\n      <va-input\n        v-if=\"showSearchInput\"\n        ref=\"searchBar\"\n        class=\"va-select__input\"\n        placeholder=\"Search\"\n        aria-label=\"options filter\"\n        :tabindex=\"tabIndexComputed\"\n        :bordered=\"true\"\n        v-model=\"searchInput\"\n        @keydown.up.stop.prevent=\"hoverPreviousOption\"\n        @keydown.left.stop.prevent=\"hoverPreviousOption\"\n        @keydown.down.stop.prevent=\"hoverNextOption\"\n        @keydown.right.stop.prevent=\"hoverNextOption\"\n        @keydown.enter.prevent=\"selectOrAddOption\"\n        @focus=\"hoveredOption = null\"\n      />\n      <div class=\"va-select-dropdown__options-wrapper\">\n        <va-select-option-list\n          ref=\"optionList\"\n          v-model:hoveredOption=\"hoveredOption\"\n          :style=\"{ maxHeight: $props.maxHeight }\"\n          :options=\"filteredOptions\"\n          :selected-value=\"valueComputed\"\n          :get-selected-state=\"checkIsOptionSelected\"\n          :get-text=\"getText\"\n          :get-track-by=\"getTrackBy\"\n          :get-group-by=\"getGroupBy\"\n          :search=\"searchInput\"\n          :no-options-text=\"$props.noOptionsText\"\n          :color=\"$props.color\"\n          :tabindex=\"tabIndexComputed\"\n          @select-option=\"selectOption\"\n          @no-previous-option-to-hover=\"focusSearchBar\"\n          @keydown.enter.stop.prevent=\"selectHoveredOption\"\n          @keydown.space.stop.prevent=\"selectHoveredOption\"\n          @keydown.tab.stop.prevent=\"searchBar && searchBar.focus()\"\n          @keydown=\"onHintedSearch\"\n          @scroll-bottom=\"onScrollBottom\"\n        />\n      </div>\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, ref, computed, watch, nextTick, Ref, shallowRef } from 'vue'\n\nimport { warn } from '../../services/utils'\nimport {\n  useSelectableList, useSelectableListProps,\n  useValidation, useValidationProps, useValidationEmits, ValidationProps,\n  useFormProps,\n  useLoadingProps,\n  useColors,\n  useMaxSelections, useMaxSelectionsProps,\n  useClearableProps, useClearable, useClearableEmits,\n  useFocusDeep,\n} from '../../composables'\n\nimport { VaDropdown, VaDropdownContent } from '../va-dropdown'\nimport { VaIcon } from '../va-icon'\nimport { VaInput, VaInputWrapper } from '../va-input'\nimport { VaSelectOptionList } from './VaSelectOptionList'\n\nimport { SelectDropdownIcon, SelectOption, Placement } from './types'\n\nexport default defineComponent({\n  name: 'VaSelect',\n\n  components: {\n    VaSelectOptionList,\n    VaIcon,\n    VaDropdown,\n    VaDropdownContent,\n    VaInput,\n    VaInputWrapper,\n  },\n\n  emits: [\n    'update:modelValue',\n    'update-search',\n    'create-new',\n    'scroll-bottom',\n    ...useValidationEmits,\n    ...useClearableEmits,\n  ],\n\n  props: {\n    ...useSelectableListProps,\n    ...useValidationProps as ValidationProps<SelectOption>,\n    ...useLoadingProps,\n    ...useMaxSelectionsProps,\n    ...useClearableProps,\n    ...useFormProps,\n\n    modelValue: {\n      type: [String, Number, Array, Object] as PropType<SelectOption | SelectOption[]>,\n      default: '',\n    },\n\n    // Dropdown placement\n    placement: {\n      type: String as PropType<Placement>,\n      default: 'bottom',\n      validator: (placement: string) => ['top', 'bottom'].includes(placement),\n    },\n\n    allowCreate: {\n      type: [Boolean, String] as PropType<boolean | 'unique'>,\n      default: false,\n      validator: (mode: string | boolean) => [true, false, 'unique'].includes(mode),\n    },\n\n    color: { type: String, default: 'primary' },\n    multiple: { type: Boolean, default: false },\n    searchable: { type: Boolean, default: false },\n    separator: { type: String, default: ', ' },\n    width: { type: String, default: '100%' },\n    maxHeight: { type: String, default: '256px' },\n    noOptionsText: { type: String, default: 'Items not found' },\n    fixed: { type: Boolean, default: true },\n    hideSelected: { type: Boolean, default: false },\n    tabindex: { type: Number, default: 0 },\n    dropdownIcon: {\n      type: [String, Object] as PropType<string | SelectDropdownIcon>,\n      default: (): SelectDropdownIcon => ({\n        open: 'expand_more',\n        close: 'expand_less',\n      }),\n      validator: (value: string | SelectDropdownIcon) => {\n        if (typeof value === 'string') { return true }\n        const isOpenIconString = typeof value.open === 'string'\n        const isCloseIconString = typeof value.close === 'string'\n        return isOpenIconString && isCloseIconString\n      },\n    },\n\n    // Input style\n    outline: { type: Boolean, default: false },\n    bordered: { type: Boolean, default: false },\n    label: { type: String, default: '' },\n    placeholder: { type: String, default: '' },\n    requiredMark: { type: Boolean, default: false },\n  },\n\n  setup (props, { emit }) {\n    const optionList = shallowRef<typeof VaSelectOptionList>()\n    const input = shallowRef<typeof VaInput>()\n    const searchBar = shallowRef<typeof VaInput>()\n\n    const isInputFocused = useFocusDeep()\n    const isFocused = computed(() => isInputFocused.value || showDropdownContent.value)\n\n    const { getHoverColor, getColor } = useColors()\n    const { getOptionByValue, getValue, getText, getTrackBy, getGroupBy } = useSelectableList(props)\n\n    const {\n      validate,\n      computedError,\n      computedErrorMessages,\n    } = useValidation(props, emit, () => reset(), () => focus())\n\n    const colorComputed = computed(() => getColor(props.color))\n    const toggleIconColor = computed(() => props.readonly ? getHoverColor(colorComputed.value) : colorComputed.value)\n\n    const onScrollBottom = () => {\n      emit('scroll-bottom')\n    }\n\n    const searchInput = ref('')\n    const showSearchInput = computed(() => props.searchable || props.allowCreate)\n\n    watch(searchInput, (value) => {\n      emit('update-search', value)\n      hoveredOption.value = null\n    })\n\n    // Select value\n\n    const valueComputed = computed<SelectOption | SelectOption[]>({\n      get () {\n        const value = getOptionByValue(props.modelValue)\n\n        if (props.multiple) {\n          if (!value) {\n            return []\n          }\n\n          if (!Array.isArray(value)) {\n            return [value]\n          }\n\n          return value\n        }\n\n        if (Array.isArray(value)) {\n          warn('Model value should be a string or a number for a single Select.')\n\n          if (value.length) {\n            return value[value.length - 1]\n          }\n        }\n\n        return value\n      },\n\n      set (value: SelectOption | SelectOption[]) {\n        if (Array.isArray(value)) {\n          emit('update:modelValue', value.map(getValue))\n        } else {\n          emit('update:modelValue', getValue(value))\n        }\n      },\n    })\n\n    const valueComputedString = computed<string>(() => {\n      if (!valueComputed.value) { return props.clearValue }\n      if (typeof valueComputed.value === 'string' || typeof valueComputed.value === 'number') { return valueComputed.value }\n      if (Array.isArray(valueComputed.value)) {\n        return valueComputed.value.map((value) => getText(value)).join(props.separator) || props.clearValue\n      }\n\n      return getText(valueComputed.value)\n    })\n\n    const isPlaceholder = computed(() => props.placeholder && !valueComputedString.value)\n\n    // Icons\n\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueComputed)\n\n    const showClearIcon = computed(() => {\n      return props.multiple && Array.isArray(valueComputed.value) ? !!valueComputed.value.length : canBeCleared.value\n    })\n\n    const toggleIcon = computed(() => {\n      if (!props.dropdownIcon) { return '' }\n\n      if (typeof props.dropdownIcon === 'string') {\n        return props.dropdownIcon\n      }\n\n      return showDropdownContent.value ? props.dropdownIcon.close : props.dropdownIcon.open\n    })\n\n    // Options\n\n    const filteredOptions = computed(() => {\n      if (!props.options) { return [] }\n\n      if (props.hideSelected) {\n        return props.options.filter((option) => !checkIsOptionSelected(option))\n      }\n\n      return props.options\n    })\n\n    const checkIsOptionSelected = (option: SelectOption) => {\n      if (!valueComputed.value) { return false }\n\n      if (Array.isArray(valueComputed.value)) {\n        return !!valueComputed.value.find((valueItem) => compareOptions(valueItem, option))\n      }\n\n      return compareOptions(valueComputed.value, option)\n    }\n\n    const compareOptions = (option1: SelectOption, option2: SelectOption) => {\n      const one = getValue(option1)\n      const two = getValue(option2)\n\n      // identity check works nice for strings and exact matches.\n      if (one === two) {\n        return true\n      }\n      if (typeof one === 'string' && typeof two === 'string') {\n        return one === two\n      }\n      if (one === null || two === null) {\n        return false\n      }\n      if (typeof one === 'object' && typeof two === 'object') {\n        return getTrackBy(one) === getTrackBy(two)\n      }\n\n      return false\n    }\n\n    const isValueComputedArray = (v: Ref<SelectOption | SelectOption[]>): v is Ref<SelectOption[]> => Array.isArray(v.value)\n\n    const selectOption = (option: SelectOption) => {\n      if (hoveredOption.value === null) {\n        hideAndFocus()\n        return\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = ''\n      }\n\n      if (props.multiple && isValueComputedArray(valueComputed)) {\n        const { exceedsMaxSelections, addOption } = useMaxSelections(valueComputed, ref(props.maxSelections), emit)\n\n        const isSelected = checkIsOptionSelected(getValue(option))\n\n        if (isSelected) {\n          // Unselect\n          valueComputed.value = valueComputed.value.filter((optionSelected) => !compareOptions(getValue(option), getValue(optionSelected)))\n        } else {\n          if (exceedsMaxSelections()) { return }\n          addOption(getValue(option))\n        }\n      } else {\n        valueComputed.value = typeof option === 'string' || typeof option === 'number' ? option : { ...option }\n        hideAndFocus()\n      }\n    }\n\n    const addNewOption = () => {\n      // Do not emit if option already exist and allow create is `unique`\n      const hasAddedOption = props.options?.some((option: SelectOption) => getText(option) === searchInput.value)\n\n      if (!(props.allowCreate === 'unique' && hasAddedOption)) {\n        emit('create-new', searchInput.value)\n        searchInput.value = ''\n      }\n    }\n\n    // Hovered options\n\n    const hoveredOption = ref<SelectOption | null>(null)\n\n    const selectHoveredOption = () => {\n      if (!hoveredOption.value) { return }\n\n      if (!showDropdownContent.value) {\n        // We can not select options if they are hidden\n        showDropdown()\n        return\n      }\n\n      selectOption(hoveredOption.value)\n    }\n\n    const selectOrAddOption = () => {\n      const allowedToCreate = !!props.allowCreate && searchInput.value !== ''\n\n      if (hoveredOption.value !== null) {\n        selectHoveredOption()\n      } else if (allowedToCreate) {\n        addNewOption()\n      }\n    }\n\n    const hoverPreviousOption = () => {\n      optionList.value?.hoverPreviousOption()\n    }\n\n    const hoverNextOption = () => {\n      optionList.value?.hoverNextOption()\n    }\n\n    // Dropdown content\n\n    const showDropdownContent = ref(false)\n\n    const showDropdownContentComputed = computed({\n      get: () => showDropdownContent.value,\n      set: (show: boolean) => {\n        show ? showDropdown() : hideDropdown()\n      },\n    })\n\n    const closeOnContentClick = computed(() => {\n      return !(props.multiple || props.searchable || props.allowCreate)\n    })\n\n    const showDropdown = () => {\n      if (props.disabled || props.readonly) { return }\n\n      showDropdownContent.value = true\n      scrollToSelected()\n      focusSearchOrOptions()\n    }\n\n    const hideDropdown = () => {\n      showDropdownContent.value = false\n      searchInput.value = ''\n      validate()\n    }\n\n    const toggleDropdown = () => {\n      if (showDropdownContent.value) {\n        hideAndFocus()\n      } else {\n        showDropdown()\n      }\n    }\n\n    const onSelectClick = () => {\n      if (props.disabled || props.readonly) { return }\n      toggleDropdown()\n    }\n\n    const hideAndFocus = () => {\n      hideDropdown()\n      isInputFocused.value = true\n    }\n\n    const focusSearchBar = () => {\n      searchBar.value?.focus()\n    }\n\n    const focusOptionList = () => {\n      optionList.value?.focus()\n      !props.modelValue && optionList.value?.hoverFirstOption()\n    }\n\n    const focusSearchOrOptions = () => nextTick(() => {\n      if (showSearchInput.value) {\n        focusSearchBar()\n      } else {\n        focusOptionList()\n      }\n    })\n\n    const onInputFocus = () => {\n      isInputFocused.value = true\n      onFocus()\n    }\n\n    const onInputBlur = () => {\n      if (showDropdownContentComputed.value) { return }\n\n      onBlur()\n\n      isInputFocused.value\n        ? isInputFocused.value = false\n        : validate()\n    }\n\n    /** @public */\n    const focus = () => {\n      if (props.disabled) { return }\n      input.value?.focus()\n    }\n\n    /** @public */\n    const blur = () => {\n      if (showDropdownContentComputed.value) {\n        showDropdownContentComputed.value = false\n      }\n\n      nextTick(input.value?.blur)\n    }\n\n    /** @public */\n    const reset = () => {\n      if (props.multiple) {\n        valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : []\n      } else {\n        valueComputed.value = props.clearValue\n      }\n\n      searchInput.value = ''\n      emit('clear')\n    }\n\n    const tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex)\n\n    const scrollToSelected = () => {\n      const selected = valueComputed.value\n      const nothingSelected = typeof selected !== 'object' && Array.isArray(selected) && !selected.length\n\n      if (nothingSelected) { return }\n\n      const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected\n      hoveredOption.value = scrollTo\n      nextTick(() => optionList.value?.scrollToOption(scrollTo))\n    }\n\n    // Hinted search\n\n    let hintedSearchQuery = ''\n    let hintedSearchQueryTimeoutIndex!: ReturnType<typeof setTimeout>\n    const navigationKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', ' ']\n\n    // Hinted search - hover option if you typing it's value on select without search-bar\n    const onHintedSearch = (event: KeyboardEvent) => {\n      if (navigationKeys.some(key => key === event.key)) {\n        return\n      }\n\n      const isLetter: boolean = event.key.length === 1\n      const isDeleteKey: boolean = event.key === 'Backspace' || event.key === 'Delete'\n\n      clearTimeout(hintedSearchQueryTimeoutIndex)\n\n      if (isDeleteKey) {\n        // Remove last letter from query\n        hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : ''\n      } else if (isLetter) {\n        // Add every new letter to the query\n        hintedSearchQuery += event.key\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = hintedSearchQuery\n        return\n      }\n\n      // Search for an option that matches the query\n      if (hintedSearchQuery) {\n        const appropriateOption = props.options.find(option => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()))\n        if (appropriateOption) {\n          hoveredOption.value = appropriateOption\n        }\n      }\n\n      hintedSearchQueryTimeoutIndex = setTimeout(() => { hintedSearchQuery = '' }, 1000)\n    }\n\n    return {\n      isFocused,\n\n      input,\n      optionList,\n      searchBar,\n\n      reset,\n      focus,\n      blur,\n\n      onInputFocus,\n      onInputBlur,\n      focusOptionList,\n      onSelectClick,\n      focusSearchBar,\n      searchInput,\n      showSearchInput,\n      hoveredOption,\n      tabIndexComputed,\n      valueComputed,\n      valueComputedString,\n      showClearIcon,\n      toggleIcon,\n      computedErrorMessages,\n      computedError,\n      filteredOptions,\n      checkIsOptionSelected,\n      closeOnContentClick,\n      selectOption,\n      selectOrAddOption,\n      selectHoveredOption,\n      hoverPreviousOption,\n      hoverNextOption,\n      showDropdownContentComputed,\n      showDropdown,\n      hideDropdown,\n      hideAndFocus,\n      toggleDropdown,\n      toggleIconColor,\n      onHintedSearch,\n      getText,\n      getTrackBy,\n      getGroupBy,\n      onScrollBottom,\n      clearIconProps,\n      isPlaceholder,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-select {\n  cursor: var(--va-select-cursor);\n\n  &__placeholder {\n    color: var(--va-input-placeholder-text-color);\n  }\n}\n\n.va-select-dropdown {\n  .va-dropdown__anchor {\n    display: block;\n  }\n\n  &__content {\n    overflow: hidden;\n    border-bottom-right-radius: var(--va-select-dropdown-border-radius);\n    border-bottom-left-radius: var(--va-select-dropdown-border-radius);\n    border-top-right-radius: 0;\n    border-top-left-radius: 0;\n    box-shadow: var(--va-select-box-shadow);\n    padding: 0;\n  }\n\n  &__options-wrapper {\n    background: var(--va-select-dropdown-background);\n    overflow-y: auto;\n\n    @include va-scroll();\n  }\n}\n</style>\n","<template>\n  <va-dropdown\n    ref=\"dropdown\"\n    class=\"va-select__dropdown va-select-dropdown\"\n    trigger=\"none\"\n    anchorSelector=\".va-input-wrapper__field\"\n    :placement=\"$props.placement\"\n    :disabled=\"$props.disabled\"\n    :max-height=\"$props.maxHeight\"\n    :fixed=\"$props.fixed\"\n    :close-on-content-click=\"closeOnContentClick\"\n    :stateful=\"false\"\n    :offset=\"[1, 0]\"\n    keep-anchor-width\n    v-model=\"showDropdownContentComputed\"\n    @keydown.up.stop.prevent=\"showDropdown\"\n    @keydown.down.stop.prevent=\"showDropdown\"\n    @keydown.space.stop.prevent=\"showDropdown\"\n    @keydown.enter.stop.prevent=\"showDropdown\"\n    @click.prevent=\"onSelectClick\"\n  >\n    <template #anchor>\n      <va-input-wrapper\n        ref=\"input\"\n        class=\"va-select\"\n        aria-label=\"selected option\"\n        :model-value=\"valueComputedString\"\n        :success=\"$props.success\"\n        :error=\"computedError\"\n        :color=\"$props.color\"\n        :label=\"$props.label\"\n        :loading=\"$props.loading\"\n        :disabled=\"$props.disabled\"\n        :outline=\"$props.outline\"\n        :bordered=\"$props.bordered\"\n        :required-mark=\"$props.requiredMark\"\n        :messages=\"$props.messages\"\n        :error-messages=\"computedErrorMessages\"\n        :focused=\"isFocused\"\n        :tabindex=\"tabIndexComputed\"\n        @focus=\"onInputFocus\"\n        @blur=\"onInputBlur\"\n      >\n        <template\n          v-if=\"$slots.prepend\"\n          #prepend\n        >\n          <slot name=\"prepend\" />\n        </template>\n\n        <template\n          v-if=\"$slots.append\"\n          #append\n        >\n          <slot name=\"append\" />\n        </template>\n\n        <template\n          v-if=\"$slots.prependInner\"\n          #prependInner\n        >\n          <slot name=\"prependInner\" />\n        </template>\n\n        <template #icon>\n          <va-icon\n            v-if=\"showClearIcon\"\n            role=\"button\"\n            aria-hidden=\"false\"\n            aria-label=\"reset\"\n            tabindex=\"0\"\n            v-bind=\"clearIconProps\"\n            @click.stop=\"reset\"\n            @keydown.enter.stop=\"reset\"\n            @keydown.space.stop=\"reset\"\n          />\n        </template>\n\n        <template #appendInner>\n          <slot\n            v-if=\"$slots.appendInner\"\n            name=\"appendInner\"\n          />\n          <va-icon\n            :color=\"toggleIconColor\"\n            :name=\"toggleIcon\"\n          />\n        </template>\n\n        <template\n          #default\n        >\n          <span\n            v-if=\"isPlaceholder\"\n            class=\"va-select__placeholder\"\n          >\n            {{ $props.placeholder }}\n          </span>\n          <slot\n            v-else\n            name=\"content\"\n            v-bind=\"{\n              valueString: valueComputedString,\n              value: valueComputed,\n              tabindex: tabIndexComputed,\n            }\"\n          >\n            {{ valueComputedString }}\n          </slot>\n        </template>\n      </va-input-wrapper>\n    </template>\n\n    <!-- Stop propagation for enter keyup event, to prevent VaDropdown closing -->\n    <va-dropdown-content\n      class=\"va-select-dropdown__content\"\n      :style=\"{ width: $props.width }\"\n      @keyup.enter.stop=\"() => undefined\"\n      @keydown.tab.stop.prevent=\"() => undefined\"\n      @keydown.esc.prevent=\"hideAndFocus\"\n    >\n      <va-input\n        v-if=\"showSearchInput\"\n        ref=\"searchBar\"\n        class=\"va-select__input\"\n        placeholder=\"Search\"\n        aria-label=\"options filter\"\n        :tabindex=\"tabIndexComputed\"\n        :bordered=\"true\"\n        v-model=\"searchInput\"\n        @keydown.up.stop.prevent=\"hoverPreviousOption\"\n        @keydown.left.stop.prevent=\"hoverPreviousOption\"\n        @keydown.down.stop.prevent=\"hoverNextOption\"\n        @keydown.right.stop.prevent=\"hoverNextOption\"\n        @keydown.enter.prevent=\"selectOrAddOption\"\n        @focus=\"hoveredOption = null\"\n      />\n      <div class=\"va-select-dropdown__options-wrapper\">\n        <va-select-option-list\n          ref=\"optionList\"\n          v-model:hoveredOption=\"hoveredOption\"\n          :style=\"{ maxHeight: $props.maxHeight }\"\n          :options=\"filteredOptions\"\n          :selected-value=\"valueComputed\"\n          :get-selected-state=\"checkIsOptionSelected\"\n          :get-text=\"getText\"\n          :get-track-by=\"getTrackBy\"\n          :get-group-by=\"getGroupBy\"\n          :search=\"searchInput\"\n          :no-options-text=\"$props.noOptionsText\"\n          :color=\"$props.color\"\n          :tabindex=\"tabIndexComputed\"\n          @select-option=\"selectOption\"\n          @no-previous-option-to-hover=\"focusSearchBar\"\n          @keydown.enter.stop.prevent=\"selectHoveredOption\"\n          @keydown.space.stop.prevent=\"selectHoveredOption\"\n          @keydown.tab.stop.prevent=\"searchBar && searchBar.focus()\"\n          @keydown=\"onHintedSearch\"\n          @scroll-bottom=\"onScrollBottom\"\n        />\n      </div>\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, ref, computed, watch, nextTick, Ref, shallowRef } from 'vue'\n\nimport { warn } from '../../services/utils'\nimport {\n  useSelectableList, useSelectableListProps,\n  useValidation, useValidationProps, useValidationEmits, ValidationProps,\n  useFormProps,\n  useLoadingProps,\n  useColors,\n  useMaxSelections, useMaxSelectionsProps,\n  useClearableProps, useClearable, useClearableEmits,\n  useFocusDeep,\n} from '../../composables'\n\nimport { VaDropdown, VaDropdownContent } from '../va-dropdown'\nimport { VaIcon } from '../va-icon'\nimport { VaInput, VaInputWrapper } from '../va-input'\nimport { VaSelectOptionList } from './VaSelectOptionList'\n\nimport { SelectDropdownIcon, SelectOption, Placement } from './types'\n\nexport default defineComponent({\n  name: 'VaSelect',\n\n  components: {\n    VaSelectOptionList,\n    VaIcon,\n    VaDropdown,\n    VaDropdownContent,\n    VaInput,\n    VaInputWrapper,\n  },\n\n  emits: [\n    'update:modelValue',\n    'update-search',\n    'create-new',\n    'scroll-bottom',\n    ...useValidationEmits,\n    ...useClearableEmits,\n  ],\n\n  props: {\n    ...useSelectableListProps,\n    ...useValidationProps as ValidationProps<SelectOption>,\n    ...useLoadingProps,\n    ...useMaxSelectionsProps,\n    ...useClearableProps,\n    ...useFormProps,\n\n    modelValue: {\n      type: [String, Number, Array, Object] as PropType<SelectOption | SelectOption[]>,\n      default: '',\n    },\n\n    // Dropdown placement\n    placement: {\n      type: String as PropType<Placement>,\n      default: 'bottom',\n      validator: (placement: string) => ['top', 'bottom'].includes(placement),\n    },\n\n    allowCreate: {\n      type: [Boolean, String] as PropType<boolean | 'unique'>,\n      default: false,\n      validator: (mode: string | boolean) => [true, false, 'unique'].includes(mode),\n    },\n\n    color: { type: String, default: 'primary' },\n    multiple: { type: Boolean, default: false },\n    searchable: { type: Boolean, default: false },\n    separator: { type: String, default: ', ' },\n    width: { type: String, default: '100%' },\n    maxHeight: { type: String, default: '256px' },\n    noOptionsText: { type: String, default: 'Items not found' },\n    fixed: { type: Boolean, default: true },\n    hideSelected: { type: Boolean, default: false },\n    tabindex: { type: Number, default: 0 },\n    dropdownIcon: {\n      type: [String, Object] as PropType<string | SelectDropdownIcon>,\n      default: (): SelectDropdownIcon => ({\n        open: 'expand_more',\n        close: 'expand_less',\n      }),\n      validator: (value: string | SelectDropdownIcon) => {\n        if (typeof value === 'string') { return true }\n        const isOpenIconString = typeof value.open === 'string'\n        const isCloseIconString = typeof value.close === 'string'\n        return isOpenIconString && isCloseIconString\n      },\n    },\n\n    // Input style\n    outline: { type: Boolean, default: false },\n    bordered: { type: Boolean, default: false },\n    label: { type: String, default: '' },\n    placeholder: { type: String, default: '' },\n    requiredMark: { type: Boolean, default: false },\n  },\n\n  setup (props, { emit }) {\n    const optionList = shallowRef<typeof VaSelectOptionList>()\n    const input = shallowRef<typeof VaInput>()\n    const searchBar = shallowRef<typeof VaInput>()\n\n    const isInputFocused = useFocusDeep()\n    const isFocused = computed(() => isInputFocused.value || showDropdownContent.value)\n\n    const { getHoverColor, getColor } = useColors()\n    const { getOptionByValue, getValue, getText, getTrackBy, getGroupBy } = useSelectableList(props)\n\n    const {\n      validate,\n      computedError,\n      computedErrorMessages,\n    } = useValidation(props, emit, () => reset(), () => focus())\n\n    const colorComputed = computed(() => getColor(props.color))\n    const toggleIconColor = computed(() => props.readonly ? getHoverColor(colorComputed.value) : colorComputed.value)\n\n    const onScrollBottom = () => {\n      emit('scroll-bottom')\n    }\n\n    const searchInput = ref('')\n    const showSearchInput = computed(() => props.searchable || props.allowCreate)\n\n    watch(searchInput, (value) => {\n      emit('update-search', value)\n      hoveredOption.value = null\n    })\n\n    // Select value\n\n    const valueComputed = computed<SelectOption | SelectOption[]>({\n      get () {\n        const value = getOptionByValue(props.modelValue)\n\n        if (props.multiple) {\n          if (!value) {\n            return []\n          }\n\n          if (!Array.isArray(value)) {\n            return [value]\n          }\n\n          return value\n        }\n\n        if (Array.isArray(value)) {\n          warn('Model value should be a string or a number for a single Select.')\n\n          if (value.length) {\n            return value[value.length - 1]\n          }\n        }\n\n        return value\n      },\n\n      set (value: SelectOption | SelectOption[]) {\n        if (Array.isArray(value)) {\n          emit('update:modelValue', value.map(getValue))\n        } else {\n          emit('update:modelValue', getValue(value))\n        }\n      },\n    })\n\n    const valueComputedString = computed<string>(() => {\n      if (!valueComputed.value) { return props.clearValue }\n      if (typeof valueComputed.value === 'string' || typeof valueComputed.value === 'number') { return valueComputed.value }\n      if (Array.isArray(valueComputed.value)) {\n        return valueComputed.value.map((value) => getText(value)).join(props.separator) || props.clearValue\n      }\n\n      return getText(valueComputed.value)\n    })\n\n    const isPlaceholder = computed(() => props.placeholder && !valueComputedString.value)\n\n    // Icons\n\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueComputed)\n\n    const showClearIcon = computed(() => {\n      return props.multiple && Array.isArray(valueComputed.value) ? !!valueComputed.value.length : canBeCleared.value\n    })\n\n    const toggleIcon = computed(() => {\n      if (!props.dropdownIcon) { return '' }\n\n      if (typeof props.dropdownIcon === 'string') {\n        return props.dropdownIcon\n      }\n\n      return showDropdownContent.value ? props.dropdownIcon.close : props.dropdownIcon.open\n    })\n\n    // Options\n\n    const filteredOptions = computed(() => {\n      if (!props.options) { return [] }\n\n      if (props.hideSelected) {\n        return props.options.filter((option) => !checkIsOptionSelected(option))\n      }\n\n      return props.options\n    })\n\n    const checkIsOptionSelected = (option: SelectOption) => {\n      if (!valueComputed.value) { return false }\n\n      if (Array.isArray(valueComputed.value)) {\n        return !!valueComputed.value.find((valueItem) => compareOptions(valueItem, option))\n      }\n\n      return compareOptions(valueComputed.value, option)\n    }\n\n    const compareOptions = (option1: SelectOption, option2: SelectOption) => {\n      const one = getValue(option1)\n      const two = getValue(option2)\n\n      // identity check works nice for strings and exact matches.\n      if (one === two) {\n        return true\n      }\n      if (typeof one === 'string' && typeof two === 'string') {\n        return one === two\n      }\n      if (one === null || two === null) {\n        return false\n      }\n      if (typeof one === 'object' && typeof two === 'object') {\n        return getTrackBy(one) === getTrackBy(two)\n      }\n\n      return false\n    }\n\n    const isValueComputedArray = (v: Ref<SelectOption | SelectOption[]>): v is Ref<SelectOption[]> => Array.isArray(v.value)\n\n    const selectOption = (option: SelectOption) => {\n      if (hoveredOption.value === null) {\n        hideAndFocus()\n        return\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = ''\n      }\n\n      if (props.multiple && isValueComputedArray(valueComputed)) {\n        const { exceedsMaxSelections, addOption } = useMaxSelections(valueComputed, ref(props.maxSelections), emit)\n\n        const isSelected = checkIsOptionSelected(getValue(option))\n\n        if (isSelected) {\n          // Unselect\n          valueComputed.value = valueComputed.value.filter((optionSelected) => !compareOptions(getValue(option), getValue(optionSelected)))\n        } else {\n          if (exceedsMaxSelections()) { return }\n          addOption(getValue(option))\n        }\n      } else {\n        valueComputed.value = typeof option === 'string' || typeof option === 'number' ? option : { ...option }\n        hideAndFocus()\n      }\n    }\n\n    const addNewOption = () => {\n      // Do not emit if option already exist and allow create is `unique`\n      const hasAddedOption = props.options?.some((option: SelectOption) => getText(option) === searchInput.value)\n\n      if (!(props.allowCreate === 'unique' && hasAddedOption)) {\n        emit('create-new', searchInput.value)\n        searchInput.value = ''\n      }\n    }\n\n    // Hovered options\n\n    const hoveredOption = ref<SelectOption | null>(null)\n\n    const selectHoveredOption = () => {\n      if (!hoveredOption.value) { return }\n\n      if (!showDropdownContent.value) {\n        // We can not select options if they are hidden\n        showDropdown()\n        return\n      }\n\n      selectOption(hoveredOption.value)\n    }\n\n    const selectOrAddOption = () => {\n      const allowedToCreate = !!props.allowCreate && searchInput.value !== ''\n\n      if (hoveredOption.value !== null) {\n        selectHoveredOption()\n      } else if (allowedToCreate) {\n        addNewOption()\n      }\n    }\n\n    const hoverPreviousOption = () => {\n      optionList.value?.hoverPreviousOption()\n    }\n\n    const hoverNextOption = () => {\n      optionList.value?.hoverNextOption()\n    }\n\n    // Dropdown content\n\n    const showDropdownContent = ref(false)\n\n    const showDropdownContentComputed = computed({\n      get: () => showDropdownContent.value,\n      set: (show: boolean) => {\n        show ? showDropdown() : hideDropdown()\n      },\n    })\n\n    const closeOnContentClick = computed(() => {\n      return !(props.multiple || props.searchable || props.allowCreate)\n    })\n\n    const showDropdown = () => {\n      if (props.disabled || props.readonly) { return }\n\n      showDropdownContent.value = true\n      scrollToSelected()\n      focusSearchOrOptions()\n    }\n\n    const hideDropdown = () => {\n      showDropdownContent.value = false\n      searchInput.value = ''\n      validate()\n    }\n\n    const toggleDropdown = () => {\n      if (showDropdownContent.value) {\n        hideAndFocus()\n      } else {\n        showDropdown()\n      }\n    }\n\n    const onSelectClick = () => {\n      if (props.disabled || props.readonly) { return }\n      toggleDropdown()\n    }\n\n    const hideAndFocus = () => {\n      hideDropdown()\n      isInputFocused.value = true\n    }\n\n    const focusSearchBar = () => {\n      searchBar.value?.focus()\n    }\n\n    const focusOptionList = () => {\n      optionList.value?.focus()\n      !props.modelValue && optionList.value?.hoverFirstOption()\n    }\n\n    const focusSearchOrOptions = () => nextTick(() => {\n      if (showSearchInput.value) {\n        focusSearchBar()\n      } else {\n        focusOptionList()\n      }\n    })\n\n    const onInputFocus = () => {\n      isInputFocused.value = true\n      onFocus()\n    }\n\n    const onInputBlur = () => {\n      if (showDropdownContentComputed.value) { return }\n\n      onBlur()\n\n      isInputFocused.value\n        ? isInputFocused.value = false\n        : validate()\n    }\n\n    /** @public */\n    const focus = () => {\n      if (props.disabled) { return }\n      input.value?.focus()\n    }\n\n    /** @public */\n    const blur = () => {\n      if (showDropdownContentComputed.value) {\n        showDropdownContentComputed.value = false\n      }\n\n      nextTick(input.value?.blur)\n    }\n\n    /** @public */\n    const reset = () => {\n      if (props.multiple) {\n        valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : []\n      } else {\n        valueComputed.value = props.clearValue\n      }\n\n      searchInput.value = ''\n      emit('clear')\n    }\n\n    const tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex)\n\n    const scrollToSelected = () => {\n      const selected = valueComputed.value\n      const nothingSelected = typeof selected !== 'object' && Array.isArray(selected) && !selected.length\n\n      if (nothingSelected) { return }\n\n      const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected\n      hoveredOption.value = scrollTo\n      nextTick(() => optionList.value?.scrollToOption(scrollTo))\n    }\n\n    // Hinted search\n\n    let hintedSearchQuery = ''\n    let hintedSearchQueryTimeoutIndex!: ReturnType<typeof setTimeout>\n    const navigationKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', ' ']\n\n    // Hinted search - hover option if you typing it's value on select without search-bar\n    const onHintedSearch = (event: KeyboardEvent) => {\n      if (navigationKeys.some(key => key === event.key)) {\n        return\n      }\n\n      const isLetter: boolean = event.key.length === 1\n      const isDeleteKey: boolean = event.key === 'Backspace' || event.key === 'Delete'\n\n      clearTimeout(hintedSearchQueryTimeoutIndex)\n\n      if (isDeleteKey) {\n        // Remove last letter from query\n        hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : ''\n      } else if (isLetter) {\n        // Add every new letter to the query\n        hintedSearchQuery += event.key\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = hintedSearchQuery\n        return\n      }\n\n      // Search for an option that matches the query\n      if (hintedSearchQuery) {\n        const appropriateOption = props.options.find(option => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()))\n        if (appropriateOption) {\n          hoveredOption.value = appropriateOption\n        }\n      }\n\n      hintedSearchQueryTimeoutIndex = setTimeout(() => { hintedSearchQuery = '' }, 1000)\n    }\n\n    return {\n      isFocused,\n\n      input,\n      optionList,\n      searchBar,\n\n      reset,\n      focus,\n      blur,\n\n      onInputFocus,\n      onInputBlur,\n      focusOptionList,\n      onSelectClick,\n      focusSearchBar,\n      searchInput,\n      showSearchInput,\n      hoveredOption,\n      tabIndexComputed,\n      valueComputed,\n      valueComputedString,\n      showClearIcon,\n      toggleIcon,\n      computedErrorMessages,\n      computedError,\n      filteredOptions,\n      checkIsOptionSelected,\n      closeOnContentClick,\n      selectOption,\n      selectOrAddOption,\n      selectHoveredOption,\n      hoverPreviousOption,\n      hoverNextOption,\n      showDropdownContentComputed,\n      showDropdown,\n      hideDropdown,\n      hideAndFocus,\n      toggleDropdown,\n      toggleIconColor,\n      onHintedSearch,\n      getText,\n      getTrackBy,\n      getGroupBy,\n      onScrollBottom,\n      clearIconProps,\n      isPlaceholder,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-select {\n  cursor: var(--va-select-cursor);\n\n  &__placeholder {\n    color: var(--va-input-placeholder-text-color);\n  }\n}\n\n.va-select-dropdown {\n  .va-dropdown__anchor {\n    display: block;\n  }\n\n  &__content {\n    overflow: hidden;\n    border-bottom-right-radius: var(--va-select-dropdown-border-radius);\n    border-bottom-left-radius: var(--va-select-dropdown-border-radius);\n    border-top-right-radius: 0;\n    border-top-left-radius: 0;\n    box-shadow: var(--va-select-box-shadow);\n    padding: 0;\n  }\n\n  &__options-wrapper {\n    background: var(--va-select-dropdown-background);\n    overflow-y: auto;\n\n    @include va-scroll();\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport _VaSelect from './VaSelect.vue'\n\nexport { VaSelectOptionList } from './VaSelectOptionList'\n\nexport const VaSelect = withConfigTransport(_VaSelect)\n\nexport * from './types'\n"],"names":["useMaxSelectionsProps","maxSelections","type","Number","String","default","undefined","script$1","defineComponent","name","components","VaIcon","emits","props","useColorProps","options","Array","noOptionsText","getSelectedState","Function","required","getText","getTrackBy","getGroupBy","multiple","Boolean","search","tabindex","hoveredOption","Object","setup","emit","getColor","getHoverColor","useColors","rootElement","shallowRef","itemRefs","ref","hoveredOptionComputed","computed","get","set","value","filteredOptions","filter","option","optionText","toString","toUpperCase","includes","optionGroups","reduce","groups","group","groupBy","push","_noGroup","isHovered","updateHoveredOption","hoveredOptionIndex","findIndex","scrollToOption","element","scrollTarget","parentElement","verticalAlignment","smooth","top","viewHeight","offsetHeight","currentPosition","scrollTop","offsetTop","getTopCoordinate","center","getCenterCoordinate","bottom","getBottomCoordinate","getScrollTop","scroll","behavior","scrollToElement","watch","newOption","publicMethods","hoverPreviousOption","length","at","hoverNextOption","hoverFirstOption","focus","_a","preventScroll","onScroll","event","target","clientHeight","scrollHeight","beforeUpdate","setItemRef","el","selectOption","getOptionIcon","icon","getOptionClass","getOptionStyle","color","backgroundColor","class","_ctx","groupName","_ssrRenderList","_ssrRenderAttr","$props","_ssrRenderClass","_ssrRenderStyle","size","_push","_ssrInterpolate","display","VaSelectOptionList","withConfigTransport","_VaSelectOptionList","script","VaDropdown","VaDropdownContent","VaInput","VaInputWrapper","useValidationEmits","useClearableEmits","useSelectableListProps","useValidationProps","useLoadingProps","useClearableProps","useFormProps","modelValue","placement","validator","allowCreate","mode","searchable","separator","width","maxHeight","fixed","hideSelected","dropdownIcon","open","close","isOpenIconString","isCloseIconString","outline","bordered","label","placeholder","requiredMark","optionList","input","searchBar","isInputFocused","useFocusDeep","isFocused","showDropdownContent","getOptionByValue","getValue","useSelectableList","validate","computedError","computedErrorMessages","useValidation","reset","colorComputed","toggleIconColor","readonly","searchInput","showSearchInput","valueComputed","isArray","warn","map","valueComputedString","join","clearValue","isPlaceholder","canBeCleared","clearIconProps","onFocus","onBlur","useClearable","showClearIcon","toggleIcon","checkIsOptionSelected","find","valueItem","compareOptions","option1","option2","one","two","v","exceedsMaxSelections","addOption","useMaxSelections","selections","isNaN","optionToAdd","newSelectedOptions","optionSelected","hideAndFocus","selectHoveredOption","showDropdown","showDropdownContentComputed","show","hideDropdown","closeOnContentClick","disabled","scrollToSelected","focusSearchOrOptions","toggleDropdown","focusSearchBar","focusOptionList","_b","nextTick","tabIndexComputed","selected","scrollTo","hintedSearchQueryTimeoutIndex","hintedSearchQuery","navigationKeys","blur","onInputFocus","onInputBlur","onSelectClick","selectOrAddOption","allowedToCreate","hasAddedOption","some","addNewOption","onHintedSearch","key","isLetter","isDeleteKey","clearTimeout","slice","appropriateOption","toLowerCase","startsWith","setTimeout","onScrollBottom","trigger","anchorSelector","stateful","offset","$event","anchor","_","_parent","_scopeId","_createVNode","_component_va_input_wrapper","success","error","loading","messages","focused","_openBlock","_createBlock","_component_va_icon","_mergeProps","role","onClick","onKeydown","appendInner","$slots","_renderSlot","_toDisplayString","_component_va_dropdown_content","style","onKeyup","_component_va_input","_component_va_select_option_list","onSelectOption","onNoPreviousOptionToHover","VaSelect","_VaSelect"],"mappings":"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"}
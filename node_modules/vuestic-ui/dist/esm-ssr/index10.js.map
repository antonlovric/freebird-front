{"version":3,"file":"index10.js","sources":["../../src/components/va-button-group/VaButtonGroup.vue","../../src/components/va-button-group/VaButtonGroup.vue?vue&type=template&id=f503100e&lang.js","../../src/components/va-button-group/index.ts"],"sourcesContent":["<template>\n  <div class=\"va-button-group\" :style=\"computedStyle\" :class=\"computedClass\">\n    <va-config :components=\"buttonConfig\">\n      <slot />\n    </va-config>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, PropType } from 'vue'\n\nimport { useColors, useTextColor } from '../../composables'\n\nimport { VaConfig } from '../va-config'\n\nexport default defineComponent({\n  name: 'VaButtonGroup',\n  components: { VaConfig },\n  props: {\n    color: { type: String, default: 'primary' },\n    gradient: { type: Boolean, default: undefined },\n    textColor: { type: String, default: undefined },\n    rounded: { type: Boolean, default: true },\n    outline: { type: Boolean, default: false },\n    flat: { type: Boolean, default: false },\n    size: {\n      type: String as PropType<'medium' | 'small' | 'large'>,\n      default: 'medium',\n      validator: (value: string) => ['medium', 'small', 'large'].includes(value),\n    },\n  },\n  setup (props) {\n    const { getColor, getGradientBackground } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n\n    const isTransparentBackground = computed(() => Boolean(props.outline || props.flat))\n    const { textColorComputed } = useTextColor(colorComputed, isTransparentBackground)\n\n    const computedBackground = computed(() => {\n      if (props.outline || props.flat) { return '' }\n\n      return props.gradient ? getGradientBackground(colorComputed.value) : colorComputed.value\n    })\n\n    const computedStyle = computed(() => {\n      const backgroundProperty = props.gradient ? 'background-image' : 'background'\n\n      return {\n        [backgroundProperty]: computedBackground.value,\n        color: textColorComputed.value,\n      }\n    })\n\n    const buttonConfig = computed(() => ({\n      VaButton: {\n        ...props,\n        color: props.gradient ? '#00000000' : props.color,\n        textColor: textColorComputed.value,\n      },\n    }))\n\n    const computedClass = computed(() => ({ 'va-button-group_square': !props.rounded }))\n\n    return {\n      buttonConfig,\n      computedStyle,\n      computedClass,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-button-group {\n  display: flex;\n  justify-content: stretch;\n  width: max-content;\n  overflow: hidden;\n  border-radius: 9999999px;\n  font-family: var(--va-font-family);\n\n  &_square {\n    border-radius: var(--va-button-square-border-radius);\n  }\n\n  .va-button {\n    margin: var(--va-button-group-button-margin);\n    box-shadow: none;\n  }\n\n  & > .va-button:last-child {\n    width: auto;\n    padding-right: 1rem;\n\n    &.va-button--small {\n      padding-right: 0.75rem;\n    }\n\n    &.va-button--large {\n      padding-right: 1.5rem;\n    }\n  }\n\n  & > .va-button:first-child {\n    width: auto;\n    padding-left: 1rem;\n\n    &.va-button--small {\n      padding-left: 0.75rem;\n    }\n\n    &.va-button--large {\n      padding-left: 1.5rem;\n    }\n  }\n\n  & > .va-button:not(:last-child) {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n    padding-right: var(--va-button-group-gap);\n    border-right: 0;\n\n    .va-button__content {\n      /**\n        We need to prevent minus margin because we had:\n          border-right: 2px;\n          maring-right: -2px;\n      */\n      margin-right: 0;\n    }\n  }\n\n  & > .va-button + .va-button {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n    padding-left: var(--va-button-group-gap);\n    border-left: 0;\n\n    .va-button__content {\n      /**\n        We need to prevent minus margin because we had:\n          border-left: 2px;\n          maring-left: -2px;\n      */\n      margin-left: 0;\n    }\n  }\n}\n</style>\n","<template>\n  <div class=\"va-button-group\" :style=\"computedStyle\" :class=\"computedClass\">\n    <va-config :components=\"buttonConfig\">\n      <slot />\n    </va-config>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, PropType } from 'vue'\n\nimport { useColors, useTextColor } from '../../composables'\n\nimport { VaConfig } from '../va-config'\n\nexport default defineComponent({\n  name: 'VaButtonGroup',\n  components: { VaConfig },\n  props: {\n    color: { type: String, default: 'primary' },\n    gradient: { type: Boolean, default: undefined },\n    textColor: { type: String, default: undefined },\n    rounded: { type: Boolean, default: true },\n    outline: { type: Boolean, default: false },\n    flat: { type: Boolean, default: false },\n    size: {\n      type: String as PropType<'medium' | 'small' | 'large'>,\n      default: 'medium',\n      validator: (value: string) => ['medium', 'small', 'large'].includes(value),\n    },\n  },\n  setup (props) {\n    const { getColor, getGradientBackground } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n\n    const isTransparentBackground = computed(() => Boolean(props.outline || props.flat))\n    const { textColorComputed } = useTextColor(colorComputed, isTransparentBackground)\n\n    const computedBackground = computed(() => {\n      if (props.outline || props.flat) { return '' }\n\n      return props.gradient ? getGradientBackground(colorComputed.value) : colorComputed.value\n    })\n\n    const computedStyle = computed(() => {\n      const backgroundProperty = props.gradient ? 'background-image' : 'background'\n\n      return {\n        [backgroundProperty]: computedBackground.value,\n        color: textColorComputed.value,\n      }\n    })\n\n    const buttonConfig = computed(() => ({\n      VaButton: {\n        ...props,\n        color: props.gradient ? '#00000000' : props.color,\n        textColor: textColorComputed.value,\n      },\n    }))\n\n    const computedClass = computed(() => ({ 'va-button-group_square': !props.rounded }))\n\n    return {\n      buttonConfig,\n      computedStyle,\n      computedClass,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-button-group {\n  display: flex;\n  justify-content: stretch;\n  width: max-content;\n  overflow: hidden;\n  border-radius: 9999999px;\n  font-family: var(--va-font-family);\n\n  &_square {\n    border-radius: var(--va-button-square-border-radius);\n  }\n\n  .va-button {\n    margin: var(--va-button-group-button-margin);\n    box-shadow: none;\n  }\n\n  & > .va-button:last-child {\n    width: auto;\n    padding-right: 1rem;\n\n    &.va-button--small {\n      padding-right: 0.75rem;\n    }\n\n    &.va-button--large {\n      padding-right: 1.5rem;\n    }\n  }\n\n  & > .va-button:first-child {\n    width: auto;\n    padding-left: 1rem;\n\n    &.va-button--small {\n      padding-left: 0.75rem;\n    }\n\n    &.va-button--large {\n      padding-left: 1.5rem;\n    }\n  }\n\n  & > .va-button:not(:last-child) {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n    padding-right: var(--va-button-group-gap);\n    border-right: 0;\n\n    .va-button__content {\n      /**\n        We need to prevent minus margin because we had:\n          border-right: 2px;\n          maring-right: -2px;\n      */\n      margin-right: 0;\n    }\n  }\n\n  & > .va-button + .va-button {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n    padding-left: var(--va-button-group-gap);\n    border-left: 0;\n\n    .va-button__content {\n      /**\n        We need to prevent minus margin because we had:\n          border-left: 2px;\n          maring-left: -2px;\n      */\n      margin-left: 0;\n    }\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport _VaButtonGroup from './VaButtonGroup.vue'\n\nexport const VaButtonGroup = withConfigTransport(_VaButtonGroup)\n"],"names":["script","defineComponent","name","components","VaConfig","props","color","type","String","default","gradient","Boolean","undefined","textColor","rounded","outline","flat","size","validator","value","includes","setup","getColor","getGradientBackground","useColors","colorComputed","computed","isTransparentBackground","textColorComputed","useTextColor","computedBackground","computedStyle","buttonConfig","VaButton","computedClass","class","_ctx","style","_push","_ssrRenderComponent","_component_va_config","_","_parent","_scopeId","_renderSlot","$slots","VaButtonGroup","withConfigTransport","_VaButtonGroup"],"mappings":"iiBAeA,IAAAA,EAAeC,EAAgB,CAC7BC,KAAM,gBACNC,WAAY,CAAEC,SAAAA,GACdC,MAAO,CACLC,MAAO,CAAEC,KAAMC,OAAQC,QAAS,WAChCC,SAAU,CAAEH,KAAMI,QAASF,aAASG,GACpCC,UAAW,CAAEN,KAAMC,OAAQC,aAASG,GACpCE,QAAS,CAAEP,KAAMI,QAASF,SAAS,GACnCM,QAAS,CAAER,KAAMI,QAASF,SAAS,GACnCO,KAAM,CAAET,KAAMI,QAASF,SAAS,GAChCQ,KAAM,CACJV,KAAMC,OACNC,QAAS,SACTS,UAAYC,GAAkB,CAAC,SAAU,QAAS,SAASC,SAASD,KAGxEE,MAAOhB,GACL,MAAMiB,SAAEA,EAAQC,sBAAEA,GAA0BC,IACtCC,EAAgBC,GAAS,IAAMJ,EAASjB,EAAMC,SAE9CqB,EAA0BD,GAAS,IAAMf,QAAQN,EAAMU,SAAWV,EAAMW,SACxEY,kBAAEA,GAAsBC,EAAaJ,EAAeE,GAEpDG,EAAqBJ,GAAS,IAC9BrB,EAAMU,SAAWV,EAAMW,KAAe,GAEnCX,EAAMK,SAAWa,EAAsBE,EAAcN,OAASM,EAAcN,QAG/EY,EAAgBL,GAAS,KAGtB,CACL,CAHyBrB,EAAMK,SAAW,mBAAqB,cAGzCoB,EAAmBX,MACzCb,MAAOsB,EAAkBT,UAc7B,MAAO,CACLa,aAXmBN,GAAS,KAAO,CACnCO,SAAU,IACL5B,EACHC,MAAOD,EAAMK,SAAW,YAAcL,EAAMC,MAC5CO,UAAWe,EAAkBT,WAQ/BY,cAAAA,EACAG,cALoBR,GAAS,MAAS,0BAA2BrB,EAAMS,qGC5DtEqB,MAAK,CAAC,kBAAiDC,EAAaF,eAA3CG,MAAOD,EAAaL,uBACpCO,EAAAC,EAAAC,EAAA,CAAArC,WAAYiC,EAAYJ,cAAA,YAApC,CAEWS,EAAAH,EAAAI,EAAAC,kBADTC,EAAOR,EAAAS,OAAA,2ICAAC,EAAgBC,EAAoBC"}
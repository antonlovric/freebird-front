import type { VuesticComponentsMap } from '../../vuestic-plugin/global-components';
import type { DefineComponent, VNodeProps, AllowedComponentProps } from 'vue';
declare type VuesticComponentName = keyof VuesticComponentsMap;
declare type VueDefaultPropNames = keyof (VNodeProps & AllowedComponentProps) | `on${string}`;
export declare type PropTypes<C> = C extends {
    new (): {
        $props: infer Props;
    };
} ? Omit<Props, VueDefaultPropNames> : never;
export declare type ComponentConfig = {
    [componentName in VuesticComponentName]?: {
        [key in keyof PropTypes<VuesticComponentsMap[componentName]>]: PropTypes<VuesticComponentsMap[componentName]>[key];
    };
};
export declare const useComponentConfigProps: <T extends DefineComponent<{}, {}, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>>(component: T) => import("vue").ComputedRef<{
    VaAccordion?: {
        inset?: boolean | undefined;
        multiply?: boolean | undefined;
        modelValue?: boolean[] | undefined;
        popout?: boolean | undefined;
        stateful?: boolean | undefined;
    } | undefined;
    VaAffix?: {
        target?: HTMLElement | Window | (() => HTMLElement | Window) | undefined;
        offsetTop?: number | undefined;
        offsetBottom?: number | undefined;
    } | undefined;
    VaAlert?: {
        description?: string | undefined;
        center?: boolean | undefined;
        border?: "" | "left" | "top" | "bottom" | "right" | undefined;
        borderColor?: string | undefined;
        color?: string | undefined;
        outline?: boolean | undefined;
        title?: string | undefined;
        dense?: boolean | undefined;
        icon?: string | undefined;
        modelValue?: boolean | undefined;
        stateful?: boolean | undefined;
        textColor?: string | undefined;
        closeText?: string | undefined;
        closeable?: boolean | undefined;
    } | undefined;
    VaAppBar?: {
        absolute?: boolean | undefined;
        bottom?: boolean | undefined;
        color?: string | undefined;
        target?: string | HTMLElement | undefined;
        gradient?: boolean | undefined;
        hideOnScroll?: boolean | undefined;
        shadowOnScroll?: boolean | undefined;
        shadowColor?: string | undefined;
    } | undefined;
    VaAvatar?: {
        square?: boolean | undefined;
        color?: string | undefined;
        fontSize?: string | undefined;
        loading?: boolean | undefined;
        size?: string | number | undefined;
        icon?: string | undefined;
        alt?: string | undefined;
        src?: string | undefined;
        sizesConfig?: Record<string, any> | undefined;
        fontSizesConfig?: Record<string, any> | undefined;
        textColor?: string | undefined;
    } | undefined;
    VaBacktop?: {
        color?: string | undefined;
        target?: string | Element | undefined;
        speed?: number | undefined;
        visibilityHeight?: number | undefined;
        verticalOffset?: string | undefined;
        horizontalOffset?: string | undefined;
        horizontalPosition?: "left" | "right" | undefined;
        verticalPosition?: "top" | "bottom" | undefined;
    } | undefined;
    VaBadge?: {
        transparent?: boolean | undefined;
        left?: boolean | undefined;
        bottom?: boolean | undefined;
        color?: string | undefined;
        text?: string | number | undefined;
        dot?: boolean | undefined;
        readonly textColor?: string | undefined;
        overlap?: boolean | undefined;
        multiLine?: boolean | undefined;
        visibleEmpty?: boolean | undefined;
    } | undefined;
    VaBreadcrumbs?: {
        color?: string | undefined;
        vertical?: boolean | undefined;
        separator?: string | undefined;
        align?: string | undefined;
        activeColor?: string | undefined;
        separatorColor?: string | undefined;
    } | undefined;
    VaBreadcrumbsItem?: {
        replace?: boolean | undefined;
        exact?: boolean | undefined;
        label?: string | undefined;
        target?: string | undefined;
        append?: boolean | undefined;
        disabled?: boolean | undefined;
        tag?: string | undefined;
        href?: string | undefined;
        to?: string | Record<string, any> | undefined;
        activeClass?: string | undefined;
        exactActiveClass?: string | undefined;
    } | undefined;
    VaButton?: {
        replace?: boolean | undefined;
        flat?: boolean | undefined;
        type?: string | undefined;
        exact?: boolean | undefined;
        block?: boolean | undefined;
        color?: string | undefined;
        outline?: boolean | undefined;
        round?: boolean | undefined;
        loading?: boolean | undefined;
        target?: string | undefined;
        append?: boolean | undefined;
        disabled?: boolean | undefined;
        size?: "small" | "medium" | "large" | undefined;
        tag?: string | undefined;
        icon?: string | undefined;
        href?: string | undefined;
        to?: string | Record<string, any> | undefined;
        sizesConfig?: Record<string, any> | undefined;
        fontSizesConfig?: Record<string, any> | undefined;
        textColor?: string | undefined;
        gradient?: boolean | undefined;
        rounded?: boolean | undefined;
        spaceBetweenItems?: boolean | undefined;
        iconRight?: string | undefined;
        activeClass?: string | undefined;
        exactActiveClass?: string | undefined;
    } | undefined;
    VaButtonDropdown?: {
        split?: boolean | undefined;
        flat?: boolean | undefined;
        offset?: number | [number, number] | undefined;
        color?: string | undefined;
        outline?: boolean | undefined;
        loading?: boolean | undefined;
        readonly label?: string | undefined;
        disabled?: boolean | undefined;
        size?: "small" | "medium" | "large" | undefined;
        icon?: string | undefined;
        modelValue?: boolean | undefined;
        stateful?: boolean | undefined;
        textColor?: string | undefined;
        gradient?: boolean | undefined;
        rounded?: boolean | undefined;
        keepAnchorWidth?: boolean | undefined;
        closeOnContentClick?: boolean | undefined;
        placement?: import("../../components").Placement | undefined;
        openedIcon?: string | undefined;
        hideIcon?: boolean | undefined;
        leftIcon?: boolean | undefined;
        disableButton?: boolean | undefined;
        disableDropdown?: boolean | undefined;
        splitTo?: string | undefined;
        splitHref?: string | undefined;
    } | undefined;
    VaButtonGroup?: {
        flat?: boolean | undefined;
        color?: string | undefined;
        outline?: boolean | undefined;
        size?: "small" | "medium" | "large" | undefined;
        textColor?: string | undefined;
        gradient?: boolean | undefined;
        rounded?: boolean | undefined;
    } | undefined;
    VaButtonToggle?: {
        flat?: boolean | undefined;
        color?: string | undefined;
        outline?: boolean | undefined;
        disabled?: boolean | undefined;
        readonly options: import("../../components").ButtonOption[];
        size?: "small" | "medium" | "large" | undefined;
        modelValue?: string | number | undefined;
        textColor?: string | undefined;
        gradient?: boolean | undefined;
        rounded?: boolean | undefined;
        readonly activeButtonTextColor?: string | undefined;
        toggleColor?: string | undefined;
    } | undefined;
    VaCard?: {
        replace?: boolean | undefined;
        exact?: boolean | undefined;
        square?: boolean | undefined;
        color?: string | undefined;
        target?: string | undefined;
        append?: boolean | undefined;
        disabled?: boolean | undefined;
        tag?: string | undefined;
        href?: string | undefined;
        to?: string | Record<string, any> | undefined;
        readonly textColor?: string | undefined;
        gradient?: boolean | undefined;
        activeClass?: string | undefined;
        exactActiveClass?: string | undefined;
        outlined?: boolean | undefined;
        bordered?: boolean | undefined;
        stripe?: boolean | undefined;
        stripeColor?: string | undefined;
    } | undefined;
    VaCardActions?: {
        vertical?: boolean | undefined;
        align?: string | undefined;
    } | undefined;
    VaCardContent?: {} | undefined;
    VaCardTitle?: {
        readonly textColor?: string | undefined;
    } | undefined;
    VaCarousel?: {
        height?: string | undefined;
        color?: string | undefined;
        infinite?: boolean | undefined;
        vertical?: boolean | undefined;
        effect?: "transition" | "fade" | undefined;
        modelValue?: number | undefined;
        stateful?: boolean | undefined;
        readonly items: any[];
        autoscroll?: boolean | undefined;
        autoscrollInterval?: number | undefined;
        autoscrollPauseDuration?: number | undefined;
        fadeKeyframe?: string | undefined;
        arrows?: boolean | undefined;
        indicators?: boolean | undefined;
        indicatorTrigger?: "click" | "hover" | undefined;
    } | undefined;
    VaCheckbox?: {
        error?: boolean | undefined;
        id?: string | undefined;
        name?: string | undefined;
        color?: string | undefined;
        loading?: boolean | undefined;
        label?: string | undefined;
        ariaLabel?: string | undefined;
        disabled?: boolean | undefined;
        readonly?: boolean | undefined;
        success?: boolean | undefined;
        modelValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
        stateful?: boolean | undefined;
        indeterminate?: boolean | undefined;
        messages?: string | string[] | undefined;
        errorMessages?: string | string[] | undefined;
        errorCount?: string | number | undefined;
        rules?: ((v: any) => any)[] | undefined;
        immediateValidation?: boolean | undefined;
        checkedIcon?: string | undefined;
        indeterminateValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
        indeterminateIcon?: string | undefined;
        arrayValue?: null | undefined;
        leftLabel?: boolean | undefined;
        trueValue?: boolean | undefined;
        falseValue?: boolean | undefined;
    } | undefined;
    VaChip?: {
        replace?: boolean | undefined;
        flat?: boolean | undefined;
        exact?: boolean | undefined;
        square?: boolean | undefined;
        color?: string | undefined;
        outline?: boolean | undefined;
        target?: string | undefined;
        append?: boolean | undefined;
        disabled?: boolean | undefined;
        size?: "small" | "medium" | "large" | undefined;
        tag?: string | undefined;
        icon?: string | undefined;
        href?: string | undefined;
        to?: string | Record<string, any> | undefined;
        modelValue?: boolean | undefined;
        stateful?: boolean | undefined;
        closeable?: boolean | undefined;
        activeClass?: string | undefined;
        exactActiveClass?: string | undefined;
        shadow?: boolean | undefined;
    } | undefined;
    VaCollapse?: {
        color?: string | undefined;
        header?: string | undefined;
        disabled?: boolean | undefined;
        solid?: boolean | undefined;
        icon?: string | undefined;
        modelValue?: boolean | undefined;
        textColor?: string | undefined;
        colorAll?: boolean | undefined;
    } | undefined;
    VaColorIndicator?: {
        square?: boolean | undefined;
        color?: string | undefined;
        modelValue?: boolean | undefined;
        stateful?: boolean | undefined;
    } | undefined;
    VaColorInput?: {
        disabled?: boolean | undefined;
        modelValue?: string | undefined;
        stateful?: boolean | undefined;
        indicator?: "square" | "dot" | undefined;
    } | undefined;
    VaColorPalette?: {
        modelValue?: string | undefined;
        stateful?: boolean | undefined;
        indicator?: "square" | "dot" | undefined;
        palette?: string[] | undefined;
    } | undefined;
    VaConfig?: {
        components?: Record<string, any> | undefined;
    } | undefined;
    VaContent?: {} | undefined;
    VaCounter?: {
        flat?: boolean | undefined;
        max?: number | undefined;
        buttons?: boolean | undefined;
        width?: string | number | undefined;
        color?: string | undefined;
        outline?: boolean | undefined;
        label?: string | undefined;
        disabled?: boolean | undefined;
        readonly?: boolean | undefined;
        step?: number | undefined;
        min?: number | undefined;
        modelValue?: string | number | undefined;
        stateful?: boolean | undefined;
        textColor?: string | undefined;
        rounded?: boolean | undefined;
        bordered?: boolean | undefined;
        messages?: string | string[] | undefined;
        manualInput?: boolean | undefined;
        increaseIcon?: string | undefined;
        decreaseIcon?: string | undefined;
        margins?: string | number | undefined;
    } | undefined;
    VaDataTable?: {
        filter?: string | undefined;
        readonly height?: string | number | undefined;
        columns?: import("../../components").DataTableColumnSource[] | undefined;
        loading?: boolean | undefined;
        readonly modelValue?: any[] | undefined;
        items?: import("../../components").DataTableItem[] | undefined;
        itemsTrackBy?: string | ((item: import("../../components").DataTableItem) => any) | undefined;
        readonly sortingOrder?: import("../../components").DataTableSortingOrder | undefined;
        readonly sortBy?: string | undefined;
        readonly filterMethod?: import("../../components").DataTableFilterMethod | undefined;
        hoverable?: boolean | undefined;
        clickable?: boolean | undefined;
        animated?: boolean | undefined;
        selectable?: boolean | undefined;
        selectMode?: import("../../components").DataTableSelectMode | undefined;
        selectedColor?: string | undefined;
        readonly perPage?: number | undefined;
        readonly currentPage?: number | undefined;
        loadingColor?: string | undefined;
        noDataHtml?: string | undefined;
        noDataFilteredHtml?: string | undefined;
        hideDefaultHeader?: boolean | undefined;
        footerClone?: boolean | undefined;
        allowFooterSorting?: boolean | undefined;
        striped?: boolean | undefined;
        stickyHeader?: boolean | undefined;
        stickyFooter?: boolean | undefined;
        readonly rowBind?: import("../../components").DataTableRowBind | undefined;
        readonly cellBind?: import("../../components").DataTableCellBind | undefined;
    } | undefined;
    VaDateInput?: {
        type?: import("../../components/va-date-picker/types").DatePickerType | undefined;
        error?: boolean | undefined;
        view?: import("../../components/va-date-picker/types").DatePickerView | undefined;
        color?: string | undefined;
        mask?: string | Record<string, number[]> | undefined;
        outline?: boolean | undefined;
        loading?: boolean | undefined;
        hidden?: boolean | undefined;
        label?: string | undefined;
        pattern?: string | undefined;
        ariaLabel?: string | undefined;
        disabled?: boolean | undefined;
        readonly?: boolean | undefined;
        success?: boolean | undefined;
        mode?: import("../../components/va-date-picker/types").DatePickerMode | undefined;
        icon?: string | undefined;
        placeholder?: string | undefined;
        tabindex?: number | undefined;
        inputmode?: string | undefined;
        selected?: boolean | undefined;
        autosize?: boolean | undefined;
        readonly format?: ((date: import("../../components/va-date-input/types").DateInputModelValue) => string) | undefined;
        readonly modelValue?: import("../../components/va-date-input/types").DateInputModelValue;
        stateful?: boolean | undefined;
        leftIcon?: boolean | undefined;
        bordered?: boolean | undefined;
        messages?: string | string[] | undefined;
        errorMessages?: string | string[] | undefined;
        errorCount?: string | number | undefined;
        rules?: ((v: import("../../components/va-date-input/types").DateInputModelValue) => any)[] | undefined;
        immediateValidation?: boolean | undefined;
        maxLength?: number | undefined;
        focused?: boolean | undefined;
        requiredMark?: boolean | undefined;
        minRows?: number | undefined;
        maxRows?: number | undefined;
        inputClass?: string | undefined;
        counter?: boolean | undefined;
        returnRaw?: boolean | undefined;
        clearable?: boolean | undefined;
        clearableIcon?: string | undefined;
        clearValue?: import("../../components/va-date-input/types").DateInputModelValue;
        manualInput?: boolean | undefined;
        otherMonth?: boolean | undefined;
        today?: boolean | undefined;
        inRange?: boolean | undefined;
        weekend?: boolean | undefined;
        highlightWeekend?: boolean | undefined;
        highlightToday?: boolean | undefined;
        monthNames?: string[] | undefined;
        weekdayNames?: string[] | undefined;
        firstWeekday?: "Monday" | "Sunday" | undefined;
        hideWeekDays?: boolean | undefined;
        showOtherMonths?: boolean | undefined;
        allowedDays?: ((date: Date) => boolean) | undefined;
        weekends?: ((date: Date) => boolean) | undefined;
        allowedMonths?: ((date: Date) => boolean) | undefined;
        allowedYears?: ((date: Date) => boolean) | undefined;
        startYear?: number | undefined;
        endYear?: number | undefined;
        weekendsColor?: string | undefined;
        resetOnClose?: boolean | undefined;
        isOpen?: boolean | undefined;
        formatDate?: ((date: Date) => string) | undefined;
        readonly parse?: ((input: string) => import("../../components/va-date-input/types").DateInputValue) | undefined;
        readonly parseDate?: ((input: string) => Date) | undefined;
        readonly parseValue?: ((date: import("../../components/va-date-input/types").DateInputModelValue) => import("../../components/va-date-picker/types").DatePickerModelValue) | undefined;
        delimiter?: string | undefined;
        rangeDelimiter?: string | undefined;
    } | undefined;
    VaDatePicker?: {
        type?: import("../../components/va-date-picker/types").DatePickerType | undefined;
        readonly view?: import("../../components/va-date-picker/types").DatePickerView | undefined;
        color?: string | undefined;
        hidden?: boolean | undefined;
        disabled?: boolean | undefined;
        readonly?: boolean | undefined;
        mode?: import("../../components/va-date-picker/types").DatePickerMode | undefined;
        selected?: boolean | undefined;
        readonly modelValue?: import("../../components/va-date-picker/types").DatePickerModelValue;
        stateful?: boolean | undefined;
        focused?: boolean | undefined;
        otherMonth?: boolean | undefined;
        today?: boolean | undefined;
        inRange?: boolean | undefined;
        weekend?: boolean | undefined;
        highlightWeekend?: boolean | undefined;
        highlightToday?: boolean | undefined;
        monthNames?: string[] | undefined;
        weekdayNames?: string[] | undefined;
        firstWeekday?: "Monday" | "Sunday" | undefined;
        hideWeekDays?: boolean | undefined;
        showOtherMonths?: boolean | undefined;
        allowedDays?: ((date: Date) => boolean) | undefined;
        weekends?: ((date: Date) => boolean) | undefined;
        allowedMonths?: ((date: Date) => boolean) | undefined;
        allowedYears?: ((date: Date) => boolean) | undefined;
        startYear?: number | undefined;
        endYear?: number | undefined;
        weekendsColor?: string | undefined;
    } | undefined;
    VaDivider?: {
        inset?: boolean | undefined;
        orientation?: "center" | "left" | "right" | undefined;
        dashed?: boolean | undefined;
        vertical?: boolean | undefined;
    } | undefined;
    VaDropdown?: {
        offset?: number | [number, number] | undefined;
        disabled?: boolean | undefined;
        readonly?: boolean | undefined;
        modelValue?: boolean | undefined;
        stateful?: boolean | undefined;
        anchorSelector?: string | undefined;
        attachElement?: string | undefined;
        disableAttachment?: boolean | undefined;
        keepAnchorWidth?: boolean | undefined;
        isContentHoverable?: boolean | undefined;
        closeOnContentClick?: boolean | undefined;
        closeOnClickOutside?: boolean | undefined;
        closeOnAnchorClick?: boolean | undefined;
        hoverOverTimeout?: number | undefined;
        hoverOutTimeout?: number | undefined;
        trigger?: "none" | "click" | "hover" | undefined;
        placement?: import("../../components").Placement | undefined;
    } | undefined;
    VaDropdownContent?: {
        background?: string | undefined;
        readonly textColor?: string | undefined;
        noPadding?: boolean | undefined;
    } | undefined;
    VaFileUpload?: {
        type?: "single" | "list" | "gallery" | undefined;
        color?: string | undefined;
        disabled?: boolean | undefined;
        modelValue?: import("../../components").VaFile | import("../../components").VaFile[] | undefined;
        undo?: boolean | undefined;
        undoDuration?: number | undefined;
        fileTypes?: string | undefined;
        dropzone?: boolean | undefined;
        hideFileList?: boolean | undefined;
        dropZoneText?: string | undefined;
        uploadButtonText?: string | undefined;
    } | undefined;
    VaForm?: {
        autofocus?: boolean | undefined;
        tag?: string | undefined;
    } | undefined;
    VaHover?: {
        disabled?: boolean | undefined;
        modelValue?: boolean | undefined;
        stateful?: boolean | undefined;
    } | undefined;
    VaIcon?: {
        name?: string | undefined;
        readonly color?: string | undefined;
        size?: string | number | undefined;
        readonly tag?: string | undefined;
        readonly component?: any;
        flip?: "both" | "horizontal" | "vertical" | "off" | undefined;
        readonly rotation?: string | number | undefined;
        readonly spin?: string | boolean | undefined;
        sizesConfig?: Record<string, any> | undefined;
        fontSizesConfig?: Record<string, any> | undefined;
    } | undefined;
    VaImage?: {
        ratio?: number | undefined;
        contain?: boolean | undefined;
        alt?: string | undefined;
        readonly src: string;
    } | undefined;
    VaInfiniteScroll?: {
        reverse?: boolean | undefined;
        offset?: number | undefined;
        readonly load: Function;
        disabled?: boolean | undefined;
        tag?: string | undefined;
        scrollTarget?: string | HTMLElement | undefined;
        debounce?: number | undefined;
    } | undefined;
    VaInnerLoading?: {
        readonly color?: string | undefined;
        loading?: boolean | undefined;
        size?: number | undefined;
        icon?: string | undefined;
    } | undefined;
    VaInput?: {
        type?: import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text"> | undefined;
        error?: boolean | undefined;
        color?: string | undefined;
        mask?: string | Record<string, number[]> | undefined;
        outline?: boolean | undefined;
        loading?: boolean | undefined;
        label?: string | undefined;
        readonly pattern?: string | undefined;
        ariaLabel?: string | undefined;
        disabled?: boolean | undefined;
        readonly?: boolean | undefined;
        success?: boolean | undefined;
        placeholder?: string | undefined;
        tabindex?: number | undefined;
        inputmode?: string | undefined;
        autosize?: boolean | undefined;
        modelValue?: string | number | undefined;
        bordered?: boolean | undefined;
        messages?: string | string[] | undefined;
        errorMessages?: string | string[] | undefined;
        errorCount?: string | number | undefined;
        rules?: ((v: string) => any)[] | undefined;
        immediateValidation?: boolean | undefined;
        maxLength?: number | undefined;
        requiredMark?: boolean | undefined;
        minRows?: number | undefined;
        maxRows?: number | undefined;
        inputClass?: string | undefined;
        counter?: boolean | undefined;
        returnRaw?: boolean | undefined;
        clearable?: boolean | undefined;
        clearableIcon?: string | undefined;
        clearValue?: string | undefined;
    } | undefined;
    VaList?: {
        fit?: boolean | undefined;
    } | undefined;
    VaListItem?: {
        replace?: boolean | undefined;
        exact?: boolean | undefined;
        target?: string | undefined;
        append?: boolean | undefined;
        disabled?: boolean | undefined;
        tag?: string | undefined;
        href?: string | undefined;
        to?: string | Record<string, any> | undefined;
        activeClass?: string | undefined;
        exactActiveClass?: string | undefined;
    } | undefined;
    VaListItemLabel?: {
        caption?: boolean | undefined;
        lines?: number | undefined;
    } | undefined;
    VaListItemSection?: {
        icon?: boolean | undefined;
        avatar?: boolean | undefined;
    } | undefined;
    VaListLabel?: {
        color?: string | undefined;
    } | undefined;
    VaListSeparator?: {
        fit?: boolean | undefined;
        spaced?: boolean | undefined;
    } | undefined;
    VaMessageList?: {
        readonly color?: string | undefined;
        modelValue?: string | string[] | undefined;
        limit?: number | undefined;
    } | undefined;
    VaModal?: {
        message?: string | undefined;
        backgroundColor?: string | undefined;
        maxHeight?: string | undefined;
        maxWidth?: string | undefined;
        readonly zIndex?: string | number | undefined;
        overlay?: boolean | undefined;
        title?: string | undefined;
        blur?: boolean | undefined;
        size?: "small" | "medium" | "large" | undefined;
        modelValue?: boolean | undefined;
        stateful?: boolean | undefined;
        attachElement?: string | undefined;
        disableAttachment?: boolean | undefined;
        noPadding?: boolean | undefined;
        okText?: string | undefined;
        cancelText?: string | undefined;
        hideDefaultActions?: boolean | undefined;
        fullscreen?: boolean | undefined;
        mobileFullscreen?: boolean | undefined;
        noDismiss?: boolean | undefined;
        noOutsideDismiss?: boolean | undefined;
        noEscDismiss?: boolean | undefined;
        readonly anchorClass?: string | undefined;
        fixedLayout?: boolean | undefined;
        withoutTransitions?: boolean | undefined;
        overlayOpacity?: string | number | undefined;
    } | undefined;
    VaNavbar?: {
        color?: string | undefined;
        shape?: boolean | undefined;
        readonly textColor?: string | undefined;
    } | undefined;
    VaNavbarItem?: {} | undefined;
    VaOptionList?: {
        type?: "switch" | "checkbox" | "radio" | undefined;
        error?: boolean | undefined;
        name?: string | undefined;
        color?: string | undefined;
        disabled?: boolean | undefined;
        options?: import("../../components").SelectOption[] | undefined;
        readonly?: boolean | undefined;
        success?: boolean | undefined;
        readonly modelValue?: (import("../../components").SelectOption | import("../../components").SelectOption[] | null) | undefined;
        stateful?: boolean | undefined;
        messages?: string | string[] | undefined;
        errorMessages?: string | string[] | undefined;
        errorCount?: string | number | undefined;
        rules?: ((v: any) => any)[] | undefined;
        immediateValidation?: boolean | undefined;
        leftLabel?: boolean | undefined;
        readonly defaultValue?: (import("../../components").SelectOption | import("../../components").SelectOption[] | null) | undefined;
        textBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
        valueBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
        trackBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
        disabledBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
        groupBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
    } | undefined;
    VaPagination?: {
        flat?: boolean | undefined;
        input?: boolean | undefined;
        total?: number | undefined;
        color?: string | undefined;
        disabled?: boolean | undefined;
        size?: "small" | "medium" | "large" | undefined;
        modelValue?: number | undefined;
        stateful?: boolean | undefined;
        visiblePages?: number | undefined;
        pages?: number | undefined;
        boundaryLinks?: boolean | undefined;
        boundaryNumbers?: boolean | undefined;
        directionLinks?: boolean | undefined;
        hideOnSinglePage?: boolean | undefined;
        pageSize?: number | undefined;
        boundaryIconLeft?: string | undefined;
        boundaryIconRight?: string | undefined;
        directionIconLeft?: string | undefined;
        directionIconRight?: string | undefined;
    } | undefined;
    VaParallax?: {
        height?: number | undefined;
        readonly target?: string | HTMLElement | undefined;
        alt?: string | undefined;
        src?: string | undefined;
        reversed?: boolean | undefined;
        speed?: number | undefined;
    } | undefined;
    VaPopover?: {
        offset?: number | [number, number] | undefined;
        message?: string | undefined;
        color?: string | undefined;
        title?: string | undefined;
        disabled?: boolean | undefined;
        readonly?: boolean | undefined;
        icon?: string | undefined;
        modelValue?: boolean | undefined;
        stateful?: boolean | undefined;
        readonly textColor?: string | undefined;
        anchorSelector?: string | undefined;
        attachElement?: string | undefined;
        disableAttachment?: boolean | undefined;
        keepAnchorWidth?: boolean | undefined;
        isContentHoverable?: boolean | undefined;
        closeOnContentClick?: boolean | undefined;
        closeOnClickOutside?: boolean | undefined;
        closeOnAnchorClick?: boolean | undefined;
        hoverOverTimeout?: number | undefined;
        hoverOutTimeout?: number | undefined;
        trigger?: string | undefined;
        placement?: import("../../components").Placement | undefined;
        autoHide?: boolean | undefined;
    } | undefined;
    VaProgressBar?: {
        reverse?: boolean | undefined;
        buffer?: number | undefined;
        color?: string | undefined;
        size?: number | "small" | "medium" | "large" | undefined;
        modelValue?: number | undefined;
        indeterminate?: boolean | undefined;
        rounded?: boolean | undefined;
        contentInside?: boolean | undefined;
        showPercent?: boolean | undefined;
    } | undefined;
    VaProgressCircle?: {
        color?: string | undefined;
        size?: string | number | undefined;
        modelValue?: number | undefined;
        sizesConfig?: Record<string, any> | undefined;
        fontSizesConfig?: Record<string, any> | undefined;
        indeterminate?: boolean | undefined;
        thickness?: number | undefined;
    } | undefined;
    VaRadio?: {
        name?: string | undefined;
        color?: string | undefined;
        label?: string | undefined;
        option?: null | undefined;
        disabled?: boolean | undefined;
        readonly?: boolean | undefined;
        tabindex?: number | undefined;
        modelValue?: string | number | boolean | unknown[] | Record<any, unknown> | null | undefined;
        leftLabel?: boolean | undefined;
    } | undefined;
    VaRating?: {
        max?: number | undefined;
        color?: string | undefined;
        disabled?: boolean | undefined;
        size?: string | number | undefined;
        readonly?: boolean | undefined;
        icon?: string | undefined;
        numbers?: boolean | undefined;
        tabindex?: number | undefined;
        modelValue?: number | undefined;
        stateful?: boolean | undefined;
        sizesConfig?: Record<string, any> | undefined;
        fontSizesConfig?: Record<string, any> | undefined;
        hover?: boolean | undefined;
        clearable?: boolean | undefined;
        halfIcon?: string | undefined;
        emptyIcon?: string | undefined;
        halves?: boolean | undefined;
        unselectedColor?: string | undefined;
        itemNumber?: number | undefined;
        texts?: string[] | undefined;
    } | undefined;
    VaSelect?: {
        fixed?: boolean | undefined;
        error?: boolean | undefined;
        width?: string | undefined;
        color?: string | undefined;
        maxHeight?: string | undefined;
        outline?: boolean | undefined;
        loading?: boolean | undefined;
        label?: string | undefined;
        disabled?: boolean | undefined;
        multiple?: boolean | undefined;
        options?: import("../../components").SelectOption[] | undefined;
        readonly?: boolean | undefined;
        success?: boolean | undefined;
        separator?: string | undefined;
        placeholder?: string | undefined;
        tabindex?: number | undefined;
        modelValue?: import("../../components").SelectOption | import("../../components").SelectOption[] | undefined;
        placement?: import("../../components").Placement | undefined;
        bordered?: boolean | undefined;
        messages?: string | string[] | undefined;
        errorMessages?: string | string[] | undefined;
        errorCount?: string | number | undefined;
        rules?: ((v: import("../../components").SelectOption) => any)[] | undefined;
        immediateValidation?: boolean | undefined;
        requiredMark?: boolean | undefined;
        clearable?: boolean | undefined;
        clearableIcon?: string | undefined;
        clearValue?: string | undefined;
        textBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
        valueBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
        trackBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
        disabledBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
        groupBy?: (string | ((option: import("../../components").SelectOption) => unknown)) | undefined;
        noOptionsText?: string | undefined;
        allowCreate?: boolean | "unique" | undefined;
        searchable?: boolean | undefined;
        hideSelected?: boolean | undefined;
        dropdownIcon?: string | import("../../components").SelectDropdownIcon | undefined;
        maxSelections?: string | number | undefined;
    } | undefined;
    VaSeparator?: {} | undefined;
    VaSidebar?: {
        width?: string | undefined;
        color?: string | undefined;
        position?: "left" | "right" | undefined;
        modelValue?: boolean | undefined;
        readonly textColor?: string | undefined;
        gradient?: boolean | undefined;
        hoverable?: boolean | undefined;
        minimized?: boolean | undefined;
        minimizedWidth?: string | undefined;
    } | undefined;
    VaSidebarItem?: {
        replace?: boolean | undefined;
        exact?: boolean | undefined;
        active?: boolean | undefined;
        borderColor?: string | undefined;
        target?: string | undefined;
        append?: boolean | undefined;
        disabled?: boolean | undefined;
        tag?: string | undefined;
        href?: string | undefined;
        to?: string | Record<string, any> | undefined;
        textColor?: string | undefined;
        activeClass?: string | undefined;
        exactActiveClass?: string | undefined;
        activeColor?: string | undefined;
        hoverColor?: string | undefined;
    } | undefined;
    VaSidebarItemContent?: {} | undefined;
    VaSidebarItemTitle?: {} | undefined;
    VaSlider?: {
        max?: number | undefined;
        color?: string | undefined;
        label?: string | undefined;
        disabled?: boolean | undefined;
        readonly?: boolean | undefined;
        range?: boolean | undefined;
        vertical?: boolean | undefined;
        step?: number | undefined;
        min?: number | undefined;
        modelValue?: number | number[] | undefined;
        readonly trackLabel?: string | ((val: number, order?: number | undefined) => string) | undefined;
        trackColor?: string | undefined;
        labelColor?: string | undefined;
        trackLabelVisible?: boolean | undefined;
        invertLabel?: boolean | undefined;
        pins?: boolean | undefined;
        iconPrepend?: string | undefined;
        iconAppend?: string | undefined;
        showTrack?: boolean | undefined;
    } | undefined;
    VaSpacer?: {} | undefined;
    VaSwitch?: {
        error?: boolean | undefined;
        id?: string | undefined;
        name?: string | undefined;
        color?: string | undefined;
        loading?: boolean | undefined;
        label?: string | undefined;
        disabled?: boolean | undefined;
        size?: "small" | "medium" | "large" | undefined;
        readonly?: boolean | undefined;
        success?: boolean | undefined;
        modelValue?: string | number | boolean | unknown[] | Record<string, unknown> | null | undefined;
        stateful?: boolean | undefined;
        indeterminate?: boolean | undefined;
        messages?: string | string[] | undefined;
        errorMessages?: string | string[] | undefined;
        errorCount?: string | number | undefined;
        rules?: ((v: any) => any)[] | undefined;
        immediateValidation?: boolean | undefined;
        indeterminateValue?: null | undefined;
        arrayValue?: null | undefined;
        leftLabel?: boolean | undefined;
        trueValue?: boolean | undefined;
        falseValue?: boolean | undefined;
        trueLabel?: string | undefined;
        falseLabel?: string | undefined;
        trueInnerLabel?: string | undefined;
        falseInnerLabel?: string | undefined;
        offColor?: string | undefined;
    } | undefined;
    VaTabs?: {
        center?: boolean | undefined;
        left?: boolean | undefined;
        color?: string | undefined;
        right?: boolean | undefined;
        disabled?: boolean | undefined;
        vertical?: boolean | undefined;
        modelValue?: string | number | undefined;
        stateful?: boolean | undefined;
        grow?: boolean | undefined;
        hideSlider?: boolean | undefined;
        prevIcon?: string | undefined;
        nextIcon?: string | undefined;
    } | undefined;
    VaTab?: {
        replace?: boolean | undefined;
        exact?: boolean | undefined;
        readonly name?: string | number | undefined;
        color?: string | undefined;
        label?: string | undefined;
        target?: string | undefined;
        append?: boolean | undefined;
        disabled?: boolean | undefined;
        tag?: string | undefined;
        icon?: string | undefined;
        href?: string | undefined;
        selected?: boolean | undefined;
        to?: string | Record<string, any> | undefined;
        activeClass?: string | undefined;
        exactActiveClass?: string | undefined;
    } | undefined;
    VaTimeInput?: {
        type?: import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text"> | undefined;
        error?: boolean | undefined;
        view?: "hours" | "minutes" | "seconds" | undefined;
        color?: string | undefined;
        mask?: string | Record<string, number[]> | undefined;
        outline?: boolean | undefined;
        loading?: boolean | undefined;
        label?: string | undefined;
        pattern?: string | undefined;
        ariaLabel?: string | undefined;
        disabled?: boolean | undefined;
        readonly?: boolean | undefined;
        success?: boolean | undefined;
        icon?: string | undefined;
        placeholder?: string | undefined;
        tabindex?: number | undefined;
        inputmode?: string | undefined;
        autosize?: boolean | undefined;
        readonly format?: ((date?: Date | undefined) => string) | undefined;
        modelValue?: Date | undefined;
        stateful?: boolean | undefined;
        leftIcon?: boolean | undefined;
        bordered?: boolean | undefined;
        messages?: string | string[] | undefined;
        errorMessages?: string | string[] | undefined;
        errorCount?: string | number | undefined;
        rules?: ((v: Date) => any)[] | undefined;
        immediateValidation?: boolean | undefined;
        maxLength?: number | undefined;
        requiredMark?: boolean | undefined;
        minRows?: number | undefined;
        maxRows?: number | undefined;
        inputClass?: string | undefined;
        counter?: boolean | undefined;
        returnRaw?: boolean | undefined;
        clearable?: boolean | undefined;
        clearableIcon?: string | undefined;
        clearValue?: Date | undefined;
        manualInput?: boolean | undefined;
        isOpen?: boolean | undefined;
        readonly parse?: ((input: string) => Date) | undefined;
        cellHeight?: number | undefined;
        ampm?: boolean | undefined;
        hidePeriodSwitch?: boolean | undefined;
        periodUpdatesModelValue?: boolean | undefined;
        hoursFilter?: ((h: number) => boolean) | undefined;
        minutesFilter?: ((h: number) => boolean) | undefined;
        secondsFilter?: ((h: number) => boolean) | undefined;
        framed?: boolean | undefined;
        visibleCellsCount?: number | undefined;
    } | undefined;
    VaTimeline?: {} | undefined;
    VaTimelineItem?: {
        active?: boolean | undefined;
        color?: string | undefined;
        vertical?: boolean | undefined;
        activePrevious?: boolean | undefined;
        activeNext?: boolean | undefined;
        isFirst?: boolean | undefined;
        isLast?: boolean | undefined;
        inverted?: boolean | undefined;
    } | undefined;
    VaTimePicker?: {
        view?: "hours" | "minutes" | "seconds" | undefined;
        disabled?: boolean | undefined;
        readonly?: boolean | undefined;
        readonly modelValue?: Date | undefined;
        stateful?: boolean | undefined;
        cellHeight?: number | undefined;
        ampm?: boolean | undefined;
        hidePeriodSwitch?: boolean | undefined;
        periodUpdatesModelValue?: boolean | undefined;
        readonly hoursFilter?: ((h: number) => boolean) | undefined;
        readonly minutesFilter?: ((h: number) => boolean) | undefined;
        readonly secondsFilter?: ((h: number) => boolean) | undefined;
        framed?: boolean | undefined;
        visibleCellsCount?: number | undefined;
    } | undefined;
    VaTreeCategory?: {
        color?: string | undefined;
        label?: string | number | undefined;
        icon?: string | undefined;
        isOpen?: boolean | undefined;
    } | undefined;
    VaTreeNode?: {
        color?: string | undefined;
        icon?: string | undefined;
        iconRight?: string | undefined;
        highlighted?: boolean | undefined;
    } | undefined;
    VaTreeRoot?: {
        color?: string | undefined;
    } | undefined;
    VaTreeView?: {
        color?: string | undefined;
    } | undefined;
}>;
export declare type Props = Record<string, any>;
export {};

declare const _default: import("vue").DefineComponent<{
    itemNumber: {
        type: NumberConstructor;
        required: true;
    };
    modelValue: {
        type: NumberConstructor;
        required: true;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
        validator: (size: string | number) => boolean;
    };
    sizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../../services/global-config/types").SizeConfig;
    };
    fontSizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../../services/global-config/types").SizeConfig;
    };
    unselectedColor: {
        type: StringConstructor;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, {
    sizeComputed: import("vue").ComputedRef<string>;
    fontSizeComputed: import("vue").ComputedRef<string>;
    fontSizeInRem: import("vue").ComputedRef<number>;
    computedColor: import("vue").ComputedRef<string>;
    backgroundComputed: import("vue").ComputedRef<string>;
    textColorComputed: import("vue").ComputedRef<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    itemNumber: {
        type: NumberConstructor;
        required: true;
    };
    modelValue: {
        type: NumberConstructor;
        required: true;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
        validator: (size: string | number) => boolean;
    };
    sizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../../services/global-config/types").SizeConfig;
    };
    fontSizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../../services/global-config/types").SizeConfig;
    };
    unselectedColor: {
        type: StringConstructor;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    color: string;
    size: string | number;
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
}>;
export default _default;

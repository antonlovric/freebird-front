export declare const VaRatingItem: import("vue").DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    halfIcon: {
        type: StringConstructor;
        default: string;
    };
    emptyIcon: {
        type: StringConstructor;
        default: string;
    };
    halves: {
        type: BooleanConstructor;
        default: boolean;
    };
    hover: {
        type: BooleanConstructor;
        default: boolean;
    };
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    unselectedColor: {
        type: StringConstructor;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, {
    computedColor: import("vue").ComputedRef<string>;
    rootEl: import("vue").ShallowRef<HTMLElement | undefined>;
    onEnter: () => void;
    onClick: () => void;
    onMouseMove: (ev: MouseEvent) => void;
    onMouseLeave: () => void;
    visibleValue: import("vue").ComputedRef<number>;
    computedIconName: import("vue").ComputedRef<string>;
    tabIndexComputed: import("vue").ComputedRef<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "update:modelValue" | "hover")[], "click" | "update:modelValue" | "hover", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    halfIcon: {
        type: StringConstructor;
        default: string;
    };
    emptyIcon: {
        type: StringConstructor;
        default: string;
    };
    halves: {
        type: BooleanConstructor;
        default: boolean;
    };
    hover: {
        type: BooleanConstructor;
        default: boolean;
    };
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    unselectedColor: {
        type: StringConstructor;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    onClick?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onHover?: ((...args: any[]) => any) | undefined;
}, {
    color: string;
    disabled: boolean;
    size: string | number;
    readonly: boolean;
    icon: string;
    tabindex: number;
    modelValue: number;
    hover: boolean;
    halfIcon: string;
    emptyIcon: string;
    halves: boolean;
}>;

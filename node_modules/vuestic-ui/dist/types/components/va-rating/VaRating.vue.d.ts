import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    numbers: {
        type: BooleanConstructor;
        default: boolean;
    };
    halves: {
        type: BooleanConstructor;
        default: boolean;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    texts: {
        type: PropType<string[]>;
        default: () => never[];
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    size: {
        type: PropType<string | number>;
        required: true;
        default: string | number;
    };
    modelValue: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any>;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any>;
    };
    itemNumber: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    unselectedColor: {
        type: PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    disabled: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    readonly: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    icon: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    tabindex: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    hover: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    halfIcon: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    emptyIcon: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    onClick: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onUpdate:modelValue": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    onHover: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    rootClass: {
        [x: `va-rating--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-rating--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-rating--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    VaRatingItemProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        color: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        disabled: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        size: {
            type: PropType<string | number>;
            required: true;
            default: string | number;
        };
        readonly: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        icon: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        tabindex: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        modelValue: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        hover: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        halfIcon: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        emptyIcon: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        halves: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        unselectedColor: {
            type: PropType<string | undefined>;
            required: false;
            default: undefined;
        };
        onClick: {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onUpdate:modelValue": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        onHover: {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
    }>>;
    VaRatingItemNumberButtonProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        color: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        size: {
            type: PropType<string | number>;
            required: true;
            default: string | number;
        };
        modelValue: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        sizesConfig: {
            type: PropType<Record<string, any>>;
            required: true;
            default: Record<string, any>;
        };
        fontSizesConfig: {
            type: PropType<Record<string, any>>;
            required: true;
            default: Record<string, any>;
        };
        itemNumber: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        unselectedColor: {
            type: PropType<string | undefined>;
            required: false;
            default: undefined;
        };
    }>>;
    isInteractionsEnabled: import("vue").ComputedRef<boolean>;
    tabIndexComputed: import("vue").ComputedRef<0 | undefined>;
    onArrowKeyPress: (direction: 1 | -1) => void;
    visibleValue: import("vue").ComputedRef<number>;
    modelValue: import("vue").WritableComputedRef<number>;
    hoveredValue: import("vue").Ref<number>;
    isHovered: import("vue").Ref<boolean>;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
    onItemValueUpdate: (itemIndex: number, newValue: number) => void;
    onItemHoveredValueUpdate: (itemIndex: number, newValue: number) => void;
    getItemValue: (itemIndex: number) => number;
    computedColor: import("vue").ComputedRef<string>;
    backgroundComputed: import("vue").ComputedRef<string>;
    textColorComputed: import("vue").ComputedRef<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    numbers: {
        type: BooleanConstructor;
        default: boolean;
    };
    halves: {
        type: BooleanConstructor;
        default: boolean;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    texts: {
        type: PropType<string[]>;
        default: () => never[];
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    size: {
        type: PropType<string | number>;
        required: true;
        default: string | number;
    };
    modelValue: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any>;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any>;
    };
    itemNumber: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    unselectedColor: {
        type: PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    disabled: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    readonly: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    icon: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    tabindex: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    hover: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    halfIcon: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    emptyIcon: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    onClick: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onUpdate:modelValue": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    onHover: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    max: number;
    color: string;
    disabled: boolean;
    size: string | number;
    readonly: boolean;
    icon: string;
    numbers: boolean;
    onClick: ((...args: any[]) => any) | undefined;
    tabindex: number;
    modelValue: number;
    stateful: boolean;
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
    hover: boolean;
    "onUpdate:modelValue": ((...args: any[]) => any) | undefined;
    clearable: boolean;
    onHover: ((...args: any[]) => any) | undefined;
    halfIcon: string;
    emptyIcon: string;
    halves: boolean;
    unselectedColor: string | undefined;
    itemNumber: number;
    texts: string[];
}>;
export default _default;

export declare const VaPagination: import("vue").DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    visiblePages: {
        type: NumberConstructor;
        default: number;
    };
    pages: {
        type: NumberConstructor;
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: string;
        validator: (v: string) => boolean;
    };
    boundaryLinks: {
        type: BooleanConstructor;
        default: boolean;
    };
    boundaryNumbers: {
        type: BooleanConstructor;
        default: boolean;
    };
    directionLinks: {
        type: BooleanConstructor;
        default: boolean;
    };
    input: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideOnSinglePage: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    total: {
        type: NumberConstructor;
        default: null;
    };
    pageSize: {
        type: NumberConstructor;
        default: null;
    };
    boundaryIconLeft: {
        type: StringConstructor;
        default: string;
    };
    boundaryIconRight: {
        type: StringConstructor;
        default: string;
    };
    directionIconLeft: {
        type: StringConstructor;
        default: string;
    };
    directionIconRight: {
        type: StringConstructor;
        default: string;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {
    currentValue: import("vue").WritableComputedRef<number>;
    lastPage: import("vue").ComputedRef<number>;
    changeValue: () => void;
    inputValue: import("vue").Ref<string>;
    showPagination: import("vue").ComputedRef<boolean>;
    showBoundaryLinks: import("vue").ComputedRef<boolean>;
    onUserInput: (pageNum: number | "...") => void;
    activeButtonStyle: (buttonValue: number | "...") => {
        backgroundColor: string;
        color: string;
    } | {
        color: string;
        backgroundColor?: undefined;
    };
    showDirectionLinks: import("vue").ComputedRef<boolean>;
    paginationRange: import("vue").ComputedRef<(number | "...")[]>;
    focusInput: () => void;
    inputStyleComputed: import("vue").ComputedRef<{
        cursor: string;
        color: string;
        opacity: number;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    visiblePages: {
        type: NumberConstructor;
        default: number;
    };
    pages: {
        type: NumberConstructor;
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: string;
        validator: (v: string) => boolean;
    };
    boundaryLinks: {
        type: BooleanConstructor;
        default: boolean;
    };
    boundaryNumbers: {
        type: BooleanConstructor;
        default: boolean;
    };
    directionLinks: {
        type: BooleanConstructor;
        default: boolean;
    };
    input: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideOnSinglePage: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    total: {
        type: NumberConstructor;
        default: null;
    };
    pageSize: {
        type: NumberConstructor;
        default: null;
    };
    boundaryIconLeft: {
        type: StringConstructor;
        default: string;
    };
    boundaryIconRight: {
        type: StringConstructor;
        default: string;
    };
    directionIconLeft: {
        type: StringConstructor;
        default: string;
    };
    directionIconRight: {
        type: StringConstructor;
        default: string;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    flat: boolean;
    input: boolean;
    total: number;
    color: string;
    disabled: boolean;
    size: "small" | "medium" | "large";
    modelValue: number;
    stateful: boolean;
    visiblePages: number;
    pages: number;
    boundaryLinks: boolean;
    boundaryNumbers: boolean;
    directionLinks: boolean;
    hideOnSinglePage: boolean;
    pageSize: number;
    boundaryIconLeft: string;
    boundaryIconRight: string;
    directionIconLeft: string;
    directionIconRight: string;
}>;

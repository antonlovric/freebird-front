import { PropType } from 'vue';
import { ToastPosition } from './types';
declare const _default: import("vue").DefineComponent<{
    title: {
        type: StringConstructor;
        default: string;
    };
    offsetY: {
        type: NumberConstructor;
        default: number;
    };
    offsetX: {
        type: NumberConstructor;
        default: number;
    };
    message: {
        type: (FunctionConstructor | StringConstructor)[];
        default: string;
    };
    dangerouslyUseHtmlString: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    customClass: {
        type: StringConstructor;
        default: string;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    closeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    onClose: {
        type: FunctionConstructor;
    };
    onClick: {
        type: FunctionConstructor;
    };
    multiLine: {
        type: BooleanConstructor;
        default: boolean;
    };
    position: {
        type: PropType<ToastPosition>;
        default: string;
        validator: (value: string) => boolean;
    };
    render: {
        type: FunctionConstructor;
    };
}, {
    visible: import("vue").Ref<boolean>;
    toastClasses: import("vue").ComputedRef<string[]>;
    toastStyles: import("vue").ComputedRef<{
        [x: string]: string;
        backgroundColor: string;
        color: string;
    }>;
    computedMessage: import("vue").ComputedRef<any>;
    onToastClick: () => void;
    onToastClose: () => void;
    startTimer: () => void;
    clearTimer: () => void | 0 | undefined;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("on-click" | "on-close")[], "on-click" | "on-close", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    title: {
        type: StringConstructor;
        default: string;
    };
    offsetY: {
        type: NumberConstructor;
        default: number;
    };
    offsetX: {
        type: NumberConstructor;
        default: number;
    };
    message: {
        type: (FunctionConstructor | StringConstructor)[];
        default: string;
    };
    dangerouslyUseHtmlString: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    customClass: {
        type: StringConstructor;
        default: string;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    closeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    onClose: {
        type: FunctionConstructor;
    };
    onClick: {
        type: FunctionConstructor;
    };
    multiLine: {
        type: BooleanConstructor;
        default: boolean;
    };
    position: {
        type: PropType<ToastPosition>;
        default: string;
        validator: (value: string) => boolean;
    };
    render: {
        type: FunctionConstructor;
    };
}>> & {
    "onOn-click"?: ((...args: any[]) => any) | undefined;
    "onOn-close"?: ((...args: any[]) => any) | undefined;
}, {
    message: string | Function;
    color: string;
    position: ToastPosition;
    title: string;
    icon: string;
    duration: number;
    closeable: boolean;
    multiLine: boolean;
    offsetX: number;
    offsetY: number;
    dangerouslyUseHtmlString: boolean;
    customClass: string;
}>;
export default _default;

export declare const VaTreeCategory: import("vue").DefineComponent<{
    label: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    isOpen: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, {
    treeCategory: import("../types").TreeCategory;
    treeView: import("../types").TreeNodeCommon<import("../types").TreeCategory | import("vue").DefineComponent<{
        highlighted: {
            type: BooleanConstructor;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        iconRight: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }, {
        treeCategory: import("../types").TreeNodeCommon<typeof import("../types").TreeNodeKey>;
        getColor: (prop?: string | undefined, defaultColor?: string | undefined, preferVariables?: boolean | undefined) => string;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        highlighted: {
            type: BooleanConstructor;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        iconRight: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>>, {
        color: string;
        icon: string;
        iconRight: string;
        highlighted: boolean;
    }>>;
    nodes: import("vue").Ref<import("../types").TreeNodeComponent[]>;
    isOpenCached: import("vue").Ref<boolean | undefined>;
    collapse: () => void;
    expand: () => void;
    toggle: (e: MouseEvent) => void;
    getColor: (prop?: string | undefined, defaultColor?: string | undefined, preferVariables?: boolean | undefined) => string;
    colorComputed: import("vue").ComputedRef<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    label: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    isOpen: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    color: string;
    label: string | number;
    icon: string;
    isOpen: boolean;
}>;

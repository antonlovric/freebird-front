import { PropType, nextTick } from 'vue';
declare const _default: import("vue").DefineComponent<{
    isOpen: {
        type: BooleanConstructor;
        default: undefined;
    };
    modelValue: {
        type: DateConstructor;
        default: undefined;
    };
    clearValue: {
        type: DateConstructor;
        default: undefined;
    };
    format: {
        type: PropType<(date?: Date | undefined) => string>;
    };
    parse: {
        type: PropType<(input: string) => Date>;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<((v: any) => any)[]>;
        default: () => any;
    } & {
        type: PropType<((v: Date) => any)[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    view: {
        type: PropType<"hours" | "minutes" | "seconds">;
        required: true;
        default: "hours" | "minutes" | "seconds";
    };
    disabled: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    readonly: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    cellHeight: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    ampm: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    hidePeriodSwitch: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    periodUpdatesModelValue: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    framed: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    visibleCellsCount: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    hoursFilter: {
        type: PropType<((h: number) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    minutesFilter: {
        type: PropType<((h: number) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    secondsFilter: {
        type: PropType<((h: number) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    type: {
        type: PropType<import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">>;
        required: true;
        default: import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">;
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    mask: {
        type: PropType<string | Record<string, number[]>>;
        required: true;
        default: string | Record<string, number[]>;
    };
    outline: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    loading: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    label: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    placeholder: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    tabindex: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    inputmode: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    autosize: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    bordered: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    requiredMark: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    minRows: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    inputClass: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    counter: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    returnRaw: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    clearable: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    clearableIcon: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    pattern: {
        type: PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    ariaLabel: {
        type: PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    maxLength: {
        type: PropType<number | undefined>;
        required: false;
        default: undefined;
    };
    maxRows: {
        type: PropType<number | undefined>;
        required: false;
        default: undefined;
    };
}, {
    input: import("vue").ShallowRef<import("vue").DefineComponent<{
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: NumberConstructor;
            default: number;
        };
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: PropType<import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">>;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputClass: {
            type: StringConstructor;
            default: string;
        };
        pattern: {
            type: StringConstructor;
        };
        inputmode: {
            type: StringConstructor;
            default: string;
        };
        ariaLabel: {
            type: StringConstructor;
            default: undefined;
        };
        counter: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxLength: {
            type: NumberConstructor;
            default: undefined;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        outline: {
            type: BooleanConstructor;
            default: boolean;
        };
        bordered: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        readonly: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        autosize: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        minRows: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        maxRows: {
            type: PropType<number | undefined>;
            required: false;
            default: undefined;
        };
        mask: {
            type: PropType<string | Record<string, number[]>>;
            default: string;
        };
        returnRaw: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        clearValue: {
            type: StringConstructor;
            default: string;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: PropType<((v: any) => any)[]>;
            default: () => any;
        } & {
            type: PropType<((v: string) => any)[]>;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        input: import("vue").ShallowRef<HTMLInputElement | import("vue").DefineComponent<{
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            placeholder: {
                type: StringConstructor;
            };
            autosize: {
                type: BooleanConstructor;
                default: boolean;
            };
            minRows: {
                type: NumberConstructor;
                default: number;
                validator: (val: number) => boolean;
            };
            maxRows: {
                type: NumberConstructor;
                validator: (val: number) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
        }, {
            textarea: import("vue").ShallowRef<HTMLTextAreaElement | undefined>;
            computedStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
            listeners: Record<string, any>;
            computedProps: import("vue").ComputedRef<{
                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                placeholder?: string | undefined;
                autosize?: boolean | undefined;
                modelValue?: string | number | undefined;
                minRows?: number | undefined;
                maxRows?: number | undefined;
            }>;
            focus: () => void;
            blur: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            placeholder: {
                type: StringConstructor;
            };
            autosize: {
                type: BooleanConstructor;
                default: boolean;
            };
            minRows: {
                type: NumberConstructor;
                default: number;
                validator: (val: number) => boolean;
            };
            maxRows: {
                type: NumberConstructor;
                validator: (val: number) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            disabled: boolean;
            readonly: boolean;
            autosize: boolean;
            modelValue: string | number;
            minRows: number;
        }> | undefined>;
        inputEvents: {
            onFocus: (e: Event) => void;
            onBlur: (e: Event) => void;
            onInput: (event: Event) => void;
        };
        valueLengthComputed: import("vue").ComputedRef<number | undefined>;
        computedChildAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
        computedInputAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
        textareaProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
            [x: string & `on${string}`]: {
                type: PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            disabled: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            readonly: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            autosize: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            modelValue: {
                type: PropType<string | number>;
                required: true;
                default: string | number;
            };
            minRows: {
                type: PropType<number>;
                required: true;
                default: number;
            };
            placeholder: {
                type: PropType<string | undefined>;
                required: false;
                default: undefined;
            };
            maxRows: {
                type: PropType<number | undefined>;
                required: false;
                default: undefined;
            };
        }>>;
        computedValue: import("vue").ComputedRef<string | number>;
        tabIndexComputed: import("vue").ComputedRef<number>;
        computedError: import("vue").WritableComputedRef<boolean>;
        computedErrorMessages: import("vue").WritableComputedRef<string[]>;
        isFocused: import("vue").WritableComputedRef<boolean | undefined>;
        canBeCleared: import("vue").ComputedRef<boolean>;
        clearIconProps: import("vue").ComputedRef<{
            name: string;
            color: string;
            size: string;
        }>;
        fieldListeners: Record<string, any>;
        filterSlots: import("vue").ComputedRef<string[]>;
        reset: () => void;
        focus: () => void;
        blur: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: NumberConstructor;
            default: number;
        };
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: PropType<import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">>;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputClass: {
            type: StringConstructor;
            default: string;
        };
        pattern: {
            type: StringConstructor;
        };
        inputmode: {
            type: StringConstructor;
            default: string;
        };
        ariaLabel: {
            type: StringConstructor;
            default: undefined;
        };
        counter: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxLength: {
            type: NumberConstructor;
            default: undefined;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        outline: {
            type: BooleanConstructor;
            default: boolean;
        };
        bordered: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        readonly: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        autosize: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        minRows: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        maxRows: {
            type: PropType<number | undefined>;
            required: false;
            default: undefined;
        };
        mask: {
            type: PropType<string | Record<string, number[]>>;
            default: string;
        };
        returnRaw: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        clearValue: {
            type: StringConstructor;
            default: string;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: PropType<((v: any) => any)[]>;
            default: () => any;
        } & {
            type: PropType<((v: string) => any)[]>;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
    }, {
        type: import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">;
        error: boolean;
        color: string;
        mask: string | Record<string, number[]>;
        outline: boolean;
        loading: boolean;
        label: string;
        ariaLabel: string;
        disabled: boolean;
        readonly: boolean;
        success: boolean;
        placeholder: string;
        tabindex: number;
        inputmode: string;
        autosize: boolean;
        modelValue: string | number;
        bordered: boolean;
        messages: string | string[];
        errorMessages: string | string[];
        errorCount: string | number;
        rules: ((v: string) => any)[];
        immediateValidation: boolean;
        maxLength: number;
        requiredMark: boolean;
        minRows: number;
        maxRows: number | undefined;
        inputClass: string;
        counter: boolean;
        returnRaw: boolean;
        clearable: boolean;
        clearableIcon: string;
        clearValue: string;
    }> | undefined>;
    timePicker: import("vue").ShallowRef<import("vue").DefineComponent<{
        modelValue: {
            type: DateConstructor;
            required: false;
        };
        ampm: {
            type: BooleanConstructor;
            default: boolean;
        };
        hidePeriodSwitch: {
            type: BooleanConstructor;
            default: boolean;
        };
        periodUpdatesModelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        view: {
            type: PropType<"hours" | "minutes" | "seconds">;
            default: string;
        };
        hoursFilter: {
            type: PropType<(h: number) => boolean>;
        };
        minutesFilter: {
            type: PropType<(h: number) => boolean>;
        };
        secondsFilter: {
            type: PropType<(h: number) => boolean>;
        };
        framed: {
            type: BooleanConstructor;
            default: boolean;
        };
        cellHeight: {
            type: NumberConstructor;
            default: number;
        };
        visibleCellsCount: {
            type: NumberConstructor;
            default: number;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: PropType<boolean>;
            default: boolean;
        };
    }, {
        columns: import("vue").ComputedRef<({
            items: number[];
            activeItem: import("vue").WritableComputedRef<number>;
        } | {
            items: string[];
            activeItem: import("vue").WritableComputedRef<number>;
        })[]>;
        computedStyles: import("vue").ComputedRef<{
            [x: string]: string;
        }[]>;
        computedClasses: import("vue").ComputedRef<{
            'va-time-picker--framed': boolean;
            asObject: import("vue").ComputedRef<{
                [x: `va-time-picker--${string}`]: boolean;
            }>;
            asArray: import("vue").ComputedRef<`va-time-picker--${string}`[]>;
            asString: import("vue").ComputedRef<string>;
        }>;
        isPM: import("vue").Ref<boolean>;
        pickers: import("vue").ShallowRef<(HTMLElement | ({
            $: import("vue").ComponentInternalInstance;
            $data: {};
            $props: {};
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import("vue").Slot | undefined;
            }>;
            $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
            $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
            $emit: (event: string, ...args: any[]) => void;
            $el: any;
            $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}> & {
                beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                created?: ((() => void) | (() => void)[]) | undefined;
                beforeMount?: ((() => void) | (() => void)[]) | undefined;
                mounted?: ((() => void) | (() => void)[]) | undefined;
                beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                updated?: ((() => void) | (() => void)[]) | undefined;
                activated?: ((() => void) | (() => void)[]) | undefined;
                deactivated?: ((() => void) | (() => void)[]) | undefined;
                beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                destroyed?: ((() => void) | (() => void)[]) | undefined;
                unmounted?: ((() => void) | (() => void)[]) | undefined;
                renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
            };
            $forceUpdate: () => void;
            $nextTick: typeof nextTick;
            $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
        } & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("@vue/runtime-core").ComponentCustomProperties & HTMLElement))[]>;
        setItemRef: (el: any) => void;
        focusNext: () => void;
        focusPrev: () => void;
        activeColumnIndex: import("vue").Ref<number | undefined>;
        focus: (idx?: number) => void;
        blur: (idx?: number | undefined) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: DateConstructor;
            required: false;
        };
        ampm: {
            type: BooleanConstructor;
            default: boolean;
        };
        hidePeriodSwitch: {
            type: BooleanConstructor;
            default: boolean;
        };
        periodUpdatesModelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        view: {
            type: PropType<"hours" | "minutes" | "seconds">;
            default: string;
        };
        hoursFilter: {
            type: PropType<(h: number) => boolean>;
        };
        minutesFilter: {
            type: PropType<(h: number) => boolean>;
        };
        secondsFilter: {
            type: PropType<(h: number) => boolean>;
        };
        framed: {
            type: BooleanConstructor;
            default: boolean;
        };
        cellHeight: {
            type: NumberConstructor;
            default: number;
        };
        visibleCellsCount: {
            type: NumberConstructor;
            default: number;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: PropType<boolean>;
            default: boolean;
        };
    }>> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
    }, {
        view: "hours" | "minutes" | "seconds";
        disabled: boolean;
        readonly: boolean;
        stateful: boolean;
        cellHeight: number;
        ampm: boolean;
        hidePeriodSwitch: boolean;
        periodUpdatesModelValue: boolean;
        framed: boolean;
        visibleCellsCount: number;
    }> | undefined>;
    timePickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        [x: string & `on${string}`]: {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        view: {
            type: PropType<"hours" | "minutes" | "seconds">;
            required: true;
            default: "hours" | "minutes" | "seconds";
        };
        disabled: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        readonly: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        stateful: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        cellHeight: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        ampm: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        hidePeriodSwitch: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        periodUpdatesModelValue: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        framed: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        visibleCellsCount: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        modelValue: {
            type: PropType<Date | undefined>;
            required: false;
            default: undefined;
        };
        hoursFilter: {
            type: PropType<((h: number) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        minutesFilter: {
            type: PropType<((h: number) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        secondsFilter: {
            type: PropType<((h: number) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
    }>>;
    computedInputProps: import("vue").ComputedRef<{
        clearable: boolean;
        rules: never[];
        error: boolean;
        errorMessages: string[];
        readonly: boolean;
        type: import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">;
        color: string;
        mask: string | Record<string, number[]>;
        outline: boolean;
        loading: boolean;
        label: string;
        disabled: boolean;
        success: boolean;
        placeholder: string;
        tabindex: number;
        inputmode: string;
        autosize: boolean;
        modelValue: string | number;
        bordered: boolean;
        messages: string | string[];
        errorCount: string | number;
        immediateValidation: boolean;
        requiredMark: boolean;
        minRows: number;
        inputClass: string;
        counter: boolean;
        returnRaw: boolean;
        clearableIcon: string;
        clearValue: string;
        pattern?: string | undefined;
        ariaLabel?: string | undefined;
        maxLength?: number | undefined;
        maxRows?: number | undefined;
    }>;
    computedInputAttrs: import("vue").ComputedRef<{
        ariaLabel: string;
        ariaDisabled: boolean;
        ariaReadonly: boolean;
        tabindex: number;
    }>;
    computedInputListeners: import("vue").ComputedRef<{
        focus: () => void;
        blur: () => void;
    }>;
    iconsTabIndexComputed: import("vue").ComputedRef<-1 | 0>;
    isOpenSync: import("vue").WritableComputedRef<boolean>;
    modelValueSync: import("vue").WritableComputedRef<Date | undefined>;
    valueText: import("vue").ComputedRef<string>;
    onInputTextChanged: (val: string) => void;
    canBeClearedComputed: import("vue").ComputedRef<boolean>;
    iconProps: import("vue").ComputedRef<{
        name: string;
        color: string;
        size: string;
    }>;
    clearIconProps: import("vue").ComputedRef<{
        name: string;
        color: string;
        size: string;
    }>;
    filteredSlots: import("vue").ComputedRef<string[]>;
    hideDropdown: () => void;
    showDropdown: (event?: KeyboardEvent | undefined, cancel?: boolean | undefined, prevent?: boolean | undefined) => void;
    toggleDropdown: () => void;
    toggleDropdownWithoutFocus: () => void;
    reset: () => void;
    focus: () => void;
    blur: () => void;
    onFocus: (e?: Event | undefined) => void;
    onBlur: (e?: Event | undefined) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    isOpen: {
        type: BooleanConstructor;
        default: undefined;
    };
    modelValue: {
        type: DateConstructor;
        default: undefined;
    };
    clearValue: {
        type: DateConstructor;
        default: undefined;
    };
    format: {
        type: PropType<(date?: Date | undefined) => string>;
    };
    parse: {
        type: PropType<(input: string) => Date>;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<((v: any) => any)[]>;
        default: () => any;
    } & {
        type: PropType<((v: Date) => any)[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    view: {
        type: PropType<"hours" | "minutes" | "seconds">;
        required: true;
        default: "hours" | "minutes" | "seconds";
    };
    disabled: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    readonly: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    cellHeight: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    ampm: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    hidePeriodSwitch: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    periodUpdatesModelValue: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    framed: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    visibleCellsCount: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    hoursFilter: {
        type: PropType<((h: number) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    minutesFilter: {
        type: PropType<((h: number) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    secondsFilter: {
        type: PropType<((h: number) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    type: {
        type: PropType<import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">>;
        required: true;
        default: import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">;
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    mask: {
        type: PropType<string | Record<string, number[]>>;
        required: true;
        default: string | Record<string, number[]>;
    };
    outline: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    loading: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    label: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    placeholder: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    tabindex: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    inputmode: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    autosize: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    bordered: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    requiredMark: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    minRows: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    inputClass: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    counter: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    returnRaw: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    clearable: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    clearableIcon: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    pattern: {
        type: PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    ariaLabel: {
        type: PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    maxLength: {
        type: PropType<number | undefined>;
        required: false;
        default: undefined;
    };
    maxRows: {
        type: PropType<number | undefined>;
        required: false;
        default: undefined;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    type: import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">;
    error: boolean;
    view: "hours" | "minutes" | "seconds";
    color: string;
    mask: string | Record<string, number[]>;
    outline: boolean;
    loading: boolean;
    label: string;
    pattern: string | undefined;
    ariaLabel: string | undefined;
    disabled: boolean;
    readonly: boolean;
    success: boolean;
    icon: string;
    placeholder: string;
    tabindex: number;
    inputmode: string;
    autosize: boolean;
    modelValue: Date;
    stateful: boolean;
    leftIcon: boolean;
    bordered: boolean;
    messages: string | string[];
    errorMessages: string | string[];
    errorCount: string | number;
    rules: ((v: Date) => any)[];
    immediateValidation: boolean;
    maxLength: number | undefined;
    requiredMark: boolean;
    minRows: number;
    maxRows: number | undefined;
    inputClass: string;
    counter: boolean;
    returnRaw: boolean;
    clearable: boolean;
    clearableIcon: string;
    clearValue: Date;
    manualInput: boolean;
    isOpen: boolean;
    cellHeight: number;
    ampm: boolean;
    hidePeriodSwitch: boolean;
    periodUpdatesModelValue: boolean;
    hoursFilter: ((h: number) => boolean) | undefined;
    minutesFilter: ((h: number) => boolean) | undefined;
    secondsFilter: ((h: number) => boolean) | undefined;
    framed: boolean;
    visibleCellsCount: number;
}>;
export default _default;

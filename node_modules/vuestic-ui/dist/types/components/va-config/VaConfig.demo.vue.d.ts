declare var _default: import("vue").DefineComponent<{
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
} | {
    [x: string & `on${string}`]: ((...args: never) => any) | undefined;
}, {
    setGlobalConfig: (updater: import("../../services/global-config/types").GlobalConfig | import("../../services/global-config/types").GlobalConfigUpdater) => void;
    getGlobalConfig: () => import("../../services/global-config/types").GlobalConfig;
    mergeGlobalConfig: (updater: import("../../services/global-config/types").GlobalConfig | import("../../services/global-config/types").GlobalConfigUpdater) => void;
    getColor: (prop?: string | undefined, defaultColor?: string | undefined, preferVariables?: boolean | undefined) => string;
    buttonRoundConfigValue: import("vue").ComputedRef<boolean>;
}, {
    dynamicContextConfig: {
        ConfigUsageTest: {
            color: string;
        };
    };
    buttonConfig: {
        size: string;
        icon: string;
        iconRight: string;
        flat: boolean;
        color: string;
        outline: boolean;
    };
    symbol: symbol;
    dynamicConfig: string;
}, {
    redOrange: {
        get(): boolean;
        set(value: any): void;
    };
}, {
    overrideButtonsRound(): void;
    changeButtonsRound(): void;
    setComponentsAllColor(): void;
    resetComponentsAllColor(): void;
    overrideConfig(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}> | Readonly<{
    [x: string & `on${string}`]: ((...args: never) => any) | undefined;
}>, {} | {}>;
export default _default;

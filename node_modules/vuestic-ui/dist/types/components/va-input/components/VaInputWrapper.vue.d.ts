declare const _default: import("vue").DefineComponent<{
    counterValue: {
        type: NumberConstructor;
        default: undefined;
    };
    maxLength: {
        type: NumberConstructor;
        default: undefined;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    focused: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        required: boolean;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: import("vue").PropType<((v: any) => any)[]>;
        default: () => any;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    wrapperClass: {
        [x: `va-input-wrapper--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-input-wrapper--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-input-wrapper--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    wrapperStyle: import("vue").ComputedRef<{
        [x: string]: string;
    }[]>;
    isCounterVisible: import("vue").ComputedRef<boolean>;
    counterComputed: import("vue").ComputedRef<string | number | undefined>;
    colorComputed: import("vue").ComputedRef<string>;
    messagesColor: import("vue").ComputedRef<"" | "success" | "danger">;
    messagesComputed: import("vue").ComputedRef<string | string[] | undefined>;
    hasMessages: import("vue").ComputedRef<boolean>;
    errorLimit: import("vue").ComputedRef<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "click-prepend" | "click-append" | "click-prepend-inner" | "click-append-inner")[], "click" | "click-prepend" | "click-append" | "click-prepend-inner" | "click-append-inner", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    counterValue: {
        type: NumberConstructor;
        default: undefined;
    };
    maxLength: {
        type: NumberConstructor;
        default: undefined;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    focused: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        required: boolean;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: import("vue").PropType<((v: any) => any)[]>;
        default: () => any;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onClick?: ((...args: any[]) => any) | undefined;
    "onClick-prepend"?: ((...args: any[]) => any) | undefined;
    "onClick-append"?: ((...args: any[]) => any) | undefined;
    "onClick-prepend-inner"?: ((...args: any[]) => any) | undefined;
    "onClick-append-inner"?: ((...args: any[]) => any) | undefined;
}, {
    error: boolean;
    color: string;
    outline: boolean;
    label: string;
    disabled: boolean;
    readonly: boolean;
    success: boolean;
    bordered: boolean;
    messages: string | string[];
    errorMessages: string | string[];
    errorCount: string | number;
    rules: ((v: any) => any)[];
    immediateValidation: boolean;
    counterValue: number;
    maxLength: number;
    focused: boolean;
    requiredMark: boolean;
}>;
export default _default;

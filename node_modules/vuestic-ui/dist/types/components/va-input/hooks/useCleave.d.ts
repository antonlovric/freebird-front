import { PropType, Ref } from 'vue';
import Cleave from 'cleave.js';
export declare const useCleaveProps: {
    mask: {
        type: PropType<string | Record<string, number[]>>;
        default: string;
    };
    returnRaw: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: StringConstructor;
    };
};
declare type Props = {
    mask: string | Record<string, number[]>;
    returnRaw: boolean;
    modelValue: string | number;
};
export declare const useCleave: (element: Ref<HTMLInputElement | undefined>, props: Props, emit: (event: 'update:modelValue' | any, ...args: any[]) => any) => {
    cleave: Ref<Cleave | undefined>;
    computedValue: import("vue").ComputedRef<string | number>;
    onInput: (event: Event) => void;
};
export {};

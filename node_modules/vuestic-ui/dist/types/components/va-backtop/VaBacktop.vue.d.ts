import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    target: {
        type: PropType<string | Element | undefined>;
        default: undefined;
    };
    visibilityHeight: {
        type: NumberConstructor;
        default: number;
    };
    speed: {
        type: NumberConstructor;
        default: number;
    };
    verticalOffset: {
        type: StringConstructor;
        default: string;
    };
    horizontalOffset: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    horizontalPosition: {
        type: PropType<"left" | "right">;
        default: string;
        validator: (value: string) => boolean;
    };
    verticalPosition: {
        type: PropType<"top" | "bottom">;
        default: string;
        validator: (value: string) => boolean;
    };
}, {
    computedStyle: import("vue").ComputedRef<{
        [x: string]: string;
    }>;
    visible: import("vue").ComputedRef<boolean>;
    scrollToTop: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    target: {
        type: PropType<string | Element | undefined>;
        default: undefined;
    };
    visibilityHeight: {
        type: NumberConstructor;
        default: number;
    };
    speed: {
        type: NumberConstructor;
        default: number;
    };
    verticalOffset: {
        type: StringConstructor;
        default: string;
    };
    horizontalOffset: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    horizontalPosition: {
        type: PropType<"left" | "right">;
        default: string;
        validator: (value: string) => boolean;
    };
    verticalPosition: {
        type: PropType<"top" | "bottom">;
        default: string;
        validator: (value: string) => boolean;
    };
}>>, {
    color: string;
    target: string | Element | undefined;
    speed: number;
    visibilityHeight: number;
    verticalOffset: string;
    horizontalOffset: string;
    horizontalPosition: "left" | "right";
    verticalPosition: "top" | "bottom";
}>;
export default _default;

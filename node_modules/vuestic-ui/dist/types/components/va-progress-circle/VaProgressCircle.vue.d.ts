declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    thickness: {
        type: NumberConstructor;
        default: number;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
        validator: (size: string | number) => boolean;
    };
    sizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config/types").SizeConfig;
    };
    fontSizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config/types").SizeConfig;
    };
}, {
    infoStyle: import("vue").ComputedRef<{
        color: string;
    }>;
    rootStyle: import("vue").ComputedRef<{
        width: string;
        height: string;
    }>;
    rootClass: import("vue").ComputedRef<{
        'va-progress-circle--indeterminate': boolean;
    }>;
    ariaAttributesComputed: import("vue").ComputedRef<{
        role: string;
        ariaLabel: string;
        ariaValuenow: number | undefined;
    }>;
    colorComputed: import("vue").ComputedRef<string>;
    radius: import("vue").ComputedRef<number>;
    dasharray: import("vue").ComputedRef<number>;
    dashoffset: import("vue").ComputedRef<number>;
    cappedThickness: import("vue").ComputedRef<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    thickness: {
        type: NumberConstructor;
        default: number;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
        validator: (size: string | number) => boolean;
    };
    sizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config/types").SizeConfig;
    };
    fontSizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config/types").SizeConfig;
    };
}>>, {
    color: string;
    size: string | number;
    modelValue: number;
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
    indeterminate: boolean;
    thickness: number;
}>;
export default _default;

import { DataTableSelectMode, DataTableSortingOrder } from './';
declare const _default: import("vue").DefineComponent<{
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
} | {
    [x: string & `on${string}`]: ((...args: never) => any) | undefined;
}, {}, {
    items: {
        id: number;
        name: string;
        username: string;
        email: string;
        address: {
            street: string;
            suite: string;
            city: string;
            zipcode: string;
            geo: {
                lat: string;
                lng: string;
            };
        };
        phone: string;
        website: string;
        company: {
            name: string;
            catchPhrase: string;
            bs: string;
        };
    }[];
    columns: ({
        key: string;
        sortable: boolean;
        sortingFn?: undefined;
        name?: undefined;
        label?: undefined;
    } | {
        key: string;
        sortable: boolean;
        sortingFn: () => number;
        name?: undefined;
        label?: undefined;
    } | {
        key: string;
        name: string;
        label: string;
        sortable: boolean;
        sortingFn?: undefined;
    } | {
        key: string;
        name: string;
        sortable: boolean;
        sortingFn?: undefined;
        label?: undefined;
    })[];
    filter: string;
    useCustomFilteringFn: boolean;
    filteredCount: number;
    sortBy: string;
    sortingOrder: DataTableSortingOrder;
    clickable: boolean;
    selectable: boolean;
    selectedItems: {
        id: number;
    }[];
    selectMode: DataTableSelectMode;
    selectedColor: string;
    perPage: number;
    currentPage: number;
    rowEventType: string;
    rowId: string;
}, {
    customFilteringFn(): any;
}, {
    shuffleItems(): void;
    filterExact(source: any): boolean;
    getCustomRowClass(item: Record<string, any>): {
        class: string;
    } | undefined;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}> | Readonly<{
    [x: string & `on${string}`]: ((...args: never) => any) | undefined;
}>, {} | {}>;
export default _default;

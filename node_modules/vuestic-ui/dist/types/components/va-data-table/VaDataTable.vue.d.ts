import { HTMLAttributes, PropType, TableHTMLAttributes } from 'vue';
import { DataTableColumnSource, DataTableItem, DataTableRow, DataTableFilterMethod, DataTableSortingOrder, DataTableSelectMode, DataTableRowBind, DataTableCellBind } from './types';
declare type emitNames = 'update:modelValue' | 'update:sortBy' | 'update:sortingOrder' | 'filtered' | 'sorted' | 'selectionChange' | 'row:click' | 'row:dblclick' | 'row:contextmenu';
declare const _default: import("vue").DefineComponent<{
    columns: {
        type: PropType<DataTableColumnSource[]>;
        default: () => DataTableColumnSource[];
    };
    items: {
        type: PropType<DataTableItem[]>;
        default: () => DataTableItem[];
    };
    itemsTrackBy: {
        type: PropType<string | ((item: DataTableItem) => any)>;
        default: string;
    };
    modelValue: {
        type: PropType<any[]>;
    };
    sortingOrder: {
        type: PropType<DataTableSortingOrder>;
    };
    sortBy: {
        type: StringConstructor;
    };
    filter: {
        type: StringConstructor;
        default: string;
    };
    filterMethod: {
        type: PropType<DataTableFilterMethod>;
    };
    hoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    animated: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectMode: {
        type: PropType<DataTableSelectMode>;
        default: string;
    };
    selectedColor: {
        type: StringConstructor;
        default: string;
    };
    perPage: {
        type: NumberConstructor;
    };
    currentPage: {
        type: NumberConstructor;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingColor: {
        type: StringConstructor;
        default: string;
    };
    noDataHtml: {
        type: StringConstructor;
        default: string;
    };
    noDataFilteredHtml: {
        type: StringConstructor;
        default: string;
    };
    hideDefaultHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    footerClone: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowFooterSorting: {
        type: BooleanConstructor;
        default: boolean;
    };
    striped: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
    };
    rowBind: {
        type: PropType<DataTableRowBind>;
    };
    cellBind: {
        type: PropType<DataTableCellBind>;
    };
}, {
    columnsComputed: import("vue").ComputedRef<import("./types").DataTableColumnInternal[]>;
    rows: import("vue").ComputedRef<DataTableRow[]>;
    ctrlSelectRow: (row: DataTableRow) => void;
    shiftSelectRows: (row: DataTableRow) => void;
    toggleBulkSelection: () => void;
    isRowSelected: (row: DataTableRow) => boolean;
    severalRowsSelected: import("vue").ComputedRef<boolean>;
    allRowsSelected: import("vue").ComputedRef<boolean>;
    sortBySync: import("vue").WritableComputedRef<string>;
    sortingOrderSync: import("vue").WritableComputedRef<DataTableSortingOrder>;
    toggleSorting: (column: import("./types").DataTableColumnInternal) => void;
    rowCSSVariables: import("vue").ComputedRef<{
        [x: string]: string | undefined;
    }>;
    getHeaderCSSVariables: (column: import("./types").DataTableColumnInternal) => {
        [x: string]: string | 0 | undefined;
    };
    getCellCSSVariables: (cell: import("./types").DataTableCell) => {
        [x: string]: import("./types").DataTableAlignOptions | import("./types").DataTableVerticalAlignOptions;
    };
    getFooterCSSVariables: (column: import("./types").DataTableColumnInternal) => {
        [x: string]: string;
    };
    getClass: (classes: unknown) => any;
    getStyle: (styles: unknown) => any;
    showNoDataHtml: import("vue").ComputedRef<boolean>;
    showNoDataFilteredHtml: import("vue").ComputedRef<boolean>;
    onRowClickHandler: (name: emitNames, event: Event, row: DataTableRow) => void;
    computedAttributes: import("vue").ComputedRef<HTMLAttributes>;
    computedTableAttributes: import("vue").ComputedRef<TableHTMLAttributes>;
    animationName: import("vue").Ref<string>;
    getColumnAriaSortOrder: (columnName: string) => "none" | "ascending" | "descending";
    getRowBind: (row: DataTableRow) => Record<string, string>;
    getCellBind: (cell: import("./types").DataTableCell, row: DataTableRow) => Record<string, string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:sortBy" | "update:sortingOrder" | "filtered" | "sorted" | "selectionChange" | "row:click" | "row:dblclick" | "row:contextmenu")[], "update:modelValue" | "update:sortBy" | "update:sortingOrder" | "filtered" | "sorted" | "selectionChange" | "row:click" | "row:dblclick" | "row:contextmenu", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    columns: {
        type: PropType<DataTableColumnSource[]>;
        default: () => DataTableColumnSource[];
    };
    items: {
        type: PropType<DataTableItem[]>;
        default: () => DataTableItem[];
    };
    itemsTrackBy: {
        type: PropType<string | ((item: DataTableItem) => any)>;
        default: string;
    };
    modelValue: {
        type: PropType<any[]>;
    };
    sortingOrder: {
        type: PropType<DataTableSortingOrder>;
    };
    sortBy: {
        type: StringConstructor;
    };
    filter: {
        type: StringConstructor;
        default: string;
    };
    filterMethod: {
        type: PropType<DataTableFilterMethod>;
    };
    hoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    animated: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectMode: {
        type: PropType<DataTableSelectMode>;
        default: string;
    };
    selectedColor: {
        type: StringConstructor;
        default: string;
    };
    perPage: {
        type: NumberConstructor;
    };
    currentPage: {
        type: NumberConstructor;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingColor: {
        type: StringConstructor;
        default: string;
    };
    noDataHtml: {
        type: StringConstructor;
        default: string;
    };
    noDataFilteredHtml: {
        type: StringConstructor;
        default: string;
    };
    hideDefaultHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    footerClone: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowFooterSorting: {
        type: BooleanConstructor;
        default: boolean;
    };
    striped: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
    };
    rowBind: {
        type: PropType<DataTableRowBind>;
    };
    cellBind: {
        type: PropType<DataTableCellBind>;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sortBy"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sortingOrder"?: ((...args: any[]) => any) | undefined;
    onFiltered?: ((...args: any[]) => any) | undefined;
    onSorted?: ((...args: any[]) => any) | undefined;
    onSelectionChange?: ((...args: any[]) => any) | undefined;
    "onRow:click"?: ((...args: any[]) => any) | undefined;
    "onRow:dblclick"?: ((...args: any[]) => any) | undefined;
    "onRow:contextmenu"?: ((...args: any[]) => any) | undefined;
}, {
    filter: string;
    columns: DataTableColumnSource[];
    loading: boolean;
    items: DataTableItem[];
    itemsTrackBy: string | ((item: DataTableItem) => any);
    hoverable: boolean;
    clickable: boolean;
    animated: boolean;
    selectable: boolean;
    selectMode: DataTableSelectMode;
    selectedColor: string;
    loadingColor: string;
    noDataHtml: string;
    noDataFilteredHtml: string;
    hideDefaultHeader: boolean;
    footerClone: boolean;
    allowFooterSorting: boolean;
    striped: boolean;
    stickyHeader: boolean;
    stickyFooter: boolean;
}>;
export default _default;

import { Ref } from 'vue';
import { DataTableRow, DataTableItem, DataTableSelectMode, DataTableItemKey } from '../types';
interface useSelectableProps {
    modelValue: (DataTableItem | DataTableItemKey)[] | undefined;
    selectable: boolean;
    selectMode: DataTableSelectMode;
    itemsTrackBy: string | ((item: DataTableItem) => any);
    [prop: string]: unknown;
}
export declare type TEmits = 'update:modelValue' | 'selectionChange';
export declare type TSelectionChange = {
    currentSelectedItems: (DataTableItem | DataTableItemKey)[];
    previousSelectedItems: (DataTableItem | DataTableItemKey)[];
};
export declare type TSelectableEmits = (event: TEmits, arg: (DataTableItem | DataTableItemKey)[] | TSelectionChange) => void;
export default function useSelectableRow(paginatedRows: Ref<DataTableRow[]>, props: useSelectableProps, emit: TSelectableEmits): {
    ctrlSelectRow: (row: DataTableRow) => void;
    shiftSelectRows: (row: DataTableRow) => void;
    toggleRowSelection: (row: DataTableRow) => void;
    toggleBulkSelection: () => void;
    isRowSelected: (row: DataTableRow) => boolean;
    noRowsSelected: import("vue").ComputedRef<boolean>;
    severalRowsSelected: import("vue").ComputedRef<boolean>;
    allRowsSelected: import("vue").ComputedRef<boolean>;
};
export {};

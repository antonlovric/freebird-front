export declare const VaBadge: import("vue").DefineComponent<{
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
    };
    text: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    overlap: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiLine: {
        type: BooleanConstructor;
        default: boolean;
    };
    visibleEmpty: {
        type: BooleanConstructor;
        default: boolean;
    };
    dot: {
        type: BooleanConstructor;
        default: boolean;
    };
    transparent: {
        type: BooleanConstructor;
        default: boolean;
    };
    left: {
        type: BooleanConstructor;
        default: boolean;
    };
    bottom: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    badgeClass: import("vue").ComputedRef<{
        'va-badge--visible-empty': boolean;
        'va-badge--empty': boolean;
        'va-badge--dot': boolean;
        'va-badge--multiLine': boolean;
        'va-badge--floating': boolean | import("vue").Slot;
        'va-badge--left': boolean;
        'va-badge--bottom': boolean;
        'va-badge--overlap': boolean;
    }>;
    badgeStyle: import("vue").ComputedRef<{
        color: string;
        borderColor: string;
        backgroundColor: string;
        opacity: number;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
    };
    text: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    overlap: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiLine: {
        type: BooleanConstructor;
        default: boolean;
    };
    visibleEmpty: {
        type: BooleanConstructor;
        default: boolean;
    };
    dot: {
        type: BooleanConstructor;
        default: boolean;
    };
    transparent: {
        type: BooleanConstructor;
        default: boolean;
    };
    left: {
        type: BooleanConstructor;
        default: boolean;
    };
    bottom: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    transparent: boolean;
    left: boolean;
    bottom: boolean;
    color: string;
    text: string | number;
    dot: boolean;
    overlap: boolean;
    multiLine: boolean;
    visibleEmpty: boolean;
}>;

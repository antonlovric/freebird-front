import { PropType, Ref } from 'vue';
import { SelectDropdownIcon, SelectOption, Placement } from './types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<SelectOption | SelectOption[]>;
        default: string;
    };
    placement: {
        type: PropType<Placement>;
        default: string;
        validator: (placement: string) => boolean;
    };
    allowCreate: {
        type: PropType<boolean | "unique">;
        default: boolean;
        validator: (mode: string | boolean) => boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    searchable: {
        type: BooleanConstructor;
        default: boolean;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    width: {
        type: StringConstructor;
        default: string;
    };
    maxHeight: {
        type: StringConstructor;
        default: string;
    };
    noOptionsText: {
        type: StringConstructor;
        default: string;
    };
    fixed: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideSelected: {
        type: BooleanConstructor;
        default: boolean;
    };
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
    dropdownIcon: {
        type: PropType<string | SelectDropdownIcon>;
        default: () => SelectDropdownIcon;
        validator: (value: string | SelectDropdownIcon) => boolean;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
    maxSelections: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<((v: any) => any)[]>;
        default: () => any;
    } & {
        type: PropType<((v: SelectOption) => any)[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: PropType<SelectOption[]>;
        default: () => never[];
    };
    textBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    valueBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    trackBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    disabledBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    groupBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
}, {
    isFocused: import("vue").ComputedRef<boolean>;
    input: import("vue").ShallowRef<import("vue").DefineComponent<{
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: NumberConstructor;
            default: number;
        };
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: PropType<import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">>;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputClass: {
            type: StringConstructor;
            default: string;
        };
        pattern: {
            type: StringConstructor;
        };
        inputmode: {
            type: StringConstructor;
            default: string;
        };
        ariaLabel: {
            type: StringConstructor;
            default: undefined;
        };
        counter: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxLength: {
            type: NumberConstructor;
            default: undefined;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        outline: {
            type: BooleanConstructor;
            default: boolean;
        };
        bordered: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        readonly: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        autosize: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        minRows: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        maxRows: {
            type: PropType<number | undefined>;
            required: false;
            default: undefined;
        };
        mask: {
            type: PropType<string | Record<string, number[]>>;
            default: string;
        };
        returnRaw: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        clearValue: {
            type: StringConstructor;
            default: string;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: PropType<((v: any) => any)[]>;
            default: () => any;
        } & {
            type: PropType<((v: string) => any)[]>;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        input: import("vue").ShallowRef<HTMLInputElement | import("vue").DefineComponent<{
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            placeholder: {
                type: StringConstructor;
            };
            autosize: {
                type: BooleanConstructor;
                default: boolean;
            };
            minRows: {
                type: NumberConstructor;
                default: number;
                validator: (val: number) => boolean;
            };
            maxRows: {
                type: NumberConstructor;
                validator: (val: number) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
        }, {
            textarea: import("vue").ShallowRef<HTMLTextAreaElement | undefined>;
            computedStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
            listeners: Record<string, any>;
            computedProps: import("vue").ComputedRef<{
                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                placeholder?: string | undefined;
                autosize?: boolean | undefined;
                modelValue?: string | number | undefined;
                minRows?: number | undefined;
                maxRows?: number | undefined;
            }>;
            focus: () => void;
            blur: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            placeholder: {
                type: StringConstructor;
            };
            autosize: {
                type: BooleanConstructor;
                default: boolean;
            };
            minRows: {
                type: NumberConstructor;
                default: number;
                validator: (val: number) => boolean;
            };
            maxRows: {
                type: NumberConstructor;
                validator: (val: number) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            disabled: boolean;
            readonly: boolean;
            autosize: boolean;
            modelValue: string | number;
            minRows: number;
        }> | undefined>;
        inputEvents: {
            onFocus: (e: Event) => void;
            onBlur: (e: Event) => void;
            onInput: (event: Event) => void;
        };
        valueLengthComputed: import("vue").ComputedRef<number | undefined>;
        computedChildAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
        computedInputAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
        textareaProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
            [x: string & `on${string}`]: {
                type: PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            disabled: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            readonly: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            autosize: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            modelValue: {
                type: PropType<string | number>;
                required: true;
                default: string | number;
            };
            minRows: {
                type: PropType<number>;
                required: true;
                default: number;
            };
            placeholder: {
                type: PropType<string | undefined>;
                required: false;
                default: undefined;
            };
            maxRows: {
                type: PropType<number | undefined>;
                required: false;
                default: undefined;
            };
        }>>;
        computedValue: import("vue").ComputedRef<string | number>;
        tabIndexComputed: import("vue").ComputedRef<number>;
        computedError: import("vue").WritableComputedRef<boolean>;
        computedErrorMessages: import("vue").WritableComputedRef<string[]>;
        isFocused: import("vue").WritableComputedRef<boolean | undefined>;
        canBeCleared: import("vue").ComputedRef<boolean>;
        clearIconProps: import("vue").ComputedRef<{
            name: string;
            color: string;
            size: string;
        }>;
        fieldListeners: Record<string, any>;
        filterSlots: import("vue").ComputedRef<string[]>;
        reset: () => void;
        focus: () => void;
        blur: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: NumberConstructor;
            default: number;
        };
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: PropType<import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">>;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputClass: {
            type: StringConstructor;
            default: string;
        };
        pattern: {
            type: StringConstructor;
        };
        inputmode: {
            type: StringConstructor;
            default: string;
        };
        ariaLabel: {
            type: StringConstructor;
            default: undefined;
        };
        counter: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxLength: {
            type: NumberConstructor;
            default: undefined;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        outline: {
            type: BooleanConstructor;
            default: boolean;
        };
        bordered: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        readonly: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        autosize: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        minRows: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        maxRows: {
            type: PropType<number | undefined>;
            required: false;
            default: undefined;
        };
        mask: {
            type: PropType<string | Record<string, number[]>>;
            default: string;
        };
        returnRaw: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        clearValue: {
            type: StringConstructor;
            default: string;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: PropType<((v: any) => any)[]>;
            default: () => any;
        } & {
            type: PropType<((v: string) => any)[]>;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
    }, {
        type: import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">;
        error: boolean;
        color: string;
        mask: string | Record<string, number[]>;
        outline: boolean;
        loading: boolean;
        label: string;
        ariaLabel: string;
        disabled: boolean;
        readonly: boolean;
        success: boolean;
        placeholder: string;
        tabindex: number;
        inputmode: string;
        autosize: boolean;
        modelValue: string | number;
        bordered: boolean;
        messages: string | string[];
        errorMessages: string | string[];
        errorCount: string | number;
        rules: ((v: string) => any)[];
        immediateValidation: boolean;
        maxLength: number;
        requiredMark: boolean;
        minRows: number;
        maxRows: number | undefined;
        inputClass: string;
        counter: boolean;
        returnRaw: boolean;
        clearable: boolean;
        clearableIcon: string;
        clearValue: string;
    }> | undefined>;
    optionList: import("vue").ShallowRef<import("vue").DefineComponent<{
        options: {
            type: PropType<SelectOption[]>;
            default: () => never[];
        };
        noOptionsText: {
            type: StringConstructor;
            default: string;
        };
        getSelectedState: {
            type: PropType<(option: SelectOption) => boolean>;
            required: true;
        };
        getText: {
            type: PropType<(option: SelectOption) => string>;
            required: true;
        };
        getTrackBy: {
            type: PropType<(option: SelectOption) => number>;
            required: true;
        };
        getGroupBy: {
            type: PropType<(option: SelectOption) => string>;
            required: true;
        };
        multiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        search: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: NumberConstructor;
            default: number;
        };
        hoveredOption: {
            type: PropType<SelectOption | null>;
            default: null;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }, {
        hoverPreviousOption: () => void;
        hoverNextOption: () => void;
        hoverFirstOption: () => void;
        focus: () => void;
        scrollToOption: (option: SelectOption) => void;
        rootElement: import("vue").ShallowRef<HTMLElement | undefined>;
        getColor: (prop?: string | undefined, defaultColor?: string | undefined, preferVariables?: boolean | undefined) => string;
        filteredOptions: import("vue").ComputedRef<SelectOption[]>;
        optionGroups: import("vue").ComputedRef<Record<string, SelectOption[]>>;
        onScroll: (event: UIEvent) => void;
        beforeUpdate: () => void;
        setItemRef: (option: SelectOption) => (el: Element | import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null) => void;
        selectOption: (option: SelectOption) => void;
        getOptionIcon: (option: SelectOption) => string | undefined;
        getOptionClass: (option: SelectOption) => {
            'va-select-option-list__option': boolean;
            'va-select-option-list__option--selected': boolean;
        };
        getOptionStyle: (option: SelectOption) => {
            color: string;
            backgroundColor: string;
        };
        updateHoveredOption: (option?: SelectOption | undefined) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("select-option" | "update:hoveredOption" | "no-previous-option-to-hover" | "scroll-bottom")[], "select-option" | "update:hoveredOption" | "no-previous-option-to-hover" | "scroll-bottom", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        options: {
            type: PropType<SelectOption[]>;
            default: () => never[];
        };
        noOptionsText: {
            type: StringConstructor;
            default: string;
        };
        getSelectedState: {
            type: PropType<(option: SelectOption) => boolean>;
            required: true;
        };
        getText: {
            type: PropType<(option: SelectOption) => string>;
            required: true;
        };
        getTrackBy: {
            type: PropType<(option: SelectOption) => number>;
            required: true;
        };
        getGroupBy: {
            type: PropType<(option: SelectOption) => string>;
            required: true;
        };
        multiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        search: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: NumberConstructor;
            default: number;
        };
        hoveredOption: {
            type: PropType<SelectOption | null>;
            default: null;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
    }>> & {
        "onSelect-option"?: ((...args: any[]) => any) | undefined;
        "onUpdate:hoveredOption"?: ((...args: any[]) => any) | undefined;
        "onNo-previous-option-to-hover"?: ((...args: any[]) => any) | undefined;
        "onScroll-bottom"?: ((...args: any[]) => any) | undefined;
    }, {
        search: string;
        color: string;
        multiple: boolean;
        options: SelectOption[];
        tabindex: number;
        noOptionsText: string;
        hoveredOption: SelectOption | null;
    }> | undefined>;
    searchBar: import("vue").ShallowRef<import("vue").DefineComponent<{
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: NumberConstructor;
            default: number;
        };
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: PropType<import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">>;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputClass: {
            type: StringConstructor;
            default: string;
        };
        pattern: {
            type: StringConstructor;
        };
        inputmode: {
            type: StringConstructor;
            default: string;
        };
        ariaLabel: {
            type: StringConstructor;
            default: undefined;
        };
        counter: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxLength: {
            type: NumberConstructor;
            default: undefined;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        outline: {
            type: BooleanConstructor;
            default: boolean;
        };
        bordered: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        readonly: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        autosize: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        minRows: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        maxRows: {
            type: PropType<number | undefined>;
            required: false;
            default: undefined;
        };
        mask: {
            type: PropType<string | Record<string, number[]>>;
            default: string;
        };
        returnRaw: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        clearValue: {
            type: StringConstructor;
            default: string;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: PropType<((v: any) => any)[]>;
            default: () => any;
        } & {
            type: PropType<((v: string) => any)[]>;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        input: import("vue").ShallowRef<HTMLInputElement | import("vue").DefineComponent<{
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            placeholder: {
                type: StringConstructor;
            };
            autosize: {
                type: BooleanConstructor;
                default: boolean;
            };
            minRows: {
                type: NumberConstructor;
                default: number;
                validator: (val: number) => boolean;
            };
            maxRows: {
                type: NumberConstructor;
                validator: (val: number) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
        }, {
            textarea: import("vue").ShallowRef<HTMLTextAreaElement | undefined>;
            computedStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
            listeners: Record<string, any>;
            computedProps: import("vue").ComputedRef<{
                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                disabled?: boolean | undefined;
                readonly?: boolean | undefined;
                placeholder?: string | undefined;
                autosize?: boolean | undefined;
                modelValue?: string | number | undefined;
                minRows?: number | undefined;
                maxRows?: number | undefined;
            }>;
            focus: () => void;
            blur: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            placeholder: {
                type: StringConstructor;
            };
            autosize: {
                type: BooleanConstructor;
                default: boolean;
            };
            minRows: {
                type: NumberConstructor;
                default: number;
                validator: (val: number) => boolean;
            };
            maxRows: {
                type: NumberConstructor;
                validator: (val: number) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            disabled: boolean;
            readonly: boolean;
            autosize: boolean;
            modelValue: string | number;
            minRows: number;
        }> | undefined>;
        inputEvents: {
            onFocus: (e: Event) => void;
            onBlur: (e: Event) => void;
            onInput: (event: Event) => void;
        };
        valueLengthComputed: import("vue").ComputedRef<number | undefined>;
        computedChildAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
        computedInputAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
        textareaProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
            [x: string & `on${string}`]: {
                type: PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            disabled: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            readonly: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            autosize: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            modelValue: {
                type: PropType<string | number>;
                required: true;
                default: string | number;
            };
            minRows: {
                type: PropType<number>;
                required: true;
                default: number;
            };
            placeholder: {
                type: PropType<string | undefined>;
                required: false;
                default: undefined;
            };
            maxRows: {
                type: PropType<number | undefined>;
                required: false;
                default: undefined;
            };
        }>>;
        computedValue: import("vue").ComputedRef<string | number>;
        tabIndexComputed: import("vue").ComputedRef<number>;
        computedError: import("vue").WritableComputedRef<boolean>;
        computedErrorMessages: import("vue").WritableComputedRef<string[]>;
        isFocused: import("vue").WritableComputedRef<boolean | undefined>;
        canBeCleared: import("vue").ComputedRef<boolean>;
        clearIconProps: import("vue").ComputedRef<{
            name: string;
            color: string;
            size: string;
        }>;
        fieldListeners: Record<string, any>;
        filterSlots: import("vue").ComputedRef<string[]>;
        reset: () => void;
        focus: () => void;
        blur: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: NumberConstructor;
            default: number;
        };
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: PropType<import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">>;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputClass: {
            type: StringConstructor;
            default: string;
        };
        pattern: {
            type: StringConstructor;
        };
        inputmode: {
            type: StringConstructor;
            default: string;
        };
        ariaLabel: {
            type: StringConstructor;
            default: undefined;
        };
        counter: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxLength: {
            type: NumberConstructor;
            default: undefined;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        outline: {
            type: BooleanConstructor;
            default: boolean;
        };
        bordered: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        readonly: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        autosize: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        minRows: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        maxRows: {
            type: PropType<number | undefined>;
            required: false;
            default: undefined;
        };
        mask: {
            type: PropType<string | Record<string, number[]>>;
            default: string;
        };
        returnRaw: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        clearValue: {
            type: StringConstructor;
            default: string;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: PropType<((v: any) => any)[]>;
            default: () => any;
        } & {
            type: PropType<((v: string) => any)[]>;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
    }, {
        type: import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">;
        error: boolean;
        color: string;
        mask: string | Record<string, number[]>;
        outline: boolean;
        loading: boolean;
        label: string;
        ariaLabel: string;
        disabled: boolean;
        readonly: boolean;
        success: boolean;
        placeholder: string;
        tabindex: number;
        inputmode: string;
        autosize: boolean;
        modelValue: string | number;
        bordered: boolean;
        messages: string | string[];
        errorMessages: string | string[];
        errorCount: string | number;
        rules: ((v: string) => any)[];
        immediateValidation: boolean;
        maxLength: number;
        requiredMark: boolean;
        minRows: number;
        maxRows: number | undefined;
        inputClass: string;
        counter: boolean;
        returnRaw: boolean;
        clearable: boolean;
        clearableIcon: string;
        clearValue: string;
    }> | undefined>;
    reset: () => void;
    focus: () => void;
    blur: () => void;
    onInputFocus: () => void;
    onInputBlur: () => void;
    focusOptionList: () => void;
    onSelectClick: () => void;
    focusSearchBar: () => void;
    searchInput: Ref<string>;
    showSearchInput: import("vue").ComputedRef<boolean | "unique">;
    hoveredOption: Ref<string | number | {
        [x: string]: any;
    } | null>;
    tabIndexComputed: import("vue").ComputedRef<number>;
    valueComputed: import("vue").WritableComputedRef<SelectOption | SelectOption[]>;
    valueComputedString: import("vue").ComputedRef<string>;
    showClearIcon: import("vue").ComputedRef<boolean>;
    toggleIcon: import("vue").ComputedRef<string>;
    computedErrorMessages: import("vue").WritableComputedRef<string[]>;
    computedError: import("vue").WritableComputedRef<boolean>;
    filteredOptions: import("vue").ComputedRef<SelectOption[]>;
    checkIsOptionSelected: (option: SelectOption) => boolean;
    closeOnContentClick: import("vue").ComputedRef<boolean>;
    selectOption: (option: SelectOption) => void;
    selectOrAddOption: () => void;
    selectHoveredOption: () => void;
    hoverPreviousOption: () => void;
    hoverNextOption: () => void;
    showDropdownContentComputed: import("vue").WritableComputedRef<boolean>;
    showDropdown: () => void;
    hideDropdown: () => void;
    hideAndFocus: () => void;
    toggleDropdown: () => void;
    toggleIconColor: import("vue").ComputedRef<string>;
    onHintedSearch: (event: KeyboardEvent) => void;
    getText: (option: SelectOption) => any;
    getTrackBy: (option: SelectOption) => any;
    getGroupBy: (option: SelectOption) => any;
    onScrollBottom: () => void;
    clearIconProps: import("vue").ComputedRef<{
        name: string;
        color: string;
        size: string;
    }>;
    isPlaceholder: import("vue").ComputedRef<boolean | "">;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: PropType<SelectOption | SelectOption[]>;
        default: string;
    };
    placement: {
        type: PropType<Placement>;
        default: string;
        validator: (placement: string) => boolean;
    };
    allowCreate: {
        type: PropType<boolean | "unique">;
        default: boolean;
        validator: (mode: string | boolean) => boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    searchable: {
        type: BooleanConstructor;
        default: boolean;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    width: {
        type: StringConstructor;
        default: string;
    };
    maxHeight: {
        type: StringConstructor;
        default: string;
    };
    noOptionsText: {
        type: StringConstructor;
        default: string;
    };
    fixed: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideSelected: {
        type: BooleanConstructor;
        default: boolean;
    };
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
    dropdownIcon: {
        type: PropType<string | SelectDropdownIcon>;
        default: () => SelectDropdownIcon;
        validator: (value: string | SelectDropdownIcon) => boolean;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
    maxSelections: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<((v: any) => any)[]>;
        default: () => any;
    } & {
        type: PropType<((v: SelectOption) => any)[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: PropType<SelectOption[]>;
        default: () => never[];
    };
    textBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    valueBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    trackBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    disabledBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
    groupBy: {
        type: PropType<string | ((option: SelectOption) => unknown)>;
        default: string;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    fixed: boolean;
    error: boolean;
    width: string;
    color: string;
    maxHeight: string;
    outline: boolean;
    loading: boolean;
    label: string;
    disabled: boolean;
    multiple: boolean;
    options: SelectOption[];
    readonly: boolean;
    success: boolean;
    separator: string;
    placeholder: string;
    tabindex: number;
    modelValue: SelectOption | SelectOption[];
    placement: Placement;
    bordered: boolean;
    messages: string | string[];
    errorMessages: string | string[];
    errorCount: string | number;
    rules: ((v: SelectOption) => any)[];
    immediateValidation: boolean;
    requiredMark: boolean;
    clearable: boolean;
    clearableIcon: string;
    clearValue: string;
    textBy: string | ((option: SelectOption) => unknown);
    valueBy: string | ((option: SelectOption) => unknown);
    trackBy: string | ((option: SelectOption) => unknown);
    disabledBy: string | ((option: SelectOption) => unknown);
    groupBy: string | ((option: SelectOption) => unknown);
    noOptionsText: string;
    allowCreate: boolean | "unique";
    searchable: boolean;
    hideSelected: boolean;
    dropdownIcon: string | SelectDropdownIcon;
    maxSelections: string | number;
}>;
export default _default;

export declare const VaSelectOptionList: import("vue").DefineComponent<{
    options: {
        type: import("vue").PropType<import("..").SelectOption[]>;
        default: () => never[];
    };
    noOptionsText: {
        type: StringConstructor;
        default: string;
    };
    getSelectedState: {
        type: import("vue").PropType<(option: import("..").SelectOption) => boolean>;
        required: true;
    };
    getText: {
        type: import("vue").PropType<(option: import("..").SelectOption) => string>;
        required: true;
    };
    getTrackBy: {
        type: import("vue").PropType<(option: import("..").SelectOption) => number>;
        required: true;
    };
    getGroupBy: {
        type: import("vue").PropType<(option: import("..").SelectOption) => string>;
        required: true;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    search: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
    hoveredOption: {
        type: import("vue").PropType<import("..").SelectOption | null>;
        default: null;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, {
    hoverPreviousOption: () => void;
    hoverNextOption: () => void;
    hoverFirstOption: () => void;
    focus: () => void;
    scrollToOption: (option: import("..").SelectOption) => void;
    rootElement: import("vue").ShallowRef<HTMLElement | undefined>;
    getColor: (prop?: string | undefined, defaultColor?: string | undefined, preferVariables?: boolean | undefined) => string;
    filteredOptions: import("vue").ComputedRef<import("..").SelectOption[]>;
    optionGroups: import("vue").ComputedRef<Record<string, import("..").SelectOption[]>>;
    onScroll: (event: UIEvent) => void;
    beforeUpdate: () => void;
    setItemRef: (option: import("..").SelectOption) => (el: Element | import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null) => void;
    selectOption: (option: import("..").SelectOption) => void;
    getOptionIcon: (option: import("..").SelectOption) => string | undefined;
    getOptionClass: (option: import("..").SelectOption) => {
        'va-select-option-list__option': boolean;
        'va-select-option-list__option--selected': boolean;
    };
    getOptionStyle: (option: import("..").SelectOption) => {
        color: string;
        backgroundColor: string;
    };
    updateHoveredOption: (option?: import("..").SelectOption | undefined) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("select-option" | "update:hoveredOption" | "no-previous-option-to-hover" | "scroll-bottom")[], "select-option" | "update:hoveredOption" | "no-previous-option-to-hover" | "scroll-bottom", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    options: {
        type: import("vue").PropType<import("..").SelectOption[]>;
        default: () => never[];
    };
    noOptionsText: {
        type: StringConstructor;
        default: string;
    };
    getSelectedState: {
        type: import("vue").PropType<(option: import("..").SelectOption) => boolean>;
        required: true;
    };
    getText: {
        type: import("vue").PropType<(option: import("..").SelectOption) => string>;
        required: true;
    };
    getTrackBy: {
        type: import("vue").PropType<(option: import("..").SelectOption) => number>;
        required: true;
    };
    getGroupBy: {
        type: import("vue").PropType<(option: import("..").SelectOption) => string>;
        required: true;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    search: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
    hoveredOption: {
        type: import("vue").PropType<import("..").SelectOption | null>;
        default: null;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onSelect-option"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredOption"?: ((...args: any[]) => any) | undefined;
    "onNo-previous-option-to-hover"?: ((...args: any[]) => any) | undefined;
    "onScroll-bottom"?: ((...args: any[]) => any) | undefined;
}, {
    search: string;
    color: string;
    multiple: boolean;
    options: import("..").SelectOption[];
    tabindex: number;
    noOptionsText: string;
    hoveredOption: import("..").SelectOption | null;
}>;

import { PropType } from 'vue';
import { Placement } from '../../composables';
declare const _default: import("vue").DefineComponent<{
    stateful: {
        default: boolean;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
    };
    readonly: {
        type: BooleanConstructor;
    };
    anchorSelector: {
        type: StringConstructor;
        default: string;
    };
    attachElement: {
        type: StringConstructor;
        default: string;
    };
    disableAttachment: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    isContentHoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverOverTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hoverOutTimeout: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: PropType<number | [number, number]>;
        default: number;
    };
    trigger: {
        type: PropType<"none" | "click" | "hover">;
        default: string;
        validator: (value: string) => boolean;
    };
    placement: {
        type: PropType<Placement>;
        default: string;
        validator: (value: string) => boolean;
    };
}, {
    valueComputed: import("vue").WritableComputedRef<boolean>;
    anchorRef: import("vue").ShallowRef<HTMLElement | undefined>;
    contentRef: import("vue").ShallowRef<HTMLElement | undefined>;
    computedClass: {
        [x: `va-dropdown--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-dropdown--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-dropdown--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    emitAndClose: (eventName: string, close?: boolean | undefined) => void;
    onAnchorClick: () => void;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    stateful: {
        default: boolean;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
    };
    readonly: {
        type: BooleanConstructor;
    };
    anchorSelector: {
        type: StringConstructor;
        default: string;
    };
    attachElement: {
        type: StringConstructor;
        default: string;
    };
    disableAttachment: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    isContentHoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverOverTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hoverOutTimeout: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: PropType<number | [number, number]>;
        default: number;
    };
    trigger: {
        type: PropType<"none" | "click" | "hover">;
        default: string;
        validator: (value: string) => boolean;
    };
    placement: {
        type: PropType<Placement>;
        default: string;
        validator: (value: string) => boolean;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    offset: number | [number, number];
    disabled: boolean;
    readonly: boolean;
    modelValue: boolean;
    stateful: boolean;
    anchorSelector: string;
    attachElement: string;
    disableAttachment: boolean;
    keepAnchorWidth: boolean;
    isContentHoverable: boolean;
    closeOnContentClick: boolean;
    closeOnClickOutside: boolean;
    closeOnAnchorClick: boolean;
    hoverOverTimeout: number;
    hoverOutTimeout: number;
    trigger: "none" | "click" | "hover";
    placement: Placement;
}>;
export default _default;

import { ComputedRef, PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: undefined;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    outline: {
        type: BooleanConstructor;
        default: undefined;
    };
    gradient: {
        type: BooleanConstructor;
        default: undefined;
    };
    flat: {
        type: BooleanConstructor;
        default: undefined;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    block: {
        type: BooleanConstructor;
        default: boolean;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    round: {
        type: BooleanConstructor;
        default: undefined;
    };
    spaceBetweenItems: {
        type: BooleanConstructor;
        default: undefined;
    };
    icon: {
        type: StringConstructor;
        default: undefined;
    };
    iconRight: {
        type: StringConstructor;
        default: undefined;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
    to: {
        type: PropType<string | Record<string, any>>;
        default: string;
    };
    replace: {
        type: BooleanConstructor;
        default: boolean;
    };
    append: {
        type: BooleanConstructor;
        default: boolean;
    };
    exact: {
        type: BooleanConstructor;
        default: boolean;
    };
    activeClass: {
        type: StringConstructor;
        default: string;
    };
    exactActiveClass: {
        type: StringConstructor;
        default: string;
    };
    href: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        default: () => import("../../services/global-config/types").SizeConfig;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        default: () => import("../../services/global-config/types").SizeConfig;
    };
}, {
    button: import("vue").ShallowRef<HTMLElement | undefined>;
    tagComputed: ComputedRef<string>;
    hrefComputed: ComputedRef<any>;
    computedClass: ComputedRef<{
        'va-button--default': boolean;
        'va-button--flat': boolean | undefined;
        'va-button--outline': boolean | undefined;
        'va-button--disabled': boolean;
        'va-button--hover': boolean;
        'va-button--focus': boolean;
        'va-button--large': boolean;
        'va-button--small': boolean;
        'va-button--normal': boolean;
        'va-button--loading': boolean;
        'va-button--block': boolean;
        'va-button--square': boolean;
        'va-button--round': boolean;
        'va-button--no-label': boolean;
        'va-button--space-between-items': boolean | undefined;
    }>;
    computedStyle: ComputedRef<Partial<CSSStyleDeclaration>>;
    computedType: ComputedRef<string | undefined>;
    textColorComputed: ComputedRef<string>;
    loaderSize: ComputedRef<string>;
    focusState: import("vue").Ref<boolean>;
    hoverState: import("vue").Ref<boolean>;
    focus: () => void | undefined;
    blur: () => void | undefined;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: undefined;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    outline: {
        type: BooleanConstructor;
        default: undefined;
    };
    gradient: {
        type: BooleanConstructor;
        default: undefined;
    };
    flat: {
        type: BooleanConstructor;
        default: undefined;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    block: {
        type: BooleanConstructor;
        default: boolean;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    round: {
        type: BooleanConstructor;
        default: undefined;
    };
    spaceBetweenItems: {
        type: BooleanConstructor;
        default: undefined;
    };
    icon: {
        type: StringConstructor;
        default: undefined;
    };
    iconRight: {
        type: StringConstructor;
        default: undefined;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
    to: {
        type: PropType<string | Record<string, any>>;
        default: string;
    };
    replace: {
        type: BooleanConstructor;
        default: boolean;
    };
    append: {
        type: BooleanConstructor;
        default: boolean;
    };
    exact: {
        type: BooleanConstructor;
        default: boolean;
    };
    activeClass: {
        type: StringConstructor;
        default: string;
    };
    exactActiveClass: {
        type: StringConstructor;
        default: string;
    };
    href: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        default: () => import("../../services/global-config/types").SizeConfig;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        default: () => import("../../services/global-config/types").SizeConfig;
    };
}>>, {
    replace: boolean;
    flat: boolean;
    type: string;
    exact: boolean;
    block: boolean;
    color: string;
    outline: boolean;
    round: boolean;
    loading: boolean;
    target: string;
    append: boolean;
    disabled: boolean;
    size: "small" | "medium" | "large";
    tag: string;
    icon: string;
    href: string;
    to: string | Record<string, any>;
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
    textColor: string;
    gradient: boolean;
    rounded: boolean;
    spaceBetweenItems: boolean;
    iconRight: string;
    activeClass: string;
    exactActiveClass: string;
}>;
export default _default;

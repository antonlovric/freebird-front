import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    checkedIcon: {
        type: StringConstructor;
        default: string;
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    indeterminateValue: {
        type: PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
        default: null;
    };
    indeterminateIcon: {
        type: StringConstructor;
        default: string;
    };
    id: {
        type: StringConstructor;
        default: string;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    ariaLabel: {
        type: StringConstructor;
        default: undefined;
    };
    arrayValue: {
        type: PropType<unknown>;
        default: null;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    leftLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    trueValue: {
        type: PropType<unknown>;
        default: boolean;
    };
    falseValue: {
        type: PropType<unknown>;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<((v: any) => any)[]>;
        default: () => any;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    isActive: import("vue").ComputedRef<boolean>;
    computedClass: import("vue").ComputedRef<{
        'va-checkbox--selected': boolean;
        'va-checkbox--readonly': boolean;
        'va-checkbox--disabled': boolean;
        'va-checkbox--indeterminate': boolean;
        'va-checkbox--error': boolean;
        'va-checkbox--left-label': boolean;
        'va-checkbox--on-keyboard-focus': boolean;
    }>;
    labelStyle: import("vue").ComputedRef<{
        color: string;
        padding: string;
    }>;
    inputStyle: import("vue").ComputedRef<{
        background: string;
        borderColor: string;
    }>;
    computedIconName: import("vue").ComputedRef<string>;
    textColorComputed: import("vue").ComputedRef<string>;
    computedError: import("vue").WritableComputedRef<boolean>;
    computedErrorMessages: import("vue").WritableComputedRef<string[]>;
    keyboardFocusListeners: {
        mousedown: () => void;
        focus: () => void;
        blur: () => void;
    };
    toggleSelection: () => void;
    onBlur: (event: FocusEvent) => void;
    onFocus: (event: FocusEvent) => void;
    inputAttributesComputed: import("vue").ComputedRef<{
        name: string;
        disabled: boolean;
        readonly: boolean;
        tabindex: number;
        ariaLabel: string | undefined;
        ariaDisabled: boolean;
        ariaReadOnly: boolean;
        ariaChecked: boolean;
        'aria-invalid': boolean;
        'aria-errormessage': string;
    }>;
    computedId: import("vue").ComputedRef<string>;
    computedName: import("vue").ComputedRef<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    checkedIcon: {
        type: StringConstructor;
        default: string;
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    indeterminateValue: {
        type: PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
        default: null;
    };
    indeterminateIcon: {
        type: StringConstructor;
        default: string;
    };
    id: {
        type: StringConstructor;
        default: string;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    ariaLabel: {
        type: StringConstructor;
        default: undefined;
    };
    arrayValue: {
        type: PropType<unknown>;
        default: null;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    leftLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    trueValue: {
        type: PropType<unknown>;
        default: boolean;
    };
    falseValue: {
        type: PropType<unknown>;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<((v: any) => any)[]>;
        default: () => any;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    error: boolean;
    id: string;
    name: string;
    color: string;
    loading: boolean;
    label: string;
    ariaLabel: string;
    disabled: boolean;
    readonly: boolean;
    success: boolean;
    modelValue: string | number | boolean | unknown[] | Record<any, unknown> | null;
    stateful: boolean;
    indeterminate: boolean;
    messages: string | string[];
    errorMessages: string | string[];
    errorCount: string | number;
    rules: ((v: any) => any)[];
    immediateValidation: boolean;
    checkedIcon: string;
    indeterminateValue: string | number | boolean | unknown[] | Record<any, unknown> | null;
    indeterminateIcon: string;
    arrayValue: null;
    leftLabel: boolean;
    trueValue: boolean;
    falseValue: boolean;
}>;
export default _default;

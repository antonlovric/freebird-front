export declare const VaIcon: import("vue").DefineComponent<{
    name: {
        type: StringConstructor;
        default: string;
    };
    tag: {
        type: StringConstructor;
    };
    component: {
        type: import("vue").PropType<any>;
    };
    color: {
        type: StringConstructor;
    };
    rotation: {
        type: (StringConstructor | NumberConstructor)[];
    };
    spin: {
        type: (StringConstructor | BooleanConstructor)[];
    };
    flip: {
        type: import("vue").PropType<"both" | "horizontal" | "vertical" | "off">;
        default: string;
        validator: (value: string) => boolean;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
        validator: (size: string | number) => boolean;
    };
    sizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config/types").SizeConfig;
    };
    fontSizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config/types").SizeConfig;
    };
}, {
    iconConfig: import("vue").ComputedRef<import("../../services/icon-config/types").IconProps>;
    computedTag: import("vue").ComputedRef<any>;
    computedAttrs: import("vue").ComputedRef<{
        [x: string]: unknown;
    }>;
    computedClass: import("vue").ComputedRef<(string | undefined)[]>;
    computedStyle: import("vue").ComputedRef<{
        transform: string;
        cursor: string | null;
        color: string | undefined;
        fontSize: string;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    name: {
        type: StringConstructor;
        default: string;
    };
    tag: {
        type: StringConstructor;
    };
    component: {
        type: import("vue").PropType<any>;
    };
    color: {
        type: StringConstructor;
    };
    rotation: {
        type: (StringConstructor | NumberConstructor)[];
    };
    spin: {
        type: (StringConstructor | BooleanConstructor)[];
    };
    flip: {
        type: import("vue").PropType<"both" | "horizontal" | "vertical" | "off">;
        default: string;
        validator: (value: string) => boolean;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
        validator: (size: string | number) => boolean;
    };
    sizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config/types").SizeConfig;
    };
    fontSizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config/types").SizeConfig;
    };
}>>, {
    name: string;
    size: string | number;
    flip: "both" | "horizontal" | "vertical" | "off";
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
}>;

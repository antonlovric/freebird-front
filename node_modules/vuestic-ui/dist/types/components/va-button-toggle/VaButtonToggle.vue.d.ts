import { PropType } from 'vue';
import { ButtonOption } from './types';
declare const _default: import("vue").DefineComponent<{
    options: {
        type: PropType<ButtonOption[]>;
        required: true;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: undefined;
    };
    activeButtonTextColor: {
        type: StringConstructor;
    };
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
    toggleColor: {
        type: StringConstructor;
        default: string;
    };
    gradient: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    getButtonProps: (option?: ButtonOption) => {
        icon: string | undefined;
        iconRight: string | undefined;
    } | {
        outline?: boolean | undefined;
        flat?: boolean | undefined;
        icon: string | undefined;
        iconRight: string | undefined;
        color: string;
        textColor: string;
    };
    getButtonClass: (buttonValue: any) => {
        'va-button--active': boolean;
    };
    changeValue: (value: any) => void;
    isToggled: (value: any) => boolean;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    options: {
        type: PropType<ButtonOption[]>;
        required: true;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: undefined;
    };
    activeButtonTextColor: {
        type: StringConstructor;
    };
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
    toggleColor: {
        type: StringConstructor;
        default: string;
    };
    gradient: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    flat: boolean;
    color: string;
    outline: boolean;
    disabled: boolean;
    size: "small" | "medium" | "large";
    modelValue: string | number;
    textColor: string;
    gradient: boolean;
    rounded: boolean;
    toggleColor: string;
}>;
export default _default;

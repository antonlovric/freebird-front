declare const _default: {
    name: string;
    components: {
        VaForm: import("vue").DefineComponent<{
            autofocus: {
                type: BooleanConstructor;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
        }, import("./consts").Form, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "validation"[], "validation", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            autofocus: {
                type: BooleanConstructor;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            onValidation?: ((...args: any[]) => any) | undefined;
        }, {
            autofocus: boolean;
            tag: string;
        }>;
        VaCheckbox: import("vue").DefineComponent<{
            modelValue: {
                type: import("vue").PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            checkedIcon: {
                type: StringConstructor;
                default: string;
            };
            indeterminate: {
                type: BooleanConstructor;
                default: boolean;
            };
            indeterminateValue: {
                type: import("vue").PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
                default: null;
            };
            indeterminateIcon: {
                type: StringConstructor;
                default: string;
            };
            id: {
                type: StringConstructor;
                default: string;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            ariaLabel: {
                type: StringConstructor;
                default: undefined;
            };
            arrayValue: {
                type: import("vue").PropType<unknown>;
                default: null;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            leftLabel: {
                type: BooleanConstructor;
                default: boolean;
            };
            trueValue: {
                type: import("vue").PropType<unknown>;
                default: boolean;
            };
            falseValue: {
                type: import("vue").PropType<unknown>;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<((v: any) => any)[]>;
                default: () => any;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
        }, {
            isActive: import("vue").ComputedRef<boolean>;
            computedClass: import("vue").ComputedRef<{
                'va-checkbox--selected': boolean;
                'va-checkbox--readonly': boolean;
                'va-checkbox--disabled': boolean;
                'va-checkbox--indeterminate': boolean;
                'va-checkbox--error': boolean;
                'va-checkbox--left-label': boolean;
                'va-checkbox--on-keyboard-focus': boolean;
            }>;
            labelStyle: import("vue").ComputedRef<{
                color: string;
                padding: string;
            }>;
            inputStyle: import("vue").ComputedRef<{
                background: string;
                borderColor: string;
            }>;
            computedIconName: import("vue").ComputedRef<string>;
            textColorComputed: import("vue").ComputedRef<string>;
            computedError: import("vue").WritableComputedRef<boolean>;
            computedErrorMessages: import("vue").WritableComputedRef<string[]>;
            keyboardFocusListeners: {
                mousedown: () => void;
                focus: () => void;
                blur: () => void;
            };
            toggleSelection: () => void;
            onBlur: (event: FocusEvent) => void;
            onFocus: (event: FocusEvent) => void;
            inputAttributesComputed: import("vue").ComputedRef<{
                name: string;
                disabled: boolean;
                readonly: boolean;
                tabindex: number;
                ariaLabel: string | undefined;
                ariaDisabled: boolean;
                ariaReadOnly: boolean;
                ariaChecked: boolean;
                'aria-invalid': boolean;
                'aria-errormessage': string;
            }>;
            computedId: import("vue").ComputedRef<string>;
            computedName: import("vue").ComputedRef<string>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: import("vue").PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            checkedIcon: {
                type: StringConstructor;
                default: string;
            };
            indeterminate: {
                type: BooleanConstructor;
                default: boolean;
            };
            indeterminateValue: {
                type: import("vue").PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
                default: null;
            };
            indeterminateIcon: {
                type: StringConstructor;
                default: string;
            };
            id: {
                type: StringConstructor;
                default: string;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            ariaLabel: {
                type: StringConstructor;
                default: undefined;
            };
            arrayValue: {
                type: import("vue").PropType<unknown>;
                default: null;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            leftLabel: {
                type: BooleanConstructor;
                default: boolean;
            };
            trueValue: {
                type: import("vue").PropType<unknown>;
                default: boolean;
            };
            falseValue: {
                type: import("vue").PropType<unknown>;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<((v: any) => any)[]>;
                default: () => any;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            error: boolean;
            id: string;
            name: string;
            color: string;
            loading: boolean;
            label: string;
            ariaLabel: string;
            disabled: boolean;
            readonly: boolean;
            success: boolean;
            modelValue: string | number | boolean | unknown[] | Record<any, unknown> | null;
            stateful: boolean;
            indeterminate: boolean;
            messages: string | string[];
            errorMessages: string | string[];
            errorCount: string | number;
            rules: ((v: any) => any)[];
            immediateValidation: boolean;
            checkedIcon: string;
            indeterminateValue: string | number | boolean | unknown[] | Record<any, unknown> | null;
            indeterminateIcon: string;
            arrayValue: null;
            leftLabel: boolean;
            trueValue: boolean;
            falseValue: boolean;
        }>;
        VaInput: import("vue").DefineComponent<{
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            tabindex: {
                type: NumberConstructor;
                default: number;
            };
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: import("vue").PropType<import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">>;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            inputClass: {
                type: StringConstructor;
                default: string;
            };
            pattern: {
                type: StringConstructor;
            };
            inputmode: {
                type: StringConstructor;
                default: string;
            };
            ariaLabel: {
                type: StringConstructor;
                default: undefined;
            };
            counter: {
                type: BooleanConstructor;
                default: boolean;
            };
            maxLength: {
                type: NumberConstructor;
                default: undefined;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            outline: {
                type: BooleanConstructor;
                default: boolean;
            };
            bordered: {
                type: BooleanConstructor;
                default: boolean;
            };
            requiredMark: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            autosize: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            minRows: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            maxRows: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            mask: {
                type: import("vue").PropType<string | Record<string, number[]>>;
                default: string;
            };
            returnRaw: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearableIcon: {
                type: StringConstructor;
                default: string;
            };
            clearValue: {
                type: StringConstructor;
                default: string;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<((v: any) => any)[]>;
                default: () => any;
            } & {
                type: import("vue").PropType<((v: string) => any)[]>;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
        }, {
            input: import("vue").ShallowRef<HTMLInputElement | import("vue").DefineComponent<{
                modelValue: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: string;
                };
                placeholder: {
                    type: StringConstructor;
                };
                autosize: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                minRows: {
                    type: NumberConstructor;
                    default: number;
                    validator: (val: number) => boolean;
                };
                maxRows: {
                    type: NumberConstructor;
                    validator: (val: number) => boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }, {
                textarea: import("vue").ShallowRef<HTMLTextAreaElement | undefined>;
                computedStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
                listeners: Record<string, any>;
                computedProps: import("vue").ComputedRef<{
                    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                    disabled?: boolean | undefined;
                    readonly?: boolean | undefined;
                    placeholder?: string | undefined;
                    autosize?: boolean | undefined;
                    modelValue?: string | number | undefined;
                    minRows?: number | undefined;
                    maxRows?: number | undefined;
                }>;
                focus: () => void;
                blur: () => void;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: string;
                };
                placeholder: {
                    type: StringConstructor;
                };
                autosize: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                minRows: {
                    type: NumberConstructor;
                    default: number;
                    validator: (val: number) => boolean;
                };
                maxRows: {
                    type: NumberConstructor;
                    validator: (val: number) => boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }>> & {
                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
            }, {
                disabled: boolean;
                readonly: boolean;
                autosize: boolean;
                modelValue: string | number;
                minRows: number;
            }> | undefined>;
            inputEvents: {
                onFocus: (e: Event) => void;
                onBlur: (e: Event) => void;
                onInput: (event: Event) => void;
            };
            valueLengthComputed: import("vue").ComputedRef<number | undefined>;
            computedChildAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
            computedInputAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
            textareaProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                [x: string & `on${string}`]: {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                readonly: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                autosize: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                modelValue: {
                    type: import("vue").PropType<string | number>;
                    required: true;
                    default: string | number;
                };
                minRows: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                placeholder: {
                    type: import("vue").PropType<string | undefined>;
                    required: false;
                    default: undefined;
                };
                maxRows: {
                    type: import("vue").PropType<number | undefined>;
                    required: false;
                    default: undefined;
                };
            }>>;
            computedValue: import("vue").ComputedRef<string | number>;
            tabIndexComputed: import("vue").ComputedRef<number>;
            computedError: import("vue").WritableComputedRef<boolean>;
            computedErrorMessages: import("vue").WritableComputedRef<string[]>;
            isFocused: import("vue").WritableComputedRef<boolean | undefined>;
            canBeCleared: import("vue").ComputedRef<boolean>;
            clearIconProps: import("vue").ComputedRef<{
                name: string;
                color: string;
                size: string;
            }>;
            fieldListeners: Record<string, any>;
            filterSlots: import("vue").ComputedRef<string[]>;
            reset: () => void;
            focus: () => void;
            blur: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            tabindex: {
                type: NumberConstructor;
                default: number;
            };
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: import("vue").PropType<import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">>;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            inputClass: {
                type: StringConstructor;
                default: string;
            };
            pattern: {
                type: StringConstructor;
            };
            inputmode: {
                type: StringConstructor;
                default: string;
            };
            ariaLabel: {
                type: StringConstructor;
                default: undefined;
            };
            counter: {
                type: BooleanConstructor;
                default: boolean;
            };
            maxLength: {
                type: NumberConstructor;
                default: undefined;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            outline: {
                type: BooleanConstructor;
                default: boolean;
            };
            bordered: {
                type: BooleanConstructor;
                default: boolean;
            };
            requiredMark: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            autosize: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            minRows: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            maxRows: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            mask: {
                type: import("vue").PropType<string | Record<string, number[]>>;
                default: string;
            };
            returnRaw: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearableIcon: {
                type: StringConstructor;
                default: string;
            };
            clearValue: {
                type: StringConstructor;
                default: string;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<((v: any) => any)[]>;
                default: () => any;
            } & {
                type: import("vue").PropType<((v: string) => any)[]>;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            type: import("../../types/string-with-autocomplete").StringWithAutocomplete<"password" | "textarea" | "text">;
            error: boolean;
            color: string;
            mask: string | Record<string, number[]>;
            outline: boolean;
            loading: boolean;
            label: string;
            ariaLabel: string;
            disabled: boolean;
            readonly: boolean;
            success: boolean;
            placeholder: string;
            tabindex: number;
            inputmode: string;
            autosize: boolean;
            modelValue: string | number;
            bordered: boolean;
            messages: string | string[];
            errorMessages: string | string[];
            errorCount: string | number;
            rules: ((v: string) => any)[];
            immediateValidation: boolean;
            maxLength: number;
            requiredMark: boolean;
            minRows: number;
            maxRows: number | undefined;
            inputClass: string;
            counter: boolean;
            returnRaw: boolean;
            clearable: boolean;
            clearableIcon: string;
            clearValue: string;
        }>;
    };
    data(): {
        form: {
            input: string;
            checkbox: boolean;
        };
    };
};
export default _default;

import { PropType } from 'vue';
import { Placement } from '../../composables';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: undefined;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    gradient: {
        type: BooleanConstructor;
        default: undefined;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    openedIcon: {
        type: StringConstructor;
        default: string;
    };
    hideIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableDropdown: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: PropType<Placement>;
        default: string;
        validator: (placement: string) => boolean;
    };
    offset: {
        type: PropType<number | [number, number]>;
        default: number;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    split: {
        type: BooleanConstructor;
    };
    splitTo: {
        type: StringConstructor;
        default: string;
    };
    splitHref: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
    };
}, {
    hideDropdown: () => void;
    valueComputed: import("vue").WritableComputedRef<boolean>;
    computedIcon: import("vue").ComputedRef<string>;
    computedClass: import("vue").ComputedRef<{
        'va-button-dropdown': boolean;
        'va-button-dropdown--split': boolean;
        'va-button-dropdown--normal': boolean;
        'va-button-dropdown--large': boolean;
        'va-button-dropdown--small': boolean;
    }>;
    listeners: Record<string, any>;
    mainButtonListeners: Record<string, any>;
    computedButtonIcons: import("vue").ComputedRef<{
        [x: string]: string;
    }>;
    computedViewStyles: import("vue").ComputedRef<Pick<Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: undefined;
        };
        size: {
            type: PropType<"small" | "medium" | "large">;
            default: string;
            validator: (value: string) => boolean;
        };
        outline: {
            type: BooleanConstructor;
            default: boolean;
        };
        flat: {
            type: BooleanConstructor;
            default: boolean;
        };
        rounded: {
            type: BooleanConstructor;
            default: boolean;
        };
        gradient: {
            type: BooleanConstructor;
            default: undefined;
        };
        icon: {
            type: StringConstructor;
            default: string;
        };
        openedIcon: {
            type: StringConstructor;
            default: string;
        };
        hideIcon: {
            type: BooleanConstructor;
            default: boolean;
        };
        leftIcon: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableButton: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableDropdown: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        placement: {
            type: PropType<Placement>;
            default: string;
            validator: (placement: string) => boolean;
        };
        offset: {
            type: PropType<number | [number, number]>;
            default: number;
        };
        keepAnchorWidth: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeOnContentClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        split: {
            type: BooleanConstructor;
        };
        splitTo: {
            type: StringConstructor;
            default: string;
        };
        splitHref: {
            type: StringConstructor;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
        };
    }>> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
    }>>, "flat" | "color" | "outline" | "size" | "gradient" | "rounded">>;
    computedMainButtonProps: import("vue").ComputedRef<{
        to: string;
        href: string;
        loading: boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: undefined;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    gradient: {
        type: BooleanConstructor;
        default: undefined;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    openedIcon: {
        type: StringConstructor;
        default: string;
    };
    hideIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableDropdown: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: PropType<Placement>;
        default: string;
        validator: (placement: string) => boolean;
    };
    offset: {
        type: PropType<number | [number, number]>;
        default: number;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    split: {
        type: BooleanConstructor;
    };
    splitTo: {
        type: StringConstructor;
        default: string;
    };
    splitHref: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    split: boolean;
    flat: boolean;
    offset: number | [number, number];
    color: string;
    outline: boolean;
    loading: boolean;
    disabled: boolean;
    size: "small" | "medium" | "large";
    icon: string;
    modelValue: boolean;
    stateful: boolean;
    textColor: string;
    gradient: boolean;
    rounded: boolean;
    keepAnchorWidth: boolean;
    closeOnContentClick: boolean;
    placement: Placement;
    openedIcon: string;
    hideIcon: boolean;
    leftIcon: boolean;
    disableButton: boolean;
    disableDropdown: boolean;
    splitTo: string;
    splitHref: string;
}>;
export default _default;

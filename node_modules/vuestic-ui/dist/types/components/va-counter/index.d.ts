export declare const VaCounter: import("vue").DefineComponent<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    min: {
        type: NumberConstructor;
        default: undefined;
    };
    max: {
        type: NumberConstructor;
        default: undefined;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    width: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    outline: {
        type: BooleanConstructor;
    };
    bordered: {
        type: BooleanConstructor;
    };
    increaseIcon: {
        type: StringConstructor;
        default: string;
    };
    decreaseIcon: {
        type: StringConstructor;
        default: string;
    };
    buttons: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    margins: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    input: import("vue").ShallowRef<HTMLInputElement | HTMLDivElement | undefined>;
    valueComputed: import("vue").WritableComputedRef<string | number>;
    isFocused: import("vue").Ref<boolean>;
    fieldListeners: Record<string, any>;
    inputListeners: Record<string, any>;
    inputAttributesComputed: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
    inputWrapperPropsComputed: import("vue").ComputedRef<{
        color: string;
        outline: boolean;
        label: string;
        disabled: boolean;
        readonly: boolean;
        bordered: boolean;
        messages: string | string[];
    }>;
    setCountInput: ({ target }: Event) => void;
    setCountChange: ({ target }: Event) => void;
    decreaseCount: () => void;
    increaseCount: () => void;
    decreaseIconProps: import("vue").ComputedRef<{
        onClick?: (() => void) | undefined;
        class: {
            'va-counter__icon--inactive': boolean;
        };
        color: string;
        name: string;
    }>;
    increaseIconProps: import("vue").ComputedRef<{
        onClick?: (() => void) | undefined;
        class: {
            'va-counter__icon--inactive': boolean;
        };
        color: string;
        name: string;
    }>;
    decreaseButtonProps: import("vue").ComputedRef<{
        icon: string;
        disabled: boolean;
        flat: boolean;
        outline: boolean;
        color: string;
        textColor: string | undefined;
        rounded: boolean;
    }>;
    increaseButtonProps: import("vue").ComputedRef<{
        icon: string;
        disabled: boolean;
        flat: boolean;
        outline: boolean;
        color: string;
        textColor: string | undefined;
        rounded: boolean;
    }>;
    colorComputed: import("vue").ComputedRef<string>;
    classComputed: import("vue").ComputedRef<unknown[]>;
    styleComputed: import("vue").ComputedRef<Partial<CSSStyleDeclaration>>;
    marginComputed: import("vue").ComputedRef<string>;
    focus: () => void;
    blur: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    min: {
        type: NumberConstructor;
        default: undefined;
    };
    max: {
        type: NumberConstructor;
        default: undefined;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    width: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    outline: {
        type: BooleanConstructor;
    };
    bordered: {
        type: BooleanConstructor;
    };
    increaseIcon: {
        type: StringConstructor;
        default: string;
    };
    decreaseIcon: {
        type: StringConstructor;
        default: string;
    };
    buttons: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    margins: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    flat: boolean;
    max: number;
    buttons: boolean;
    width: string | number;
    color: string;
    outline: boolean;
    label: string;
    disabled: boolean;
    readonly: boolean;
    step: number;
    min: number;
    modelValue: string | number;
    stateful: boolean;
    textColor: string;
    rounded: boolean;
    bordered: boolean;
    messages: string | string[];
    manualInput: boolean;
    increaseIcon: string;
    decreaseIcon: string;
    margins: string | number;
}>;

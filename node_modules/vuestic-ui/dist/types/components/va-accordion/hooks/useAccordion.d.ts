import { Ref, WritableComputedRef } from 'vue';
export declare const AccordionServiceKey: unique symbol;
export interface AccordionItemProps {
    inset?: boolean;
    popout?: boolean;
}
export interface AccordionProps extends AccordionItemProps {
    modelValue: boolean[];
    multiply: boolean;
}
export interface AccordionItem {
    state: WritableComputedRef<boolean>;
}
export interface AccordionInject {
    onItemMounted: (item: AccordionItem) => void;
    onItemUnmounted: (item: AccordionItem) => void;
    onItemChanged: (changedItem: AccordionItem) => void;
    props: Ref<AccordionItemProps>;
}
/**
 * @param props
 * @param state array of states of all accordion items */
export declare const useAccordion: (props: AccordionProps, state: WritableComputedRef<boolean[]>) => {
    items: AccordionItem[];
};
/**
 * Hook used in items that should react on VaAccordion changes
 * @param state shows if accordion item is open
 */
export declare const useAccordionItem: (state: WritableComputedRef<boolean>) => {
    accordionProps: Ref<AccordionItemProps>;
    toggle: () => void;
};

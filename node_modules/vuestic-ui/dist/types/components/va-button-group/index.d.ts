export declare const VaButtonGroup: import("vue").DefineComponent<{
    color: {
        type: StringConstructor;
        default: string;
    };
    gradient: {
        type: BooleanConstructor;
        default: undefined;
    };
    textColor: {
        type: StringConstructor;
        default: undefined;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
}, {
    buttonConfig: import("vue").ComputedRef<{
        VaButton: {
            color: string;
            textColor: string;
            flat: boolean;
            outline: boolean;
            size: "small" | "medium" | "large";
            gradient: boolean | undefined;
            rounded: boolean;
        };
    }>;
    computedStyle: import("vue").ComputedRef<{
        [x: string]: string;
        color: string;
    }>;
    computedClass: import("vue").ComputedRef<{
        'va-button-group_square': boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: StringConstructor;
        default: string;
    };
    gradient: {
        type: BooleanConstructor;
        default: undefined;
    };
    textColor: {
        type: StringConstructor;
        default: undefined;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
}>>, {
    flat: boolean;
    color: string;
    outline: boolean;
    size: "small" | "medium" | "large";
    textColor: string;
    gradient: boolean;
    rounded: boolean;
}>;

export declare const VaTimePicker: import("vue").DefineComponent<{
    modelValue: {
        type: DateConstructor;
        required: false;
    };
    ampm: {
        type: BooleanConstructor;
        default: boolean;
    };
    hidePeriodSwitch: {
        type: BooleanConstructor;
        default: boolean;
    };
    periodUpdatesModelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    view: {
        type: import("vue").PropType<"hours" | "minutes" | "seconds">;
        default: string;
    };
    hoursFilter: {
        type: import("vue").PropType<(h: number) => boolean>;
    };
    minutesFilter: {
        type: import("vue").PropType<(h: number) => boolean>;
    };
    secondsFilter: {
        type: import("vue").PropType<(h: number) => boolean>;
    };
    framed: {
        type: BooleanConstructor;
        default: boolean;
    };
    cellHeight: {
        type: NumberConstructor;
        default: number;
    };
    visibleCellsCount: {
        type: NumberConstructor;
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {
    columns: import("vue").ComputedRef<({
        items: number[];
        activeItem: import("vue").WritableComputedRef<number>;
    } | {
        items: string[];
        activeItem: import("vue").WritableComputedRef<number>;
    })[]>;
    computedStyles: import("vue").ComputedRef<{
        [x: string]: string;
    }[]>;
    computedClasses: import("vue").ComputedRef<{
        'va-time-picker--framed': boolean;
        asObject: import("vue").ComputedRef<{
            [x: `va-time-picker--${string}`]: boolean;
        }>;
        asArray: import("vue").ComputedRef<`va-time-picker--${string}`[]>;
        asString: import("vue").ComputedRef<string>;
    }>;
    isPM: import("vue").Ref<boolean>;
    pickers: import("vue").ShallowRef<(HTMLElement | ({
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {};
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("@vue/runtime-core").ComponentCustomProperties & HTMLElement))[]>;
    setItemRef: (el: any) => void;
    focusNext: () => void;
    focusPrev: () => void;
    activeColumnIndex: import("vue").Ref<number | undefined>;
    focus: (idx?: number) => void;
    blur: (idx?: number | undefined) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: DateConstructor;
        required: false;
    };
    ampm: {
        type: BooleanConstructor;
        default: boolean;
    };
    hidePeriodSwitch: {
        type: BooleanConstructor;
        default: boolean;
    };
    periodUpdatesModelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    view: {
        type: import("vue").PropType<"hours" | "minutes" | "seconds">;
        default: string;
    };
    hoursFilter: {
        type: import("vue").PropType<(h: number) => boolean>;
    };
    minutesFilter: {
        type: import("vue").PropType<(h: number) => boolean>;
    };
    secondsFilter: {
        type: import("vue").PropType<(h: number) => boolean>;
    };
    framed: {
        type: BooleanConstructor;
        default: boolean;
    };
    cellHeight: {
        type: NumberConstructor;
        default: number;
    };
    visibleCellsCount: {
        type: NumberConstructor;
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    view: "hours" | "minutes" | "seconds";
    disabled: boolean;
    readonly: boolean;
    stateful: boolean;
    cellHeight: number;
    ampm: boolean;
    hidePeriodSwitch: boolean;
    periodUpdatesModelValue: boolean;
    framed: boolean;
    visibleCellsCount: number;
}>;

import { PropType, CSSProperties } from 'vue';
declare const _default: import("vue").DefineComponent<{
    range: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: PropType<number | number[]>;
        default: number;
    };
    trackLabel: {
        type: PropType<string | ((val: number, order?: number | undefined) => string) | undefined>;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    trackColor: {
        type: StringConstructor;
        default: string;
    };
    labelColor: {
        type: StringConstructor;
        default: string;
    };
    trackLabelVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    invertLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    pins: {
        type: BooleanConstructor;
        default: boolean;
    };
    iconPrepend: {
        type: StringConstructor;
        default: string;
    };
    iconAppend: {
        type: StringConstructor;
        default: string;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTrack: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    getColor: (prop?: string | undefined, defaultColor?: string | undefined, preferVariables?: boolean | undefined) => string;
    dot: import("vue").ShallowRef<HTMLElement | undefined>;
    dots: import("vue").ShallowRef<(HTMLElement | ({
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {};
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("@vue/runtime-core").ComponentCustomProperties & HTMLElement))[]>;
    setItemRefByIndex: (index: number) => (el: any) => void;
    orders: import("vue").ComputedRef<number[]>;
    sliderContainer: import("vue").ShallowRef<HTMLElement | undefined>;
    val: import("vue").WritableComputedRef<number | number[]>;
    getValueByOrder: (order?: number | undefined) => number;
    sliderClass: {
        [x: `va-slider--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-slider--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-slider--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    dotClass: {
        [x: `va-slider__handler--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-slider__handler--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-slider__handler--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    labelStyles: import("vue").ComputedRef<{
        color: string;
    }>;
    processedStyles: import("vue").ComputedRef<CSSProperties>;
    getPinStyles: (pin: number) => {
        [x: string]: string;
        backgroundColor: string;
        transition: string;
    };
    dottedStyles: import("vue").ComputedRef<CSSProperties | CSSProperties[]>;
    getDottedStyles: (index?: number | undefined) => CSSProperties | CSSProperties[];
    clickOnContainer: (e: MouseEvent | TouchEvent) => void;
    hasMouseDown: import("vue").Ref<boolean>;
    trackStyles: import("vue").ComputedRef<{
        backgroundColor: string;
    }>;
    pinsCol: import("vue").ComputedRef<number>;
    checkActivePin: (pin: number) => boolean;
    isFocused: import("vue").Ref<boolean>;
    isActiveDot: (index: number) => boolean;
    getTrackLabel: (val: number, order?: number | undefined) => string | number;
    currentSliderDotIndex: import("vue").Ref<number>;
    ariaLabelIdComputed: import("vue").ComputedRef<string>;
    ariaAttributesComputed: import("vue").ComputedRef<{
        role: string;
        ariaValuemin: number;
        ariaValuemax: number;
        ariaLabelledby: string;
        ariaOrientation: string;
        ariaDisabled: boolean;
        ariaReadonly: boolean;
        ariaValuenow: number | undefined;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue" | "drag-start" | "drag-end")[], "change" | "update:modelValue" | "drag-start" | "drag-end", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    range: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: PropType<number | number[]>;
        default: number;
    };
    trackLabel: {
        type: PropType<string | ((val: number, order?: number | undefined) => string) | undefined>;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    trackColor: {
        type: StringConstructor;
        default: string;
    };
    labelColor: {
        type: StringConstructor;
        default: string;
    };
    trackLabelVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    invertLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    pins: {
        type: BooleanConstructor;
        default: boolean;
    };
    iconPrepend: {
        type: StringConstructor;
        default: string;
    };
    iconAppend: {
        type: StringConstructor;
        default: string;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTrack: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onDrag-start"?: ((...args: any[]) => any) | undefined;
    "onDrag-end"?: ((...args: any[]) => any) | undefined;
}, {
    max: number;
    color: string;
    label: string;
    disabled: boolean;
    readonly: boolean;
    range: boolean;
    vertical: boolean;
    step: number;
    min: number;
    modelValue: number | number[];
    trackColor: string;
    labelColor: string;
    trackLabelVisible: boolean;
    invertLabel: boolean;
    pins: boolean;
    iconPrepend: string;
    iconAppend: string;
    showTrack: boolean;
}>;
export default _default;

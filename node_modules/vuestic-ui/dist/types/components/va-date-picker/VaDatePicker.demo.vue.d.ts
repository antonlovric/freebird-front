declare const _default: {
    components: {
        VaDatePicker: import("vue").DefineComponent<{
            modelValue: {
                type: import("vue").PropType<import("./types").DatePickerModelValue>;
            };
            monthNames: {
                type: import("vue").PropType<string[]>;
                default: string[];
            };
            weekdayNames: {
                type: import("vue").PropType<string[]>;
                default: string[];
            };
            view: {
                type: import("vue").PropType<import("./types").DatePickerView>;
            };
            type: {
                type: import("vue").PropType<import("./types").DatePickerType>;
                default: string;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: undefined;
            };
            weekendsColor: {
                type: StringConstructor;
                default: undefined;
            };
            mode: {
                type: import("vue").PropType<import("./types").DatePickerMode>;
                required: true;
                default: import("./types").DatePickerMode;
            };
            highlightToday: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            startYear: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            endYear: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            allowedYears: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            "onUpdate:modelValue": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:year": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:year": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            allowedMonths: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:month": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:month": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            hidden: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            selected: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            focused: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            otherMonth: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            today: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            inRange: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            weekend: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            highlightWeekend: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            firstWeekday: {
                type: import("vue").PropType<"Monday" | "Sunday">;
                required: true;
                default: "Monday" | "Sunday";
            };
            hideWeekDays: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            showOtherMonths: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            onClick: {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            allowedDays: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            weekends: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:day": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:day": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onUpdate:view": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
        }, {
            dayPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                view: {
                    type: import("vue").PropType<import("./types").DatePickerView>;
                    required: true;
                    default: import("./types").DatePickerView;
                };
                hidden: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                disabled: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                readonly: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                mode: {
                    type: import("vue").PropType<import("./types").DatePickerMode>;
                    required: true;
                    default: import("./types").DatePickerMode;
                };
                selected: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                focused: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                otherMonth: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                today: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                inRange: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                weekend: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                highlightWeekend: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                highlightToday: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                monthNames: {
                    type: import("vue").PropType<string[]>;
                    required: true;
                    default: string[];
                };
                weekdayNames: {
                    type: import("vue").PropType<string[]>;
                    required: true;
                    default: string[];
                };
                firstWeekday: {
                    type: import("vue").PropType<"Monday" | "Sunday">;
                    required: true;
                    default: "Monday" | "Sunday";
                };
                hideWeekDays: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                showOtherMonths: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                onClick: {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                modelValue: {
                    type: import("vue").PropType<import("./types").DatePickerModelValue>;
                    required: false;
                    default: undefined;
                };
                allowedDays: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                weekends: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onUpdate:modelValue": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:day": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:day": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
            }>>;
            headerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                disabled: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                monthNames: {
                    type: import("vue").PropType<unknown[]>;
                    required: true;
                    default: unknown[];
                };
                view: {
                    type: import("vue").PropType<import("./types").DatePickerView | undefined>;
                    required: false;
                    default: undefined;
                };
                color: {
                    type: import("vue").PropType<string | undefined>;
                    required: false;
                    default: undefined;
                };
                "onUpdate:view": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
            }>>;
            monthPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                view: {
                    type: import("vue").PropType<import("./types").DatePickerView>;
                    required: true;
                    default: import("./types").DatePickerView;
                };
                readonly: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                mode: {
                    type: import("vue").PropType<import("./types").DatePickerMode>;
                    required: true;
                    default: import("./types").DatePickerMode;
                };
                highlightToday: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                monthNames: {
                    type: import("vue").PropType<string[]>;
                    required: true;
                    default: string[];
                };
                modelValue: {
                    type: import("vue").PropType<import("./types").DatePickerModelValue>;
                    required: false;
                    default: undefined;
                };
                allowedMonths: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onUpdate:modelValue": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:month": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:month": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
            }>>;
            yearPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                view: {
                    type: import("vue").PropType<import("./types").DatePickerView>;
                    required: true;
                    default: import("./types").DatePickerView;
                };
                readonly: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                mode: {
                    type: import("vue").PropType<import("./types").DatePickerMode>;
                    required: true;
                    default: import("./types").DatePickerMode;
                };
                highlightToday: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                startYear: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                endYear: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                modelValue: {
                    type: import("vue").PropType<import("./types").DatePickerModelValue>;
                    required: false;
                    default: undefined;
                };
                allowedYears: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onUpdate:modelValue": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:year": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:year": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
            }>>;
            syncView: import("vue").WritableComputedRef<import("./types").DatePickerView>;
            classComputed: import("vue").ComputedRef<{
                'va-date-picker_without-week-days': boolean;
                'va-date-picker_disabled': boolean;
            }>;
            valueComputed: import("vue").WritableComputedRef<import("./types").DatePickerModelValue>;
            onDayModelValueUpdate: (modelValue: import("./types").DatePickerModelValue) => void;
            onMonthClick: (date: Date) => void;
            onMonthModelValueUpdate: (modelValue: import("./types").DatePickerModelValue) => void;
            onYearClick: (date: Date) => void;
            onYearModelValueUpdate: (modelValue: import("./types").DatePickerModelValue) => void;
            colorsStyle: Record<string, any>;
            currentPicker: import("vue").Ref<import("vue").DefineComponent<{
                monthNames: {
                    type: import("vue").PropType<string[]>;
                    required: true;
                };
                weekdayNames: {
                    type: import("vue").PropType<string[]>;
                    required: true;
                };
                firstWeekday: {
                    type: import("vue").PropType<"Monday" | "Sunday">;
                    default: string;
                };
                hideWeekDays: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                view: {
                    type: import("vue").PropType<import("./types").DatePickerView>;
                    default: () => {
                        type: string;
                    };
                };
                modelValue: {
                    type: import("vue").PropType<import("./types").DatePickerModelValue>;
                };
                mode: {
                    type: import("vue").PropType<import("./types").DatePickerMode>;
                    default: string;
                };
                showOtherMonths: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                allowedDays: {
                    type: import("vue").PropType<(date: Date) => boolean>;
                };
                weekends: {
                    type: import("vue").PropType<(date: Date) => boolean>;
                };
                highlightWeekend: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                highlightToday: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                hidden: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                disabled: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                selected: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                focused: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                otherMonth: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                today: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                inRange: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                weekend: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                onClick: {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
            }, {
                hoveredIndex: import("vue").Ref<number>;
                calendarDates: import("vue").ComputedRef<Date[]>;
                onClick: (date: Date) => void;
                isToday: (date: Date) => boolean;
                isSelected: (date: Date) => boolean;
                isInRange: (date: Date) => boolean;
                isOtherMonth: (date: Date) => boolean;
                isDateDisabled: (date: Date) => boolean;
                isDateWeekend: (date: Date) => boolean;
                containerAttributes: {
                    onFocus: () => void;
                    onKeydown: (e: KeyboardEvent) => void;
                    onBlur: () => void;
                    onMousedown: () => void;
                    tabindex: number;
                };
                weekdayNamesComputed: import("vue").ComputedRef<string[]>;
                VaDayPickerCellPropValues: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                    hidden: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    readonly: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    selected: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    focused: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    otherMonth: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    today: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    inRange: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    weekend: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    highlightWeekend: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    highlightToday: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    onClick: {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                }>>;
                focusedCellIndex: import("vue").Ref<number>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:day" | "click:day")[], "update:modelValue" | "hover:day" | "click:day", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                monthNames: {
                    type: import("vue").PropType<string[]>;
                    required: true;
                };
                weekdayNames: {
                    type: import("vue").PropType<string[]>;
                    required: true;
                };
                firstWeekday: {
                    type: import("vue").PropType<"Monday" | "Sunday">;
                    default: string;
                };
                hideWeekDays: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                view: {
                    type: import("vue").PropType<import("./types").DatePickerView>;
                    default: () => {
                        type: string;
                    };
                };
                modelValue: {
                    type: import("vue").PropType<import("./types").DatePickerModelValue>;
                };
                mode: {
                    type: import("vue").PropType<import("./types").DatePickerMode>;
                    default: string;
                };
                showOtherMonths: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                allowedDays: {
                    type: import("vue").PropType<(date: Date) => boolean>;
                };
                weekends: {
                    type: import("vue").PropType<(date: Date) => boolean>;
                };
                highlightWeekend: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                highlightToday: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                hidden: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                disabled: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                selected: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                focused: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                otherMonth: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                today: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                inRange: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                weekend: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                onClick: {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
            }>> & {
                "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                "onHover:day"?: ((...args: any[]) => any) | undefined;
                "onClick:day"?: ((...args: any[]) => any) | undefined;
            }, {
                view: import("./types").DatePickerView;
                hidden: boolean;
                disabled: boolean;
                readonly: boolean;
                mode: import("./types").DatePickerMode;
                onClick: ((...args: any[]) => any) | undefined;
                selected: boolean;
                focused: boolean;
                otherMonth: boolean;
                today: boolean;
                inRange: boolean;
                weekend: boolean;
                highlightWeekend: boolean;
                highlightToday: boolean;
                firstWeekday: "Monday" | "Sunday";
                hideWeekDays: boolean;
                showOtherMonths: boolean;
            }> | import("vue").DefineComponent<{
                modelValue: {
                    type: import("vue").PropType<import("./types").DatePickerModelValue>;
                };
                monthNames: {
                    type: import("vue").PropType<string[]>;
                    required: true;
                };
                view: {
                    type: import("vue").PropType<import("./types").DatePickerView>;
                    default: () => {
                        type: string;
                    };
                };
                allowedMonths: {
                    type: import("vue").PropType<(date: Date) => boolean>;
                    default: undefined;
                };
                highlightToday: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                mode: {
                    type: import("vue").PropType<import("./types").DatePickerMode>;
                    default: string;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }, {
                months: import("vue").ComputedRef<Date[]>;
                hoveredIndex: import("vue").Ref<number>;
                onClick: (date: Date) => void;
                isToday: (date: Date) => boolean;
                isSelected: (date: Date) => boolean;
                isInRange: (date: Date) => boolean;
                isDisabled: (date: Date) => boolean;
                containerAttributes: {
                    onFocus: () => void;
                    onKeydown: (e: KeyboardEvent) => void;
                    onBlur: () => void;
                    onMousedown: () => void;
                    tabindex: number;
                };
                focusedCellIndex: import("vue").Ref<number>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:month" | "click:month")[], "update:modelValue" | "hover:month" | "click:month", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: import("vue").PropType<import("./types").DatePickerModelValue>;
                };
                monthNames: {
                    type: import("vue").PropType<string[]>;
                    required: true;
                };
                view: {
                    type: import("vue").PropType<import("./types").DatePickerView>;
                    default: () => {
                        type: string;
                    };
                };
                allowedMonths: {
                    type: import("vue").PropType<(date: Date) => boolean>;
                    default: undefined;
                };
                highlightToday: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                mode: {
                    type: import("vue").PropType<import("./types").DatePickerMode>;
                    default: string;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }>> & {
                "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                "onHover:month"?: ((...args: any[]) => any) | undefined;
                "onClick:month"?: ((...args: any[]) => any) | undefined;
            }, {
                view: import("./types").DatePickerView;
                readonly: boolean;
                mode: import("./types").DatePickerMode;
                highlightToday: boolean;
                allowedMonths: (date: Date) => boolean;
            }> | import("vue").DefineComponent<{
                modelValue: {
                    type: import("vue").PropType<import("./types").DatePickerModelValue>;
                };
                allowedYears: {
                    type: import("vue").PropType<(date: Date) => boolean>;
                    default: undefined;
                };
                highlightToday: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                startYear: {
                    type: NumberConstructor;
                    default: number;
                };
                mode: {
                    type: import("vue").PropType<import("./types").DatePickerMode>;
                    default: string;
                };
                view: {
                    type: import("vue").PropType<import("./types").DatePickerView>;
                    default: () => {
                        type: string;
                    };
                };
                endYear: {
                    type: NumberConstructor;
                    default: () => number;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }, {
                hoveredIndex: import("vue").Ref<number>;
                years: import("vue").ComputedRef<Date[]>;
                rootNode: import("vue").ShallowRef<HTMLElement | undefined>;
                onClick: (date: Date) => void;
                isToday: (date: Date) => boolean;
                isSelected: (date: Date) => boolean;
                isInRange: (date: Date) => boolean;
                isYearDisabled: (year: Date) => boolean;
                focusedCellIndex: import("vue").Ref<number>;
                containerAttributes: {
                    onFocus: () => void;
                    onKeydown: (e: KeyboardEvent) => void;
                    onBlur: () => void;
                    onMousedown: () => void;
                    tabindex: number;
                };
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:year" | "click:year")[], "update:modelValue" | "hover:year" | "click:year", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: import("vue").PropType<import("./types").DatePickerModelValue>;
                };
                allowedYears: {
                    type: import("vue").PropType<(date: Date) => boolean>;
                    default: undefined;
                };
                highlightToday: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                startYear: {
                    type: NumberConstructor;
                    default: number;
                };
                mode: {
                    type: import("vue").PropType<import("./types").DatePickerMode>;
                    default: string;
                };
                view: {
                    type: import("vue").PropType<import("./types").DatePickerView>;
                    default: () => {
                        type: string;
                    };
                };
                endYear: {
                    type: NumberConstructor;
                    default: () => number;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }>> & {
                "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                "onHover:year"?: ((...args: any[]) => any) | undefined;
                "onClick:year"?: ((...args: any[]) => any) | undefined;
            }, {
                view: import("./types").DatePickerView;
                readonly: boolean;
                mode: import("./types").DatePickerMode;
                highlightToday: boolean;
                allowedYears: (date: Date) => boolean;
                startYear: number;
                endYear: number;
            }> | undefined>;
            focusCurrentPicker: () => any;
            isPickerReadonly: (pickerName: "day" | "month" | "year") => boolean;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: import("vue").PropType<import("./types").DatePickerModelValue>;
            };
            monthNames: {
                type: import("vue").PropType<string[]>;
                default: string[];
            };
            weekdayNames: {
                type: import("vue").PropType<string[]>;
                default: string[];
            };
            view: {
                type: import("vue").PropType<import("./types").DatePickerView>;
            };
            type: {
                type: import("vue").PropType<import("./types").DatePickerType>;
                default: string;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: undefined;
            };
            weekendsColor: {
                type: StringConstructor;
                default: undefined;
            };
            mode: {
                type: import("vue").PropType<import("./types").DatePickerMode>;
                required: true;
                default: import("./types").DatePickerMode;
            };
            highlightToday: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            startYear: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            endYear: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            allowedYears: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            "onUpdate:modelValue": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:year": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:year": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            allowedMonths: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:month": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:month": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            hidden: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            selected: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            focused: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            otherMonth: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            today: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            inRange: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            weekend: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            highlightWeekend: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            firstWeekday: {
                type: import("vue").PropType<"Monday" | "Sunday">;
                required: true;
                default: "Monday" | "Sunday";
            };
            hideWeekDays: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            showOtherMonths: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            onClick: {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            allowedDays: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            weekends: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:day": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:day": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onUpdate:view": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            type: import("./types").DatePickerType;
            color: string;
            hidden: boolean;
            disabled: boolean;
            readonly: boolean;
            mode: import("./types").DatePickerMode;
            onClick: ((...args: any[]) => any) | undefined;
            selected: boolean;
            stateful: boolean;
            "onUpdate:modelValue": ((...args: any[]) => any) | undefined;
            focused: boolean;
            otherMonth: boolean;
            today: boolean;
            inRange: boolean;
            weekend: boolean;
            highlightWeekend: boolean;
            highlightToday: boolean;
            "onHover:day": ((...args: any[]) => any) | undefined;
            "onClick:day": ((...args: any[]) => any) | undefined;
            monthNames: string[];
            weekdayNames: string[];
            firstWeekday: "Monday" | "Sunday";
            hideWeekDays: boolean;
            showOtherMonths: boolean;
            allowedDays: ((date: Date) => boolean) | undefined;
            weekends: ((date: Date) => boolean) | undefined;
            "onUpdate:view": ((...args: any[]) => any) | undefined;
            "onHover:month": ((...args: any[]) => any) | undefined;
            "onClick:month": ((...args: any[]) => any) | undefined;
            allowedMonths: ((date: Date) => boolean) | undefined;
            "onHover:year": ((...args: any[]) => any) | undefined;
            "onClick:year": ((...args: any[]) => any) | undefined;
            allowedYears: ((date: Date) => boolean) | undefined;
            startYear: number;
            endYear: number;
            weekendsColor: string;
        }>;
        VaChip: import("vue").DefineComponent<{
            modelValue: {
                type: BooleanConstructor;
                default: boolean;
            };
            closeable: {
                type: BooleanConstructor;
                default: boolean;
            };
            outline: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            square: {
                type: BooleanConstructor;
                default: boolean;
            };
            shadow: {
                type: BooleanConstructor;
                default: boolean;
            };
            flat: {
                type: BooleanConstructor;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (value: string) => boolean;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: string;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: StringConstructor;
                default: string;
            };
        }, {
            keyboardFocusListeners: {
                mousedown: () => void;
                focus: () => void;
                blur: () => void;
            };
            valueComputed: import("vue").WritableComputedRef<boolean>;
            hrefComputed: import("vue").ComputedRef<any>;
            tagComputed: import("vue").ComputedRef<string>;
            onMouseEnter: () => void;
            onMouseLeave: () => void;
            isHovered: import("vue").Ref<boolean>;
            close: () => void;
            iconSize: import("vue").ComputedRef<string>;
            tabIndexComputed: import("vue").ComputedRef<-1 | 0>;
            computedClass: import("vue").ComputedRef<{
                'va-chip--small': boolean;
                'va-chip--large': boolean;
                'va-chip--square': boolean;
                'va-chip--disabled': boolean;
            }>;
            computedStyle: import("vue").ComputedRef<{
                color: string;
                borderColor: string;
                background: string;
                boxShadow: string | undefined;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: BooleanConstructor;
                default: boolean;
            };
            closeable: {
                type: BooleanConstructor;
                default: boolean;
            };
            outline: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            square: {
                type: BooleanConstructor;
                default: boolean;
            };
            shadow: {
                type: BooleanConstructor;
                default: boolean;
            };
            flat: {
                type: BooleanConstructor;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (value: string) => boolean;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: string;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            replace: boolean;
            flat: boolean;
            exact: boolean;
            square: boolean;
            color: string;
            outline: boolean;
            target: string;
            append: boolean;
            disabled: boolean;
            size: "small" | "medium" | "large";
            tag: string;
            icon: string;
            href: string;
            to: string | Record<string, any>;
            modelValue: boolean;
            stateful: boolean;
            closeable: boolean;
            activeClass: string;
            exactActiveClass: string;
            shadow: boolean;
        }>;
    };
    data(): {
        value: Date;
        range: {
            start: Date;
            end: Date;
        };
        dates: Date[];
        futureDate: Date;
        monthValue: Date;
        monthRange: {
            start: Date;
            end: Date;
        };
        months: Date[];
        dayView: {
            type: string;
            month: number;
            year: number;
        };
        monthView: {
            type: string;
        };
        yearView: {
            type: string;
        };
    };
};
export default _default;

import { PropType } from 'vue';
import { DatePickerModelValue, DatePickerType, DatePickerView } from './types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<DatePickerModelValue>;
    };
    monthNames: {
        type: PropType<string[]>;
        default: string[];
    };
    weekdayNames: {
        type: PropType<string[]>;
        default: string[];
    };
    view: {
        type: PropType<DatePickerView>;
    };
    type: {
        type: PropType<DatePickerType>;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: undefined;
    };
    weekendsColor: {
        type: StringConstructor;
        default: undefined;
    };
    mode: {
        type: PropType<import("./types").DatePickerMode>;
        required: true;
        default: import("./types").DatePickerMode;
    };
    highlightToday: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    startYear: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    endYear: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    allowedYears: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    "onUpdate:modelValue": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:year": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:year": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    allowedMonths: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:month": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:month": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    hidden: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    selected: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    focused: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    otherMonth: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    today: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    inRange: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    weekend: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    highlightWeekend: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    firstWeekday: {
        type: PropType<"Monday" | "Sunday">;
        required: true;
        default: "Monday" | "Sunday";
    };
    hideWeekDays: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    showOtherMonths: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    onClick: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    allowedDays: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    weekends: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:day": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:day": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onUpdate:view": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    dayPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        view: {
            type: PropType<DatePickerView>;
            required: true;
            default: DatePickerView;
        };
        hidden: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        disabled: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        readonly: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            required: true;
            default: import("./types").DatePickerMode;
        };
        selected: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        focused: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        otherMonth: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        today: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        inRange: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        weekend: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        highlightWeekend: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        highlightToday: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        monthNames: {
            type: PropType<string[]>;
            required: true;
            default: string[];
        };
        weekdayNames: {
            type: PropType<string[]>;
            required: true;
            default: string[];
        };
        firstWeekday: {
            type: PropType<"Monday" | "Sunday">;
            required: true;
            default: "Monday" | "Sunday";
        };
        hideWeekDays: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        showOtherMonths: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        onClick: {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        modelValue: {
            type: PropType<DatePickerModelValue>;
            required: false;
            default: undefined;
        };
        allowedDays: {
            type: PropType<((date: Date) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        weekends: {
            type: PropType<((date: Date) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        "onUpdate:modelValue": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onHover:day": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onClick:day": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
    }>>;
    headerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        disabled: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        monthNames: {
            type: PropType<unknown[]>;
            required: true;
            default: unknown[];
        };
        view: {
            type: PropType<DatePickerView | undefined>;
            required: false;
            default: undefined;
        };
        color: {
            type: PropType<string | undefined>;
            required: false;
            default: undefined;
        };
        "onUpdate:view": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
    }>>;
    monthPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        view: {
            type: PropType<DatePickerView>;
            required: true;
            default: DatePickerView;
        };
        readonly: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            required: true;
            default: import("./types").DatePickerMode;
        };
        highlightToday: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        monthNames: {
            type: PropType<string[]>;
            required: true;
            default: string[];
        };
        modelValue: {
            type: PropType<DatePickerModelValue>;
            required: false;
            default: undefined;
        };
        allowedMonths: {
            type: PropType<((date: Date) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        "onUpdate:modelValue": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onHover:month": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onClick:month": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
    }>>;
    yearPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        view: {
            type: PropType<DatePickerView>;
            required: true;
            default: DatePickerView;
        };
        readonly: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            required: true;
            default: import("./types").DatePickerMode;
        };
        highlightToday: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        startYear: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        endYear: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        modelValue: {
            type: PropType<DatePickerModelValue>;
            required: false;
            default: undefined;
        };
        allowedYears: {
            type: PropType<((date: Date) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        "onUpdate:modelValue": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onHover:year": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onClick:year": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
    }>>;
    syncView: import("vue").WritableComputedRef<DatePickerView>;
    classComputed: import("vue").ComputedRef<{
        'va-date-picker_without-week-days': boolean;
        'va-date-picker_disabled': boolean;
    }>;
    valueComputed: import("vue").WritableComputedRef<DatePickerModelValue>;
    onDayModelValueUpdate: (modelValue: DatePickerModelValue) => void;
    onMonthClick: (date: Date) => void;
    onMonthModelValueUpdate: (modelValue: DatePickerModelValue) => void;
    onYearClick: (date: Date) => void;
    onYearModelValueUpdate: (modelValue: DatePickerModelValue) => void;
    colorsStyle: Record<string, any>;
    currentPicker: import("vue").Ref<import("vue").DefineComponent<{
        monthNames: {
            type: PropType<string[]>;
            required: true;
        };
        weekdayNames: {
            type: PropType<string[]>;
            required: true;
        };
        firstWeekday: {
            type: PropType<"Monday" | "Sunday">;
            default: string;
        };
        hideWeekDays: {
            type: BooleanConstructor;
            default: boolean;
        };
        view: {
            type: PropType<DatePickerView>;
            default: () => {
                type: string;
            };
        };
        modelValue: {
            type: PropType<DatePickerModelValue>;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            default: string;
        };
        showOtherMonths: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowedDays: {
            type: PropType<(date: Date) => boolean>;
        };
        weekends: {
            type: PropType<(date: Date) => boolean>;
        };
        highlightWeekend: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        hidden: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        disabled: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        selected: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        focused: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        otherMonth: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        today: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        inRange: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        weekend: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        onClick: {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
    }, {
        hoveredIndex: import("vue").Ref<number>;
        calendarDates: import("vue").ComputedRef<Date[]>;
        onClick: (date: Date) => void;
        isToday: (date: Date) => boolean;
        isSelected: (date: Date) => boolean;
        isInRange: (date: Date) => boolean;
        isOtherMonth: (date: Date) => boolean;
        isDateDisabled: (date: Date) => boolean;
        isDateWeekend: (date: Date) => boolean;
        containerAttributes: {
            onFocus: () => void;
            onKeydown: (e: KeyboardEvent) => void;
            onBlur: () => void;
            onMousedown: () => void;
            tabindex: number;
        };
        weekdayNamesComputed: import("vue").ComputedRef<string[]>;
        VaDayPickerCellPropValues: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
            hidden: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            disabled: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            readonly: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            selected: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            focused: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            otherMonth: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            today: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            inRange: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            weekend: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            highlightWeekend: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            highlightToday: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            onClick: {
                type: PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
        }>>;
        focusedCellIndex: import("vue").Ref<number>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:day" | "click:day")[], "update:modelValue" | "hover:day" | "click:day", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        monthNames: {
            type: PropType<string[]>;
            required: true;
        };
        weekdayNames: {
            type: PropType<string[]>;
            required: true;
        };
        firstWeekday: {
            type: PropType<"Monday" | "Sunday">;
            default: string;
        };
        hideWeekDays: {
            type: BooleanConstructor;
            default: boolean;
        };
        view: {
            type: PropType<DatePickerView>;
            default: () => {
                type: string;
            };
        };
        modelValue: {
            type: PropType<DatePickerModelValue>;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            default: string;
        };
        showOtherMonths: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowedDays: {
            type: PropType<(date: Date) => boolean>;
        };
        weekends: {
            type: PropType<(date: Date) => boolean>;
        };
        highlightWeekend: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        hidden: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        disabled: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        selected: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        focused: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        otherMonth: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        today: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        inRange: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        weekend: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        onClick: {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onHover:day"?: ((...args: any[]) => any) | undefined;
        "onClick:day"?: ((...args: any[]) => any) | undefined;
    }, {
        view: DatePickerView;
        hidden: boolean;
        disabled: boolean;
        readonly: boolean;
        mode: import("./types").DatePickerMode;
        onClick: ((...args: any[]) => any) | undefined;
        selected: boolean;
        focused: boolean;
        otherMonth: boolean;
        today: boolean;
        inRange: boolean;
        weekend: boolean;
        highlightWeekend: boolean;
        highlightToday: boolean;
        firstWeekday: "Monday" | "Sunday";
        hideWeekDays: boolean;
        showOtherMonths: boolean;
    }> | import("vue").DefineComponent<{
        modelValue: {
            type: PropType<DatePickerModelValue>;
        };
        monthNames: {
            type: PropType<string[]>;
            required: true;
        };
        view: {
            type: PropType<DatePickerView>;
            default: () => {
                type: string;
            };
        };
        allowedMonths: {
            type: PropType<(date: Date) => boolean>;
            default: undefined;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        months: import("vue").ComputedRef<Date[]>;
        hoveredIndex: import("vue").Ref<number>;
        onClick: (date: Date) => void;
        isToday: (date: Date) => boolean;
        isSelected: (date: Date) => boolean;
        isInRange: (date: Date) => boolean;
        isDisabled: (date: Date) => boolean;
        containerAttributes: {
            onFocus: () => void;
            onKeydown: (e: KeyboardEvent) => void;
            onBlur: () => void;
            onMousedown: () => void;
            tabindex: number;
        };
        focusedCellIndex: import("vue").Ref<number>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:month" | "click:month")[], "update:modelValue" | "hover:month" | "click:month", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: PropType<DatePickerModelValue>;
        };
        monthNames: {
            type: PropType<string[]>;
            required: true;
        };
        view: {
            type: PropType<DatePickerView>;
            default: () => {
                type: string;
            };
        };
        allowedMonths: {
            type: PropType<(date: Date) => boolean>;
            default: undefined;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onHover:month"?: ((...args: any[]) => any) | undefined;
        "onClick:month"?: ((...args: any[]) => any) | undefined;
    }, {
        view: DatePickerView;
        readonly: boolean;
        mode: import("./types").DatePickerMode;
        highlightToday: boolean;
        allowedMonths: (date: Date) => boolean;
    }> | import("vue").DefineComponent<{
        modelValue: {
            type: PropType<DatePickerModelValue>;
        };
        allowedYears: {
            type: PropType<(date: Date) => boolean>;
            default: undefined;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        startYear: {
            type: NumberConstructor;
            default: number;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            default: string;
        };
        view: {
            type: PropType<DatePickerView>;
            default: () => {
                type: string;
            };
        };
        endYear: {
            type: NumberConstructor;
            default: () => number;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        hoveredIndex: import("vue").Ref<number>;
        years: import("vue").ComputedRef<Date[]>;
        rootNode: import("vue").ShallowRef<HTMLElement | undefined>;
        onClick: (date: Date) => void;
        isToday: (date: Date) => boolean;
        isSelected: (date: Date) => boolean;
        isInRange: (date: Date) => boolean;
        isYearDisabled: (year: Date) => boolean;
        focusedCellIndex: import("vue").Ref<number>;
        containerAttributes: {
            onFocus: () => void;
            onKeydown: (e: KeyboardEvent) => void;
            onBlur: () => void;
            onMousedown: () => void;
            tabindex: number;
        };
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:year" | "click:year")[], "update:modelValue" | "hover:year" | "click:year", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: PropType<DatePickerModelValue>;
        };
        allowedYears: {
            type: PropType<(date: Date) => boolean>;
            default: undefined;
        };
        highlightToday: {
            type: BooleanConstructor;
            default: boolean;
        };
        startYear: {
            type: NumberConstructor;
            default: number;
        };
        mode: {
            type: PropType<import("./types").DatePickerMode>;
            default: string;
        };
        view: {
            type: PropType<DatePickerView>;
            default: () => {
                type: string;
            };
        };
        endYear: {
            type: NumberConstructor;
            default: () => number;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onHover:year"?: ((...args: any[]) => any) | undefined;
        "onClick:year"?: ((...args: any[]) => any) | undefined;
    }, {
        view: DatePickerView;
        readonly: boolean;
        mode: import("./types").DatePickerMode;
        highlightToday: boolean;
        allowedYears: (date: Date) => boolean;
        startYear: number;
        endYear: number;
    }> | undefined>;
    focusCurrentPicker: () => any;
    isPickerReadonly: (pickerName: 'year' | 'month' | 'day') => boolean;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: PropType<DatePickerModelValue>;
    };
    monthNames: {
        type: PropType<string[]>;
        default: string[];
    };
    weekdayNames: {
        type: PropType<string[]>;
        default: string[];
    };
    view: {
        type: PropType<DatePickerView>;
    };
    type: {
        type: PropType<DatePickerType>;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: undefined;
    };
    weekendsColor: {
        type: StringConstructor;
        default: undefined;
    };
    mode: {
        type: PropType<import("./types").DatePickerMode>;
        required: true;
        default: import("./types").DatePickerMode;
    };
    highlightToday: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    startYear: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    endYear: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    allowedYears: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    "onUpdate:modelValue": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:year": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:year": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    allowedMonths: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:month": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:month": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    hidden: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    selected: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    focused: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    otherMonth: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    today: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    inRange: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    weekend: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    highlightWeekend: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    firstWeekday: {
        type: PropType<"Monday" | "Sunday">;
        required: true;
        default: "Monday" | "Sunday";
    };
    hideWeekDays: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    showOtherMonths: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    onClick: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    allowedDays: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    weekends: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:day": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:day": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onUpdate:view": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    type: DatePickerType;
    color: string;
    hidden: boolean;
    disabled: boolean;
    readonly: boolean;
    mode: import("./types").DatePickerMode;
    onClick: ((...args: any[]) => any) | undefined;
    selected: boolean;
    stateful: boolean;
    "onUpdate:modelValue": ((...args: any[]) => any) | undefined;
    focused: boolean;
    otherMonth: boolean;
    today: boolean;
    inRange: boolean;
    weekend: boolean;
    highlightWeekend: boolean;
    highlightToday: boolean;
    "onHover:day": ((...args: any[]) => any) | undefined;
    "onClick:day": ((...args: any[]) => any) | undefined;
    monthNames: string[];
    weekdayNames: string[];
    firstWeekday: "Monday" | "Sunday";
    hideWeekDays: boolean;
    showOtherMonths: boolean;
    allowedDays: ((date: Date) => boolean) | undefined;
    weekends: ((date: Date) => boolean) | undefined;
    "onUpdate:view": ((...args: any[]) => any) | undefined;
    "onHover:month": ((...args: any[]) => any) | undefined;
    "onClick:month": ((...args: any[]) => any) | undefined;
    allowedMonths: ((date: Date) => boolean) | undefined;
    "onHover:year": ((...args: any[]) => any) | undefined;
    "onClick:year": ((...args: any[]) => any) | undefined;
    allowedYears: ((date: Date) => boolean) | undefined;
    startYear: number;
    endYear: number;
    weekendsColor: string;
}>;
export default _default;

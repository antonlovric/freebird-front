import { PropType } from 'vue';
export declare type StatefulProps<T> = {
    stateful: boolean;
    modelValue: T;
};
/**
 * You could add these props to any component by destructuring them inside props option.
 * @example
 * props: { ...useStatefulProps, componentsOwnProp, etc. }
 * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision
 */
export declare const useStatefulProps: {
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    modelValue: {
        type: any;
    };
};
export declare const useStatefulEmits: string[];
/**
 * Returns `valueComputed` that is proxy for `modelValue`
 * if `stateful` prop is `false`
 * Record<any, any> & Record<'modelValue', T>
 */
export declare function useStateful<T, D extends T = T>(props: StatefulProps<T>, emit: (event: 'update:modelValue', newValue: T) => void, defaultValue?: D): {
    valueComputed: import("vue").WritableComputedRef<T>;
};

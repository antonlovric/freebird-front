import { Ref } from 'vue';
interface ClearableProps {
    clearable: boolean;
    clearableIcon: string;
    clearValue: any;
    disabled?: boolean;
    readonly?: boolean;
    success?: boolean;
    color?: string;
}
export declare const useClearableProps: {
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
};
export declare const useClearableEmits: string[];
export declare const useClearable: (props: ClearableProps, inputValue: Ref<any>, el?: Ref<any> | undefined, hasError?: Ref<boolean> | undefined) => {
    canBeCleared: import("vue").ComputedRef<boolean>;
    clearIconColor: import("vue").ComputedRef<string>;
    clearIconProps: import("vue").ComputedRef<{
        name: string;
        color: string;
        size: string;
    }>;
    onFocus: (e?: Event | undefined) => void;
    onBlur: (e?: Event | undefined) => void;
};
export {};

import { PropType, ExtractPropTypes } from 'vue';
declare type ValidationRule<V extends any = any> = ((v: V) => any | string);
export declare const useValidationProps: {
    modelValue: {
        required: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<ValidationRule<any>[]>;
        default: () => any;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
};
export declare type ValidationProps<V extends any> = typeof useValidationProps & {
    modelValue: {
        type: PropType<V>;
    };
    rules: {
        type: PropType<ValidationRule<V>[]>;
    };
};
export declare const useValidationEmits: string[];
export declare const useValidation: <V, P extends ExtractPropTypes<{
    modelValue: {
        required: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<ValidationRule<any>[]>;
        default: () => any;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>(props: P, emit: (event: any, ...args: any[]) => void, reset: () => any, focus: () => any) => {
    computedError: import("vue").WritableComputedRef<boolean>;
    computedErrorMessages: import("vue").WritableComputedRef<string[]>;
    listeners: {
        onFocus: (e?: Event | undefined) => void;
        onBlur: (e?: Event | undefined) => void;
    };
    validate: () => boolean;
    resetValidation: () => void;
};
export {};

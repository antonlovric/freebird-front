export declare type CssColor = string;
export declare type ColorConfig = {
    [colorName: string]: CssColor;
};
/**
 * You can add these props to any component by destructuring them inside props option.
 * @example
 * props: { ...useColorProps, componentsOwnProp, etc. }
 * It's better to add props at the beginning to make sure that component own props will be used instead in case of collision.
 */
export declare const useColorProps: {
    color: {
        type: StringConstructor;
        default: string;
    };
};
export declare const useColors: () => {
    setColors: (colors: ColorConfig) => void;
    getColors: () => ColorConfig;
    getColor: (prop?: string | undefined, defaultColor?: string | undefined, preferVariables?: boolean | undefined) => CssColor;
    getBoxShadowColor: (color: import("colortranslator/dist/@types").ColorInput) => string;
    getHoverColor: (color: import("colortranslator/dist/@types").ColorInput) => string;
    getFocusColor: (color: import("colortranslator/dist/@types").ColorInput) => string;
    getGradientBackground: (color: string) => string;
    getTextColor: (color: import("colortranslator/dist/@types").ColorInput, darkColor?: string, lightColor?: string) => string;
    shiftHSLAColor: (color: import("colortranslator/dist/@types").ColorInput, offset: {
        h?: number | undefined;
        s?: number | undefined;
        l?: number | undefined;
        a?: number | undefined;
    }) => string;
    setHSLAColor: (color: import("colortranslator/dist/@types").ColorInput, newColor: {
        h?: number | undefined;
        s?: number | undefined;
        l?: number | undefined;
        a?: number | undefined;
    }) => string;
    colorsToCSSVariable: (colors: {
        [colorName: string]: string | undefined;
    }, prefix?: string) => Record<string, any>;
};

import { defineNuxtModule, addPluginTemplate, addAutoImport } from '@nuxt/kit';
import { fileURLToPath } from 'url';

function normalizeWindowsPath(input = "") {
  if (!input.includes("\\")) {
    return input;
  }
  return input.replace(/\\/g, "/");
}
const _IS_ABSOLUTE_RE = /^\/|^\\|^[a-zA-Z]:[/\\]/;
const resolve = function(...args) {
  args = args.map((arg) => normalizeWindowsPath(arg));
  let resolvedPath = "";
  let resolvedAbsolute = false;
  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    const path = i >= 0 ? args[i] : process.cwd();
    if (path.length === 0) {
      continue;
    }
    resolvedPath = `${path}/${resolvedPath}`;
    resolvedAbsolute = isAbsolute(path);
  }
  resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute);
  if (resolvedAbsolute && !isAbsolute(resolvedPath)) {
    return `/${resolvedPath}`;
  }
  return resolvedPath.length > 0 ? resolvedPath : ".";
};
function normalizeString(path, allowAboveRoot) {
  let res = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let char = null;
  for (let i = 0; i <= path.length; ++i) {
    if (i < path.length) {
      char = path[i];
    } else if (char === "/") {
      break;
    } else {
      char = "/";
    }
    if (char === "/") {
      if (lastSlash === i - 1 || dots === 1) ; else if (dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res[res.length - 1] !== "." || res[res.length - 2] !== ".") {
          if (res.length > 2) {
            const lastSlashIndex = res.lastIndexOf("/");
            if (lastSlashIndex === -1) {
              res = "";
              lastSegmentLength = 0;
            } else {
              res = res.slice(0, lastSlashIndex);
              lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
            }
            lastSlash = i;
            dots = 0;
            continue;
          } else if (res.length !== 0) {
            res = "";
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          res += res.length > 0 ? "/.." : "..";
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0) {
          res += `/${path.slice(lastSlash + 1, i)}`;
        } else {
          res = path.slice(lastSlash + 1, i);
        }
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (char === "." && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}
const isAbsolute = function(p) {
  return _IS_ABSOLUTE_RE.test(p);
};
const dirname = function(p) {
  return normalizeWindowsPath(p).replace(/\/$/, "").split("/").slice(0, -1).join("/") || "/";
};

const distDir = dirname(fileURLToPath(import.meta.url));

const module = defineNuxtModule({
  meta: {
    name: "@vuestic/nuxt",
    configKey: "vuestic",
    compatibility: {
      nuxt: "^3.0.0"
    }
  },
  defaults: {
    config: {}
  },
  hooks: {},
  setup(options, nuxt) {
    nuxt.options.css.push("vuestic-ui/dist/vuestic-ui.css");
    nuxt.options.app = nuxt.options.app || {};
    nuxt.options.app.head = nuxt.options.app.head || {};
    nuxt.options.app.head.link = nuxt.options.app.head.link || [];
    nuxt.options.app.head.link.push({ rel: "stylesheet", href: "https://fonts.googleapis.com/css2?family=Source+Sans+Pro:ital,wght@0,400;1,700&display=swap" }, { rel: "stylesheet", href: "https://fonts.googleapis.com/icon?family=Material+Icons" });
    addPluginTemplate({
      src: resolve(distDir, "./runtime/plugin.mjs"),
      filename: "plugin.mjs",
      options: {
        value: JSON.stringify(options)
      }
    });
    const composablesFrom = resolve(distDir, "./runtime/composables.mjs");
    const composablesNamesList = [
      "useGlobalConfig",
      "useColors",
      "useToast",
      "useModal"
    ];
    const autoImportsList = [];
    for (const item of composablesNamesList) {
      autoImportsList.push({ name: item, as: item, from: composablesFrom });
    }
    addAutoImport(autoImportsList);
  }
});

export { module as default };
